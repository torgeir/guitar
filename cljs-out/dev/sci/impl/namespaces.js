// Compiled by ClojureScript 1.10.773 {:static-fns true, :optimize-constants true}
goog.provide('sci.impl.namespaces');
goog.require('cljs.core');
goog.require('cljs.core.constants');
goog.require('cljs.reader');
goog.require('clojure.set');
goog.require('clojure.string');
goog.require('clojure.walk');
goog.require('sci.impl.core_protocols');
goog.require('sci.impl.hierarchies');
goog.require('sci.impl.io');
goog.require('sci.impl.macros');
goog.require('sci.impl.multimethods');
goog.require('sci.impl.parser');
goog.require('sci.impl.protocols');
goog.require('sci.impl.read');
goog.require('sci.impl.records');
goog.require('sci.impl.reify');
goog.require('sci.impl.types');
goog.require('sci.impl.utils');
goog.require('sci.impl.vars');
sci.impl.namespaces.clojure_core_ns = sci.impl.vars.__GT_SciNamespace(cljs.core.cst$sym$clojure$core,null);
sci.impl.namespaces.inlined_vars = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 90, [cljs.core.cst$sym$_PLUS__SINGLEQUOTE_,"null",cljs.core.cst$sym$unchecked_DASH_remainder_DASH_int,"null",cljs.core.cst$sym$unchecked_DASH_subtract_DASH_int,"null",cljs.core.cst$sym$dec_SINGLEQUOTE_,"null",cljs.core.cst$sym$short_DASH_array,"null",cljs.core.cst$sym$bit_DASH_shift_DASH_right,"null",cljs.core.cst$sym$aget,"null",cljs.core.cst$sym$_EQ_,"null",cljs.core.cst$sym$boolean,"null",cljs.core.cst$sym$bit_DASH_shift_DASH_left,"null",cljs.core.cst$sym$aclone,"null",cljs.core.cst$sym$dec,"null",cljs.core.cst$sym$_LT_,"null",cljs.core.cst$sym$char,"null",cljs.core.cst$sym$unchecked_DASH_long,"null",cljs.core.cst$sym$unchecked_DASH_negate,"null",cljs.core.cst$sym$unchecked_DASH_inc_DASH_int,"null",cljs.core.cst$sym$floats,"null",cljs.core.cst$sym$pos_QMARK_,"null",cljs.core.cst$sym$boolean_DASH_array,"null",cljs.core.cst$sym$alength,"null",cljs.core.cst$sym$bit_DASH_xor,"null",cljs.core.cst$sym$unsigned_DASH_bit_DASH_shift_DASH_right,"null",cljs.core.cst$sym$neg_QMARK_,"null",cljs.core.cst$sym$unchecked_DASH_float,"null",cljs.core.cst$sym$num,"null",cljs.core.cst$sym$reduced_QMARK_,"null",cljs.core.cst$sym$booleans,"null",cljs.core.cst$sym$int_DASH_array,"null",cljs.core.cst$sym$inc_SINGLEQUOTE_,"null",cljs.core.cst$sym$_LT__EQ_,"null",cljs.core.cst$sym$_DASH__SINGLEQUOTE_,"null",cljs.core.cst$sym$_STAR_,"null",cljs.core.cst$sym$min,"null",cljs.core.cst$sym$get,"null",cljs.core.cst$sym$long,"null",cljs.core.cst$sym$double,"null",cljs.core.cst$sym$bit_DASH_and_DASH_not,"null",cljs.core.cst$sym$unchecked_DASH_add_DASH_int,"null",cljs.core.cst$sym$short,"null",cljs.core.cst$sym$quot,"null",cljs.core.cst$sym$unchecked_DASH_double,"null",cljs.core.cst$sym$longs,"null",cljs.core.cst$sym$unchecked_DASH_multiply_DASH_int,"null",cljs.core.cst$sym$int,"null",cljs.core.cst$sym$_GT_,"null",cljs.core.cst$sym$unchecked_DASH_int,"null",cljs.core.cst$sym$unchecked_DASH_multiply,"null",cljs.core.cst$sym$unchecked_DASH_dec,"null",cljs.core.cst$sym$double_DASH_array,"null",cljs.core.cst$sym$float,"null",cljs.core.cst$sym$_DASH_,"null",cljs.core.cst$sym$byte_DASH_array,"null",cljs.core.cst$sym$zero_QMARK_,"null",cljs.core.cst$sym$unchecked_DASH_dec_DASH_int,"null",cljs.core.cst$sym$rem,"null",cljs.core.cst$sym$nth,"null",cljs.core.cst$sym$nil_QMARK_,"null",cljs.core.cst$sym$bit_DASH_and,"null",cljs.core.cst$sym$_STAR__SINGLEQUOTE_,"null",cljs.core.cst$sym$unchecked_DASH_add,"null",cljs.core.cst$sym$identical_QMARK_,"null",cljs.core.cst$sym$unchecked_DASH_divide_DASH_int,"null",cljs.core.cst$sym$unchecked_DASH_subtract,"null",cljs.core.cst$sym$_SLASH_,"null",cljs.core.cst$sym$bit_DASH_or,"null",cljs.core.cst$sym$_GT__EQ_,"null",cljs.core.cst$sym$long_DASH_array,"null",cljs.core.cst$sym$object_DASH_array,"null",cljs.core.cst$sym$doubles,"null",cljs.core.cst$sym$unchecked_DASH_byte,"null",cljs.core.cst$sym$unchecked_DASH_short,"null",cljs.core.cst$sym$float_DASH_array,"null",cljs.core.cst$sym$inc,"null",cljs.core.cst$sym$_PLUS_,"null",cljs.core.cst$sym$aset,"null",cljs.core.cst$sym$chars,"null",cljs.core.cst$sym$ints,"null",cljs.core.cst$sym$bit_DASH_not,"null",cljs.core.cst$sym$byte,"null",cljs.core.cst$sym$max,"null",cljs.core.cst$sym$_EQ__EQ_,"null",cljs.core.cst$sym$count,"null",cljs.core.cst$sym$char_DASH_array,"null",cljs.core.cst$sym$compare,"null",cljs.core.cst$sym$shorts,"null",cljs.core.cst$sym$unchecked_DASH_negate_DASH_int,"null",cljs.core.cst$sym$unchecked_DASH_inc,"null",cljs.core.cst$sym$unchecked_DASH_char,"null",cljs.core.cst$sym$bytes,"null"], null), null);
sci.impl.namespaces.macrofy = (function sci$impl$namespaces$macrofy(f){
return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(f,(function (p1__23301_SHARP_){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(p1__23301_SHARP_,cljs.core.cst$kw$sci_SLASH_macro,true);
}));
});
sci.impl.namespaces.__GT__STAR_ = (function sci$impl$namespaces$__GT__STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23306 = arguments.length;
var i__4737__auto___23307 = (0);
while(true){
if((i__4737__auto___23307 < len__4736__auto___23306)){
args__4742__auto__.push((arguments[i__4737__auto___23307]));

var G__23308 = (i__4737__auto___23307 + (1));
i__4737__auto___23307 = G__23308;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);
});

(sci.impl.namespaces.__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,x,forms){
var x__$1 = x;
var forms__$1 = forms;
while(true){
if(cljs.core.truth_(forms__$1)){
var form = cljs.core.first(forms__$1);
var threaded = ((cljs.core.seq_QMARK_(form))?cljs.core.with_meta(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.first(form),null,(1),null)),(new cljs.core.List(null,x__$1,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.next(form)], 0)))),cljs.core.meta(form)):(new cljs.core.List(null,form,(new cljs.core.List(null,x__$1,null,(1),null)),(2),null)));
var G__23309 = threaded;
var G__23310 = cljs.core.next(forms__$1);
x__$1 = G__23309;
forms__$1 = G__23310;
continue;
} else {
return x__$1;
}
break;
}
}));

(sci.impl.namespaces.__GT__STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.__GT__STAR_.cljs$lang$applyTo = (function (seq23302){
var G__23303 = cljs.core.first(seq23302);
var seq23302__$1 = cljs.core.next(seq23302);
var G__23304 = cljs.core.first(seq23302__$1);
var seq23302__$2 = cljs.core.next(seq23302__$1);
var G__23305 = cljs.core.first(seq23302__$2);
var seq23302__$3 = cljs.core.next(seq23302__$2);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23303,G__23304,G__23305,seq23302__$3);
}));

sci.impl.namespaces.__GT__GT__STAR_ = (function sci$impl$namespaces$__GT__GT__STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23315 = arguments.length;
var i__4737__auto___23316 = (0);
while(true){
if((i__4737__auto___23316 < len__4736__auto___23315)){
args__4742__auto__.push((arguments[i__4737__auto___23316]));

var G__23317 = (i__4737__auto___23316 + (1));
i__4737__auto___23316 = G__23317;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.__GT__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);
});

(sci.impl.namespaces.__GT__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,x,forms){
var x__$1 = x;
var forms__$1 = forms;
while(true){
if(cljs.core.truth_(forms__$1)){
var form = cljs.core.first(forms__$1);
var threaded = ((cljs.core.seq_QMARK_(form))?cljs.core.with_meta(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.first(form),null,(1),null)),cljs.core.next(form),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,x__$1,null,(1),null))], 0)))),cljs.core.meta(form)):(new cljs.core.List(null,form,(new cljs.core.List(null,x__$1,null,(1),null)),(2),null)));
var G__23318 = threaded;
var G__23319 = cljs.core.next(forms__$1);
x__$1 = G__23318;
forms__$1 = G__23319;
continue;
} else {
return x__$1;
}
break;
}
}));

(sci.impl.namespaces.__GT__GT__STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.__GT__GT__STAR_.cljs$lang$applyTo = (function (seq23311){
var G__23312 = cljs.core.first(seq23311);
var seq23311__$1 = cljs.core.next(seq23311);
var G__23313 = cljs.core.first(seq23311__$1);
var seq23311__$2 = cljs.core.next(seq23311__$1);
var G__23314 = cljs.core.first(seq23311__$2);
var seq23311__$3 = cljs.core.next(seq23311__$2);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23312,G__23313,G__23314,seq23311__$3);
}));

sci.impl.namespaces.as__GT__STAR_ = (function sci$impl$namespaces$as__GT__STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23325 = arguments.length;
var i__4737__auto___23326 = (0);
while(true){
if((i__4737__auto___23326 < len__4736__auto___23325)){
args__4742__auto__.push((arguments[i__4737__auto___23326]));

var G__23327 = (i__4737__auto___23326 + (1));
i__4737__auto___23326 = G__23327;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((4) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((4)),(0),null)):null);
return sci.impl.namespaces.as__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),argseq__4743__auto__);
});

(sci.impl.namespaces.as__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,expr,name,forms){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,name,null,(1),null)),(new cljs.core.List(null,expr,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(name),cljs.core.butlast(forms))], 0))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,((cljs.core.empty_QMARK_(forms))?name:cljs.core.last(forms)),null,(1),null))], 0))));
}));

(sci.impl.namespaces.as__GT__STAR_.cljs$lang$maxFixedArity = (4));

/** @this {Function} */
(sci.impl.namespaces.as__GT__STAR_.cljs$lang$applyTo = (function (seq23320){
var G__23321 = cljs.core.first(seq23320);
var seq23320__$1 = cljs.core.next(seq23320);
var G__23322 = cljs.core.first(seq23320__$1);
var seq23320__$2 = cljs.core.next(seq23320__$1);
var G__23323 = cljs.core.first(seq23320__$2);
var seq23320__$3 = cljs.core.next(seq23320__$2);
var G__23324 = cljs.core.first(seq23320__$3);
var seq23320__$4 = cljs.core.next(seq23320__$3);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23321,G__23322,G__23323,G__23324,seq23320__$4);
}));

sci.impl.namespaces.comment_STAR_ = (function sci$impl$namespaces$comment_STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23331 = arguments.length;
var i__4737__auto___23332 = (0);
while(true){
if((i__4737__auto___23332 < len__4736__auto___23331)){
args__4742__auto__.push((arguments[i__4737__auto___23332]));

var G__23333 = (i__4737__auto___23332 + (1));
i__4737__auto___23332 = G__23333;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((2) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((2)),(0),null)):null);
return sci.impl.namespaces.comment_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4743__auto__);
});

(sci.impl.namespaces.comment_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,_body){
return null;
}));

(sci.impl.namespaces.comment_STAR_.cljs$lang$maxFixedArity = (2));

/** @this {Function} */
(sci.impl.namespaces.comment_STAR_.cljs$lang$applyTo = (function (seq23328){
var G__23329 = cljs.core.first(seq23328);
var seq23328__$1 = cljs.core.next(seq23328);
var G__23330 = cljs.core.first(seq23328__$1);
var seq23328__$2 = cljs.core.next(seq23328__$1);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23329,G__23330,seq23328__$2);
}));

sci.impl.namespaces.dotimes_STAR_ = (function sci$impl$namespaces$dotimes_STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23339 = arguments.length;
var i__4737__auto___23340 = (0);
while(true){
if((i__4737__auto___23340 < len__4736__auto___23339)){
args__4742__auto__.push((arguments[i__4737__auto___23340]));

var G__23341 = (i__4737__auto___23340 + (1));
i__4737__auto___23340 = G__23341;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.dotimes_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);
});

(sci.impl.namespaces.dotimes_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,bindings,body){
if(cljs.core.vector_QMARK_(bindings)){
} else {
throw (new Error("Assert failed: (vector? bindings)"));
}

if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((2),cljs.core.count(bindings))){
} else {
throw (new Error("Assert failed: (= 2 (count bindings))"));
}

var i = cljs.core.first(bindings);
var n = cljs.core.second(bindings);
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$n__23334__auto__,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_long,null,(1),null)),(new cljs.core.List(null,n,null,(1),null))))),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,sci.impl.utils.allowed_loop,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,i,null,(1),null)),(new cljs.core.List(null,(0),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_when,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH__LT_,null,(1),null)),(new cljs.core.List(null,i,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.cst$sym$n__23334__auto__,null,(1),null))], 0)))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body,(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,sci.impl.utils.allowed_recur,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_inc,null,(1),null)),(new cljs.core.List(null,i,null,(1),null))))),null,(1),null))))),null,(1),null))], 0)))),null,(1),null))], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.dotimes_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.dotimes_STAR_.cljs$lang$applyTo = (function (seq23335){
var G__23336 = cljs.core.first(seq23335);
var seq23335__$1 = cljs.core.next(seq23335);
var G__23337 = cljs.core.first(seq23335__$1);
var seq23335__$2 = cljs.core.next(seq23335__$1);
var G__23338 = cljs.core.first(seq23335__$2);
var seq23335__$3 = cljs.core.next(seq23335__$2);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23336,G__23337,G__23338,seq23335__$3);
}));

/**
 * if-not from clojure.core
 */
sci.impl.namespaces.if_not_STAR_ = (function sci$impl$namespaces$if_not_STAR_(var_args){
var G__23343 = arguments.length;
switch (G__23343) {
case 4:
return sci.impl.namespaces.if_not_STAR_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
case 5:
return sci.impl.namespaces.if_not_STAR_.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(sci.impl.namespaces.if_not_STAR_.cljs$core$IFn$_invoke$arity$4 = (function (_AMPERSAND_form,_AMPERSAND_env,test,then){
return sci.impl.namespaces.if_not_STAR_.cljs$core$IFn$_invoke$arity$5(_AMPERSAND_form,_AMPERSAND_env,test,then,null);
}));

(sci.impl.namespaces.if_not_STAR_.cljs$core$IFn$_invoke$arity$5 = (function (__AMPERSAND_form,__AMPERSAND_env,test,then,else$){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$if,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_not,null,(1),null)),(new cljs.core.List(null,test,null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,then,null,(1),null)),(new cljs.core.List(null,else$,null,(1),null))], 0))));
}));

(sci.impl.namespaces.if_not_STAR_.cljs$lang$maxFixedArity = 5);

sci.impl.namespaces.when_STAR_ = (function sci$impl$namespaces$when_STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23349 = arguments.length;
var i__4737__auto___23350 = (0);
while(true){
if((i__4737__auto___23350 < len__4736__auto___23349)){
args__4742__auto__.push((arguments[i__4737__auto___23350]));

var G__23351 = (i__4737__auto___23350 + (1));
i__4737__auto___23350 = G__23351;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.when_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);
});

(sci.impl.namespaces.when_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,test,body){
return (new cljs.core.List(null,cljs.core.cst$sym$if,(new cljs.core.List(null,test,(new cljs.core.List(null,cljs.core.cons(cljs.core.cst$sym$do,body),null,(1),null)),(2),null)),(3),null));
}));

(sci.impl.namespaces.when_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.when_STAR_.cljs$lang$applyTo = (function (seq23345){
var G__23346 = cljs.core.first(seq23345);
var seq23345__$1 = cljs.core.next(seq23345);
var G__23347 = cljs.core.first(seq23345__$1);
var seq23345__$2 = cljs.core.next(seq23345__$1);
var G__23348 = cljs.core.first(seq23345__$2);
var seq23345__$3 = cljs.core.next(seq23345__$2);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23346,G__23347,G__23348,seq23345__$3);
}));

/**
 * when-not from clojure.core
 */
sci.impl.namespaces.when_not_STAR_ = (function sci$impl$namespaces$when_not_STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23356 = arguments.length;
var i__4737__auto___23357 = (0);
while(true){
if((i__4737__auto___23357 < len__4736__auto___23356)){
args__4742__auto__.push((arguments[i__4737__auto___23357]));

var G__23358 = (i__4737__auto___23357 + (1));
i__4737__auto___23357 = G__23358;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.when_not_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);
});

(sci.impl.namespaces.when_not_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (__AMPERSAND_form,__AMPERSAND_env,test,body){
return (new cljs.core.List(null,cljs.core.cst$sym$if,(new cljs.core.List(null,test,(new cljs.core.List(null,null,(new cljs.core.List(null,cljs.core.cons(cljs.core.cst$sym$do,body),null,(1),null)),(2),null)),(3),null)),(4),null));
}));

(sci.impl.namespaces.when_not_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.when_not_STAR_.cljs$lang$applyTo = (function (seq23352){
var G__23353 = cljs.core.first(seq23352);
var seq23352__$1 = cljs.core.next(seq23352);
var G__23354 = cljs.core.first(seq23352__$1);
var seq23352__$2 = cljs.core.next(seq23352__$1);
var G__23355 = cljs.core.first(seq23352__$2);
var seq23352__$3 = cljs.core.next(seq23352__$2);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23353,G__23354,G__23355,seq23352__$3);
}));

/**
 * doto from clojure.core
 */
sci.impl.namespaces.doto_STAR_ = (function sci$impl$namespaces$doto_STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23363 = arguments.length;
var i__4737__auto___23364 = (0);
while(true){
if((i__4737__auto___23364 < len__4736__auto___23363)){
args__4742__auto__.push((arguments[i__4737__auto___23364]));

var G__23365 = (i__4737__auto___23364 + (1));
i__4737__auto___23364 = G__23365;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.doto_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);
});

(sci.impl.namespaces.doto_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (__AMPERSAND_form,__AMPERSAND_env,x,forms){
var gx = cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,gx,null,(1),null)),(new cljs.core.List(null,x,null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (f){
return cljs.core.with_meta(((cljs.core.seq_QMARK_(f))?cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.first(f),null,(1),null)),(new cljs.core.List(null,gx,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.next(f)], 0)))):cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,f,null,(1),null)),(new cljs.core.List(null,gx,null,(1),null)))))),cljs.core.meta(f));
}),forms),(new cljs.core.List(null,gx,null,(1),null))], 0))));
}));

(sci.impl.namespaces.doto_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.doto_STAR_.cljs$lang$applyTo = (function (seq23359){
var G__23360 = cljs.core.first(seq23359);
var seq23359__$1 = cljs.core.next(seq23359);
var G__23361 = cljs.core.first(seq23359__$1);
var seq23359__$2 = cljs.core.next(seq23359__$1);
var G__23362 = cljs.core.first(seq23359__$2);
var seq23359__$3 = cljs.core.next(seq23359__$2);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23360,G__23361,G__23362,seq23359__$3);
}));

sci.impl.namespaces.cond_STAR_ = (function sci$impl$namespaces$cond_STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23369 = arguments.length;
var i__4737__auto___23370 = (0);
while(true){
if((i__4737__auto___23370 < len__4736__auto___23369)){
args__4742__auto__.push((arguments[i__4737__auto___23370]));

var G__23371 = (i__4737__auto___23370 + (1));
i__4737__auto___23370 = G__23371;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((2) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((2)),(0),null)):null);
return sci.impl.namespaces.cond_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4743__auto__);
});

(sci.impl.namespaces.cond_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,clauses){
if(cljs.core.truth_(clauses)){
return (new cljs.core.List(null,cljs.core.cst$sym$if,(new cljs.core.List(null,cljs.core.first(clauses),(new cljs.core.List(null,((cljs.core.next(clauses))?cljs.core.second(clauses):(function(){throw (new Error("cond requires an even number of forms"))})()),(new cljs.core.List(null,cljs.core.cons(cljs.core.cst$sym$clojure$core_SLASH_cond,cljs.core.next(cljs.core.next(clauses))),null,(1),null)),(2),null)),(3),null)),(4),null));
} else {
return null;
}
}));

(sci.impl.namespaces.cond_STAR_.cljs$lang$maxFixedArity = (2));

/** @this {Function} */
(sci.impl.namespaces.cond_STAR_.cljs$lang$applyTo = (function (seq23366){
var G__23367 = cljs.core.first(seq23366);
var seq23366__$1 = cljs.core.next(seq23366);
var G__23368 = cljs.core.first(seq23366__$1);
var seq23366__$2 = cljs.core.next(seq23366__$1);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23367,G__23368,seq23366__$2);
}));

sci.impl.namespaces.cond__GT__STAR_ = (function sci$impl$namespaces$cond__GT__STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23380 = arguments.length;
var i__4737__auto___23381 = (0);
while(true){
if((i__4737__auto___23381 < len__4736__auto___23380)){
args__4742__auto__.push((arguments[i__4737__auto___23381]));

var G__23382 = (i__4737__auto___23381 + (1));
i__4737__auto___23381 = G__23382;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.cond__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);
});

(sci.impl.namespaces.cond__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (__AMPERSAND_form,__AMPERSAND_env,expr,clauses){
if(cljs.core.even_QMARK_(cljs.core.count(clauses))){
} else {
throw (new Error("Assert failed: (even? (count clauses))"));
}

var g = cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
var steps = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__23376){
var vec__23377 = p__23376;
var test = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23377,(0),null);
var step = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23377,(1),null);
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$if,null,(1),null)),(new cljs.core.List(null,test,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_,null,(1),null)),(new cljs.core.List(null,g,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,step,null,(1),null))], 0)))),null,(1),null)),(new cljs.core.List(null,g,null,(1),null))], 0))));
}),cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),clauses));
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,g,null,(1),null)),(new cljs.core.List(null,expr,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(g),cljs.core.butlast(steps))], 0))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,((cljs.core.empty_QMARK_(steps))?g:cljs.core.last(steps)),null,(1),null))], 0))));
}));

(sci.impl.namespaces.cond__GT__STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.cond__GT__STAR_.cljs$lang$applyTo = (function (seq23372){
var G__23373 = cljs.core.first(seq23372);
var seq23372__$1 = cljs.core.next(seq23372);
var G__23374 = cljs.core.first(seq23372__$1);
var seq23372__$2 = cljs.core.next(seq23372__$1);
var G__23375 = cljs.core.first(seq23372__$2);
var seq23372__$3 = cljs.core.next(seq23372__$2);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23373,G__23374,G__23375,seq23372__$3);
}));

sci.impl.namespaces.cond__GT__GT__STAR_ = (function sci$impl$namespaces$cond__GT__GT__STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23391 = arguments.length;
var i__4737__auto___23392 = (0);
while(true){
if((i__4737__auto___23392 < len__4736__auto___23391)){
args__4742__auto__.push((arguments[i__4737__auto___23392]));

var G__23393 = (i__4737__auto___23392 + (1));
i__4737__auto___23392 = G__23393;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.cond__GT__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);
});

(sci.impl.namespaces.cond__GT__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (__AMPERSAND_form,__AMPERSAND_env,expr,clauses){
if(cljs.core.even_QMARK_(cljs.core.count(clauses))){
} else {
throw (new Error("Assert failed: (even? (count clauses))"));
}

var g = cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
var steps = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__23387){
var vec__23388 = p__23387;
var test = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23388,(0),null);
var step = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23388,(1),null);
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$if,null,(1),null)),(new cljs.core.List(null,test,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH__DASH__GT__GT_,null,(1),null)),(new cljs.core.List(null,g,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,step,null,(1),null))], 0)))),null,(1),null)),(new cljs.core.List(null,g,null,(1),null))], 0))));
}),cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),clauses));
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,g,null,(1),null)),(new cljs.core.List(null,expr,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(g),cljs.core.butlast(steps))], 0))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,((cljs.core.empty_QMARK_(steps))?g:cljs.core.last(steps)),null,(1),null))], 0))));
}));

(sci.impl.namespaces.cond__GT__GT__STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.cond__GT__GT__STAR_.cljs$lang$applyTo = (function (seq23383){
var G__23384 = cljs.core.first(seq23383);
var seq23383__$1 = cljs.core.next(seq23383);
var G__23385 = cljs.core.first(seq23383__$1);
var seq23383__$2 = cljs.core.next(seq23383__$1);
var G__23386 = cljs.core.first(seq23383__$2);
var seq23383__$3 = cljs.core.next(seq23383__$2);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23384,G__23385,G__23386,seq23383__$3);
}));

sci.impl.namespaces.if_let_STAR_ = (function sci$impl$namespaces$if_let_STAR_(var_args){
var G__23402 = arguments.length;
switch (G__23402) {
case 4:
return sci.impl.namespaces.if_let_STAR_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
var args_arr__4757__auto__ = [];
var len__4736__auto___23404 = arguments.length;
var i__4737__auto___23405 = (0);
while(true){
if((i__4737__auto___23405 < len__4736__auto___23404)){
args_arr__4757__auto__.push((arguments[i__4737__auto___23405]));

var G__23406 = (i__4737__auto___23405 + (1));
i__4737__auto___23405 = G__23406;
continue;
} else {
}
break;
}

var argseq__4758__auto__ = (new cljs.core.IndexedSeq(args_arr__4757__auto__.slice((5)),(0),null));
return sci.impl.namespaces.if_let_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),argseq__4758__auto__);

}
});

(sci.impl.namespaces.if_let_STAR_.cljs$core$IFn$_invoke$arity$4 = (function (_AMPERSAND_form,_AMPERSAND_env,bindings,then){
return sci.impl.namespaces.if_let_STAR_(_AMPERSAND_form,_AMPERSAND_env,bindings,then,null);
}));

(sci.impl.namespaces.if_let_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (__AMPERSAND_form,__AMPERSAND_env,bindings,then,else$,_oldform){
var form = (bindings.cljs$core$IFn$_invoke$arity$1 ? bindings.cljs$core$IFn$_invoke$arity$1((0)) : bindings.call(null,(0)));
var tst = (bindings.cljs$core$IFn$_invoke$arity$1 ? bindings.cljs$core$IFn$_invoke$arity$1((1)) : bindings.call(null,(1)));
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$temp__23394__auto__,null,(1),null)),(new cljs.core.List(null,tst,null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$if,null,(1),null)),(new cljs.core.List(null,cljs.core.cst$sym$temp__23394__auto__,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,form,null,(1),null)),(new cljs.core.List(null,cljs.core.cst$sym$temp__23394__auto__,null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,then,null,(1),null))], 0)))),null,(1),null)),(new cljs.core.List(null,else$,null,(1),null))], 0)))),null,(1),null))], 0))));
}));

/** @this {Function} */
(sci.impl.namespaces.if_let_STAR_.cljs$lang$applyTo = (function (seq23396){
var G__23397 = cljs.core.first(seq23396);
var seq23396__$1 = cljs.core.next(seq23396);
var G__23398 = cljs.core.first(seq23396__$1);
var seq23396__$2 = cljs.core.next(seq23396__$1);
var G__23399 = cljs.core.first(seq23396__$2);
var seq23396__$3 = cljs.core.next(seq23396__$2);
var G__23400 = cljs.core.first(seq23396__$3);
var seq23396__$4 = cljs.core.next(seq23396__$3);
var G__23401 = cljs.core.first(seq23396__$4);
var seq23396__$5 = cljs.core.next(seq23396__$4);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23397,G__23398,G__23399,G__23400,G__23401,seq23396__$5);
}));

(sci.impl.namespaces.if_let_STAR_.cljs$lang$maxFixedArity = (5));

sci.impl.namespaces.if_some_STAR_ = (function sci$impl$namespaces$if_some_STAR_(var_args){
var G__23415 = arguments.length;
switch (G__23415) {
case 4:
return sci.impl.namespaces.if_some_STAR_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
var args_arr__4757__auto__ = [];
var len__4736__auto___23417 = arguments.length;
var i__4737__auto___23418 = (0);
while(true){
if((i__4737__auto___23418 < len__4736__auto___23417)){
args_arr__4757__auto__.push((arguments[i__4737__auto___23418]));

var G__23419 = (i__4737__auto___23418 + (1));
i__4737__auto___23418 = G__23419;
continue;
} else {
}
break;
}

var argseq__4758__auto__ = (new cljs.core.IndexedSeq(args_arr__4757__auto__.slice((5)),(0),null));
return sci.impl.namespaces.if_some_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),argseq__4758__auto__);

}
});

(sci.impl.namespaces.if_some_STAR_.cljs$core$IFn$_invoke$arity$4 = (function (_AMPERSAND_form,_AMPERSAND_env,bindings,then){
return sci.impl.namespaces.if_some_STAR_(_AMPERSAND_form,_AMPERSAND_env,bindings,then,null);
}));

(sci.impl.namespaces.if_some_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (__AMPERSAND_form,__AMPERSAND_env,bindings,then,else$,_oldform){
var form = (bindings.cljs$core$IFn$_invoke$arity$1 ? bindings.cljs$core$IFn$_invoke$arity$1((0)) : bindings.call(null,(0)));
var tst = (bindings.cljs$core$IFn$_invoke$arity$1 ? bindings.cljs$core$IFn$_invoke$arity$1((1)) : bindings.call(null,(1)));
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$temp__23407__auto__,null,(1),null)),(new cljs.core.List(null,tst,null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$if,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_nil_QMARK_,null,(1),null)),(new cljs.core.List(null,cljs.core.cst$sym$temp__23407__auto__,null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,else$,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,form,null,(1),null)),(new cljs.core.List(null,cljs.core.cst$sym$temp__23407__auto__,null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,then,null,(1),null))], 0)))),null,(1),null))], 0)))),null,(1),null))], 0))));
}));

/** @this {Function} */
(sci.impl.namespaces.if_some_STAR_.cljs$lang$applyTo = (function (seq23409){
var G__23410 = cljs.core.first(seq23409);
var seq23409__$1 = cljs.core.next(seq23409);
var G__23411 = cljs.core.first(seq23409__$1);
var seq23409__$2 = cljs.core.next(seq23409__$1);
var G__23412 = cljs.core.first(seq23409__$2);
var seq23409__$3 = cljs.core.next(seq23409__$2);
var G__23413 = cljs.core.first(seq23409__$3);
var seq23409__$4 = cljs.core.next(seq23409__$3);
var G__23414 = cljs.core.first(seq23409__$4);
var seq23409__$5 = cljs.core.next(seq23409__$4);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23410,G__23411,G__23412,G__23413,G__23414,seq23409__$5);
}));

(sci.impl.namespaces.if_some_STAR_.cljs$lang$maxFixedArity = (5));

sci.impl.namespaces.when_let_STAR_ = (function sci$impl$namespaces$when_let_STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23425 = arguments.length;
var i__4737__auto___23426 = (0);
while(true){
if((i__4737__auto___23426 < len__4736__auto___23425)){
args__4742__auto__.push((arguments[i__4737__auto___23426]));

var G__23427 = (i__4737__auto___23426 + (1));
i__4737__auto___23426 = G__23427;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.when_let_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);
});

(sci.impl.namespaces.when_let_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (__AMPERSAND_form,__AMPERSAND_env,bindings,body){
var form = (bindings.cljs$core$IFn$_invoke$arity$1 ? bindings.cljs$core$IFn$_invoke$arity$1((0)) : bindings.call(null,(0)));
var tst = (bindings.cljs$core$IFn$_invoke$arity$1 ? bindings.cljs$core$IFn$_invoke$arity$1((1)) : bindings.call(null,(1)));
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$temp__23420__auto__,null,(1),null)),(new cljs.core.List(null,tst,null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_when,null,(1),null)),(new cljs.core.List(null,cljs.core.cst$sym$temp__23420__auto__,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,form,null,(1),null)),(new cljs.core.List(null,cljs.core.cst$sym$temp__23420__auto__,null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body], 0)))),null,(1),null))], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.when_let_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.when_let_STAR_.cljs$lang$applyTo = (function (seq23421){
var G__23422 = cljs.core.first(seq23421);
var seq23421__$1 = cljs.core.next(seq23421);
var G__23423 = cljs.core.first(seq23421__$1);
var seq23421__$2 = cljs.core.next(seq23421__$1);
var G__23424 = cljs.core.first(seq23421__$2);
var seq23421__$3 = cljs.core.next(seq23421__$2);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23422,G__23423,G__23424,seq23421__$3);
}));

sci.impl.namespaces.when_first_STAR_ = (function sci$impl$namespaces$when_first_STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23436 = arguments.length;
var i__4737__auto___23437 = (0);
while(true){
if((i__4737__auto___23437 < len__4736__auto___23436)){
args__4742__auto__.push((arguments[i__4737__auto___23437]));

var G__23438 = (i__4737__auto___23437 + (1));
i__4737__auto___23437 = G__23438;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.when_first_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);
});

(sci.impl.namespaces.when_first_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,bindings,body){
var vec__23433 = bindings;
var x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23433,(0),null);
var xs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23433,(1),null);
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_when_DASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$xs__23428__auto__,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_seq,null,(1),null)),(new cljs.core.List(null,xs,null,(1),null))))),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,x,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_first,null,(1),null)),(new cljs.core.List(null,cljs.core.cst$sym$xs__23428__auto__,null,(1),null))))),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.when_first_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.when_first_STAR_.cljs$lang$applyTo = (function (seq23429){
var G__23430 = cljs.core.first(seq23429);
var seq23429__$1 = cljs.core.next(seq23429);
var G__23431 = cljs.core.first(seq23429__$1);
var seq23429__$2 = cljs.core.next(seq23429__$1);
var G__23432 = cljs.core.first(seq23429__$2);
var seq23429__$3 = cljs.core.next(seq23429__$2);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23430,G__23431,G__23432,seq23429__$3);
}));

sci.impl.namespaces.when_some_STAR_ = (function sci$impl$namespaces$when_some_STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23444 = arguments.length;
var i__4737__auto___23445 = (0);
while(true){
if((i__4737__auto___23445 < len__4736__auto___23444)){
args__4742__auto__.push((arguments[i__4737__auto___23445]));

var G__23446 = (i__4737__auto___23445 + (1));
i__4737__auto___23445 = G__23446;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.when_some_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);
});

(sci.impl.namespaces.when_some_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,bindings,body){
var form = (bindings.cljs$core$IFn$_invoke$arity$1 ? bindings.cljs$core$IFn$_invoke$arity$1((0)) : bindings.call(null,(0)));
var tst = (bindings.cljs$core$IFn$_invoke$arity$1 ? bindings.cljs$core$IFn$_invoke$arity$1((1)) : bindings.call(null,(1)));
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$temp__23439__auto__,null,(1),null)),(new cljs.core.List(null,tst,null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$if,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_nil_QMARK_,null,(1),null)),(new cljs.core.List(null,cljs.core.cst$sym$temp__23439__auto__,null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,null,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,form,null,(1),null)),(new cljs.core.List(null,cljs.core.cst$sym$temp__23439__auto__,null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body], 0)))),null,(1),null))], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.when_some_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.when_some_STAR_.cljs$lang$applyTo = (function (seq23440){
var G__23441 = cljs.core.first(seq23440);
var seq23440__$1 = cljs.core.next(seq23440);
var G__23442 = cljs.core.first(seq23440__$1);
var seq23440__$2 = cljs.core.next(seq23440__$1);
var G__23443 = cljs.core.first(seq23440__$2);
var seq23440__$3 = cljs.core.next(seq23440__$2);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23441,G__23442,G__23443,seq23440__$3);
}));

sci.impl.namespaces.some__GT__STAR_ = (function sci$impl$namespaces$some__GT__STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23451 = arguments.length;
var i__4737__auto___23452 = (0);
while(true){
if((i__4737__auto___23452 < len__4736__auto___23451)){
args__4742__auto__.push((arguments[i__4737__auto___23452]));

var G__23453 = (i__4737__auto___23452 + (1));
i__4737__auto___23452 = G__23453;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.some__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);
});

(sci.impl.namespaces.some__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (__AMPERSAND_form,__AMPERSAND_env,expr,forms){
var g = cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
var steps = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (step){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$if,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_nil_QMARK_,null,(1),null)),(new cljs.core.List(null,g,null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,null,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_,null,(1),null)),(new cljs.core.List(null,g,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,step,null,(1),null))], 0)))),null,(1),null))], 0))));
}),forms);
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,g,null,(1),null)),(new cljs.core.List(null,expr,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(g),cljs.core.butlast(steps))], 0))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,((cljs.core.empty_QMARK_(steps))?g:cljs.core.last(steps)),null,(1),null))], 0))));
}));

(sci.impl.namespaces.some__GT__STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.some__GT__STAR_.cljs$lang$applyTo = (function (seq23447){
var G__23448 = cljs.core.first(seq23447);
var seq23447__$1 = cljs.core.next(seq23447);
var G__23449 = cljs.core.first(seq23447__$1);
var seq23447__$2 = cljs.core.next(seq23447__$1);
var G__23450 = cljs.core.first(seq23447__$2);
var seq23447__$3 = cljs.core.next(seq23447__$2);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23448,G__23449,G__23450,seq23447__$3);
}));

sci.impl.namespaces.some__GT__GT__STAR_ = (function sci$impl$namespaces$some__GT__GT__STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23458 = arguments.length;
var i__4737__auto___23459 = (0);
while(true){
if((i__4737__auto___23459 < len__4736__auto___23458)){
args__4742__auto__.push((arguments[i__4737__auto___23459]));

var G__23460 = (i__4737__auto___23459 + (1));
i__4737__auto___23459 = G__23460;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.some__GT__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);
});

(sci.impl.namespaces.some__GT__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,expr,forms){
var g = cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
var steps = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (step){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$if,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_nil_QMARK_,null,(1),null)),(new cljs.core.List(null,g,null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,null,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH__DASH__GT__GT_,null,(1),null)),(new cljs.core.List(null,g,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,step,null,(1),null))], 0)))),null,(1),null))], 0))));
}),forms);
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,g,null,(1),null)),(new cljs.core.List(null,expr,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(g),cljs.core.butlast(steps))], 0))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,((cljs.core.empty_QMARK_(steps))?g:cljs.core.last(steps)),null,(1),null))], 0))));
}));

(sci.impl.namespaces.some__GT__GT__STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.some__GT__GT__STAR_.cljs$lang$applyTo = (function (seq23454){
var G__23455 = cljs.core.first(seq23454);
var seq23454__$1 = cljs.core.next(seq23454);
var G__23456 = cljs.core.first(seq23454__$1);
var seq23454__$2 = cljs.core.next(seq23454__$1);
var G__23457 = cljs.core.first(seq23454__$2);
var seq23454__$3 = cljs.core.next(seq23454__$2);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23455,G__23456,G__23457,seq23454__$3);
}));

sci.impl.namespaces.ex_message = (function (){var temp__5718__auto__ = (((typeof cljs !== 'undefined') && (typeof cljs.core !== 'undefined') && (typeof cljs.core.ex_message !== 'undefined'))?(new cljs.core.Var((function (){
return cljs.core.ex_message;
}),cljs.core.with_meta(cljs.core.cst$sym$cljs$core_SLASH_ex_DASH_message,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$cljs$analyzer_SLASH_no_DASH_resolve,true], null)),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$ex_DASH_message,"cljs/core.cljs",17,1,11375,11375,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null)),"Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.",(cljs.core.truth_(cljs.core.ex_message)?cljs.core.ex_message.cljs$lang$test:null)]))):null);
if(cljs.core.truth_(temp__5718__auto__)){
var v = temp__5718__auto__;
return cljs.core.deref(v);
} else {
return (function sci$impl$namespaces$ex_message(ex){
if((ex instanceof Error)){
return ex.message;
} else {
return null;
}
});
}
})();
sci.impl.namespaces.ex_cause = (function (){var temp__5718__auto__ = (((typeof cljs !== 'undefined') && (typeof cljs.core !== 'undefined') && (typeof cljs.core.ex_cause !== 'undefined'))?(new cljs.core.Var((function (){
return cljs.core.ex_cause;
}),cljs.core.with_meta(cljs.core.cst$sym$cljs$core_SLASH_ex_DASH_cause,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$cljs$analyzer_SLASH_no_DASH_resolve,true], null)),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$ex_DASH_cause,"cljs/core.cljs",15,1,11382,11382,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null)),"Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.",(cljs.core.truth_(cljs.core.ex_cause)?cljs.core.ex_cause.cljs$lang$test:null)]))):null);
if(cljs.core.truth_(temp__5718__auto__)){
var v = temp__5718__auto__;
return cljs.core.deref(v);
} else {
return (function sci$impl$namespaces$ex_message(ex){
if((ex instanceof cljs.core.ExceptionInfo)){
return ex.cause;
} else {
return null;
}
});
}
})();
sci.impl.namespaces.assert_STAR_ = (function sci$impl$namespaces$assert_STAR_(var_args){
var G__23462 = arguments.length;
switch (G__23462) {
case 3:
return sci.impl.namespaces.assert_STAR_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return sci.impl.namespaces.assert_STAR_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(sci.impl.namespaces.assert_STAR_.cljs$core$IFn$_invoke$arity$3 = (function (__AMPERSAND_form,_,x){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_when_DASH_not,null,(1),null)),(new cljs.core.List(null,x,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$throw,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$js_SLASH_Error$,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_str,null,(1),null)),(new cljs.core.List(null,"Assert failed: ",null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_str,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$quote,null,(1),null)),(new cljs.core.List(null,x,null,(1),null))))),null,(1),null))))),null,(1),null))], 0)))),null,(1),null))))),null,(1),null))))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.assert_STAR_.cljs$core$IFn$_invoke$arity$4 = (function (__AMPERSAND_form,_,x,message){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_when_DASH_not,null,(1),null)),(new cljs.core.List(null,x,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$throw,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$js_SLASH_Error$,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_str,null,(1),null)),(new cljs.core.List(null,"Assert failed: ",null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,message,null,(1),null)),(new cljs.core.List(null,"\n",null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_str,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$quote,null,(1),null)),(new cljs.core.List(null,x,null,(1),null))))),null,(1),null))))),null,(1),null))], 0)))),null,(1),null))))),null,(1),null))))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.assert_STAR_.cljs$lang$maxFixedArity = 4);

sci.impl.namespaces.with_open_STAR_ = (function sci$impl$namespaces$with_open_STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23468 = arguments.length;
var i__4737__auto___23469 = (0);
while(true){
if((i__4737__auto___23469 < len__4736__auto___23468)){
args__4742__auto__.push((arguments[i__4737__auto___23469]));

var G__23470 = (i__4737__auto___23469 + (1));
i__4737__auto___23469 = G__23470;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.with_open_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);
});

(sci.impl.namespaces.with_open_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,bindings,body){
if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(bindings),(0))){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$do,null,(1),null)),body)));
} else {
if(((bindings.cljs$core$IFn$_invoke$arity$1 ? bindings.cljs$core$IFn$_invoke$arity$1((0)) : bindings.call(null,(0))) instanceof cljs.core.Symbol)){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(bindings,(0),(2)),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$try,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$sci$impl$namespaces_SLASH_with_DASH_open,null,(1),null)),(new cljs.core.List(null,cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(bindings,(2)),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body], 0)))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$finally,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$$close,null,(1),null)),(new cljs.core.List(null,(bindings.cljs$core$IFn$_invoke$arity$1 ? bindings.cljs$core$IFn$_invoke$arity$1((0)) : bindings.call(null,(0))),null,(1),null))))),null,(1),null))))),null,(1),null))], 0)))),null,(1),null))], 0))));
} else {
return cljs.core.cst$kw$sci$impl$namespaces_SLASH_TODO;

}
}
}));

(sci.impl.namespaces.with_open_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.with_open_STAR_.cljs$lang$applyTo = (function (seq23464){
var G__23465 = cljs.core.first(seq23464);
var seq23464__$1 = cljs.core.next(seq23464);
var G__23466 = cljs.core.first(seq23464__$1);
var seq23464__$2 = cljs.core.next(seq23464__$1);
var G__23467 = cljs.core.first(seq23464__$2);
var seq23464__$3 = cljs.core.next(seq23464__$2);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23465,G__23466,G__23467,seq23464__$3);
}));

sci.impl.namespaces.letfn_STAR_ = (function sci$impl$namespaces$letfn_STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23475 = arguments.length;
var i__4737__auto___23476 = (0);
while(true){
if((i__4737__auto___23476 < len__4736__auto___23475)){
args__4742__auto__.push((arguments[i__4737__auto___23476]));

var G__23477 = (i__4737__auto___23476 + (1));
i__4737__auto___23476 = G__23477;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.letfn_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);
});

(sci.impl.namespaces.letfn_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,fnspecs,body){
var syms = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,fnspecs);
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(syms,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(cljs.core.list(cljs.core.cst$sym$clojure$core_SLASH__DASH_new_DASH_var)))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.map.cljs$core$IFn$_invoke$arity$3((function (sym,fn_spec){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_alter_DASH_var_DASH_root,null,(1),null)),(new cljs.core.List(null,sym,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_constantly,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_fn,null,(1),null)),(new cljs.core.List(null,sym,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.rest(fn_spec)], 0)))),null,(1),null))))),null,(1),null))], 0))));
}),syms,fnspecs),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(syms,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (sym){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_var_DASH_get,null,(1),null)),(new cljs.core.List(null,sym,null,(1),null)))));
}),syms))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.letfn_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.letfn_STAR_.cljs$lang$applyTo = (function (seq23471){
var G__23472 = cljs.core.first(seq23471);
var seq23471__$1 = cljs.core.next(seq23471);
var G__23473 = cljs.core.first(seq23471__$1);
var seq23471__$2 = cljs.core.next(seq23471__$1);
var G__23474 = cljs.core.first(seq23471__$2);
var seq23471__$3 = cljs.core.next(seq23471__$2);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23472,G__23473,G__23474,seq23471__$3);
}));

sci.impl.namespaces.with_local_vars_STAR_ = (function sci$impl$namespaces$with_local_vars_STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23482 = arguments.length;
var i__4737__auto___23483 = (0);
while(true){
if((i__4737__auto___23483 < len__4736__auto___23482)){
args__4742__auto__.push((arguments[i__4737__auto___23483]));

var G__23484 = (i__4737__auto___23483 + (1));
i__4737__auto___23483 = G__23484;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.with_local_vars_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);
});

(sci.impl.namespaces.with_local_vars_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (form,_,name_vals_vec,body){
if(cljs.core.vector_QMARK_(name_vals_vec)){
} else {
sci.impl.utils.throw_error_with_location.cljs$core$IFn$_invoke$arity$2("with-local-vars requires a vector for its bindings",form);
}

if(cljs.core.even_QMARK_(cljs.core.count(name_vals_vec))){
} else {
sci.impl.utils.throw_error_with_location.cljs$core$IFn$_invoke$arity$2("with-local-vars requires an even number of forms in binding vector",form);
}

return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$1(cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2((2),name_vals_vec),cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(cljs.core.list(cljs.core.cst$sym$clojure$core_SLASH__DASH_new_DASH_dynamic_DASH_var))))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_push_DASH_thread_DASH_bindings,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_map,null,(1),null)),name_vals_vec))),null,(1),null))))),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$try,null,(1),null)),body,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$finally,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_pop_DASH_thread_DASH_bindings,null,(1),null))))),null,(1),null))))),null,(1),null))], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.with_local_vars_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.with_local_vars_STAR_.cljs$lang$applyTo = (function (seq23478){
var G__23479 = cljs.core.first(seq23478);
var seq23478__$1 = cljs.core.next(seq23478);
var G__23480 = cljs.core.first(seq23478__$1);
var seq23478__$2 = cljs.core.next(seq23478__$1);
var G__23481 = cljs.core.first(seq23478__$2);
var seq23478__$3 = cljs.core.next(seq23478__$2);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23479,G__23480,G__23481,seq23478__$3);
}));

sci.impl.namespaces.vswap_BANG__STAR_ = (function sci$impl$namespaces$vswap_BANG__STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23488 = arguments.length;
var i__4737__auto___23489 = (0);
while(true){
if((i__4737__auto___23489 < len__4736__auto___23488)){
args__4742__auto__.push((arguments[i__4737__auto___23489]));

var G__23490 = (i__4737__auto___23489 + (1));
i__4737__auto___23489 = G__23490;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((2) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((2)),(0),null)):null);
return sci.impl.namespaces.vswap_BANG__STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4743__auto__);
});

(sci.impl.namespaces.vswap_BANG__STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (vol,f,args){
return cljs.core.vreset_BANG_(vol,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,cljs.core.deref(vol),args));
}));

(sci.impl.namespaces.vswap_BANG__STAR_.cljs$lang$maxFixedArity = (2));

/** @this {Function} */
(sci.impl.namespaces.vswap_BANG__STAR_.cljs$lang$applyTo = (function (seq23485){
var G__23486 = cljs.core.first(seq23485);
var seq23485__$1 = cljs.core.next(seq23485);
var G__23487 = cljs.core.first(seq23485__$1);
var seq23485__$2 = cljs.core.next(seq23485__$1);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23486,G__23487,seq23485__$2);
}));

sci.impl.namespaces.delay_STAR_ = (function sci$impl$namespaces$delay_STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23494 = arguments.length;
var i__4737__auto___23495 = (0);
while(true){
if((i__4737__auto___23495 < len__4736__auto___23494)){
args__4742__auto__.push((arguments[i__4737__auto___23495]));

var G__23496 = (i__4737__auto___23495 + (1));
i__4737__auto___23495 = G__23496;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((2) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((2)),(0),null)):null);
return sci.impl.namespaces.delay_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4743__auto__);
});

(sci.impl.namespaces.delay_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,body){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$new,null,(1),null)),(new cljs.core.List(null,cljs.core.cst$sym$cljs$core$Delay,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_fn,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$0()))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.delay_STAR_.cljs$lang$maxFixedArity = (2));

/** @this {Function} */
(sci.impl.namespaces.delay_STAR_.cljs$lang$applyTo = (function (seq23491){
var G__23492 = cljs.core.first(seq23491);
var seq23491__$1 = cljs.core.next(seq23491);
var G__23493 = cljs.core.first(seq23491__$1);
var seq23491__$2 = cljs.core.next(seq23491__$1);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23492,G__23493,seq23491__$2);
}));

sci.impl.namespaces.defn__STAR_ = (function sci$impl$namespaces$defn__STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23501 = arguments.length;
var i__4737__auto___23502 = (0);
while(true){
if((i__4737__auto___23502 < len__4736__auto___23501)){
args__4742__auto__.push((arguments[i__4737__auto___23502]));

var G__23503 = (i__4737__auto___23502 + (1));
i__4737__auto___23502 = G__23503;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.defn__STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);
});

(sci.impl.namespaces.defn__STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,name,decls){
return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(cljs.core.cst$sym$cljs$core_SLASH_defn,cljs.core.with_meta(name,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(name),cljs.core.cst$kw$private,true)),decls);
}));

(sci.impl.namespaces.defn__STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.defn__STAR_.cljs$lang$applyTo = (function (seq23497){
var G__23498 = cljs.core.first(seq23497);
var seq23497__$1 = cljs.core.next(seq23497);
var G__23499 = cljs.core.first(seq23497__$1);
var seq23497__$2 = cljs.core.next(seq23497__$1);
var G__23500 = cljs.core.first(seq23497__$2);
var seq23497__$3 = cljs.core.next(seq23497__$2);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23498,G__23499,G__23500,seq23497__$3);
}));

sci.impl.namespaces.condp_STAR_ = (function sci$impl$namespaces$condp_STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23516 = arguments.length;
var i__4737__auto___23517 = (0);
while(true){
if((i__4737__auto___23517 < len__4736__auto___23516)){
args__4742__auto__.push((arguments[i__4737__auto___23517]));

var G__23518 = (i__4737__auto___23517 + (1));
i__4737__auto___23517 = G__23518;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((4) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((4)),(0),null)):null);
return sci.impl.namespaces.condp_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),argseq__4743__auto__);
});

(sci.impl.namespaces.condp_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,pred,expr,clauses){
var gpred = cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("pred__");
var gexpr = cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("expr__");
var emit = (function sci$impl$namespaces$emit(pred__$1,expr__$1,args){
var vec__23510 = cljs.core.split_at(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$_GT__GT_,cljs.core.second(args)))?(3):(2)),args);
var vec__23513 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23510,(0),null);
var a = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23513,(0),null);
var b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23513,(1),null);
var c = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23513,(2),null);
var clause = vec__23513;
var more = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23510,(1),null);
var n = cljs.core.count(clause);
if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((0),n)){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$throw,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$new,null,(1),null)),(new cljs.core.List(null,cljs.core.cst$sym$js_SLASH_Error,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_str,null,(1),null)),(new cljs.core.List(null,"No matching clause: ",null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,expr__$1,null,(1),null))], 0)))),null,(1),null))], 0)))),null,(1),null)))));
} else {
if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((1),n)){
return a;
} else {
if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((2),n)){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$if,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,pred__$1,null,(1),null)),(new cljs.core.List(null,a,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,expr__$1,null,(1),null))], 0)))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,b,null,(1),null)),(new cljs.core.List(null,sci$impl$namespaces$emit(pred__$1,expr__$1,more),null,(1),null))], 0))));
} else {
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_if_DASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$p__23504__auto__,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,pred__$1,null,(1),null)),(new cljs.core.List(null,a,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,expr__$1,null,(1),null))], 0)))),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,c,null,(1),null)),(new cljs.core.List(null,cljs.core.cst$sym$p__23504__auto__,null,(1),null))))),null,(1),null)),(new cljs.core.List(null,sci$impl$namespaces$emit(pred__$1,expr__$1,more),null,(1),null))], 0))));

}
}
}
});
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,gpred,null,(1),null)),(new cljs.core.List(null,pred,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,gexpr,null,(1),null)),(new cljs.core.List(null,expr,null,(1),null))], 0))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,emit(gpred,gexpr,clauses),null,(1),null))], 0))));
}));

(sci.impl.namespaces.condp_STAR_.cljs$lang$maxFixedArity = (4));

/** @this {Function} */
(sci.impl.namespaces.condp_STAR_.cljs$lang$applyTo = (function (seq23505){
var G__23506 = cljs.core.first(seq23505);
var seq23505__$1 = cljs.core.next(seq23505);
var G__23507 = cljs.core.first(seq23505__$1);
var seq23505__$2 = cljs.core.next(seq23505__$1);
var G__23508 = cljs.core.first(seq23505__$2);
var seq23505__$3 = cljs.core.next(seq23505__$2);
var G__23509 = cljs.core.first(seq23505__$3);
var seq23505__$4 = cljs.core.next(seq23505__$3);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23506,G__23507,G__23508,G__23509,seq23505__$4);
}));

sci.impl.namespaces.defonce_STAR_ = (function sci$impl$namespaces$defonce_STAR_(_,___$1,name,expr){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$v__23519__auto__,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$def,null,(1),null)),(new cljs.core.List(null,name,null,(1),null))))),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_when_DASH_not,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$has_DASH_root_DASH_impl,null,(1),null)),(new cljs.core.List(null,cljs.core.cst$sym$v__23519__auto__,null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$def,null,(1),null)),(new cljs.core.List(null,name,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,expr,null,(1),null))], 0)))),null,(1),null))], 0)))),null,(1),null))], 0))));
});
sci.impl.namespaces.while_STAR_ = (function sci$impl$namespaces$while_STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23524 = arguments.length;
var i__4737__auto___23525 = (0);
while(true){
if((i__4737__auto___23525 < len__4736__auto___23524)){
args__4742__auto__.push((arguments[i__4737__auto___23525]));

var G__23526 = (i__4737__auto___23525 + (1));
i__4737__auto___23525 = G__23526;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.while_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);
});

(sci.impl.namespaces.while_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,test,body){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_loop,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$0()))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_when,null,(1),null)),(new cljs.core.List(null,test,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body,(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,cljs.core.cst$sym$recur,null,(1),null))))),null,(1),null))], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.while_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.while_STAR_.cljs$lang$applyTo = (function (seq23520){
var G__23521 = cljs.core.first(seq23520);
var seq23520__$1 = cljs.core.next(seq23520);
var G__23522 = cljs.core.first(seq23520__$1);
var seq23520__$2 = cljs.core.next(seq23520__$1);
var G__23523 = cljs.core.first(seq23520__$2);
var seq23520__$3 = cljs.core.next(seq23520__$2);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23521,G__23522,G__23523,seq23520__$3);
}));

sci.impl.namespaces.double_dot = (function sci$impl$namespaces$double_dot(var_args){
var G__23533 = arguments.length;
switch (G__23533) {
case 4:
return sci.impl.namespaces.double_dot.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
var args_arr__4757__auto__ = [];
var len__4736__auto___23535 = arguments.length;
var i__4737__auto___23536 = (0);
while(true){
if((i__4737__auto___23536 < len__4736__auto___23535)){
args_arr__4757__auto__.push((arguments[i__4737__auto___23536]));

var G__23537 = (i__4737__auto___23536 + (1));
i__4737__auto___23536 = G__23537;
continue;
} else {
}
break;
}

var argseq__4758__auto__ = (new cljs.core.IndexedSeq(args_arr__4757__auto__.slice((4)),(0),null));
return sci.impl.namespaces.double_dot.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),argseq__4758__auto__);

}
});

(sci.impl.namespaces.double_dot.cljs$core$IFn$_invoke$arity$4 = (function (_,___$1,x,form){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$_DOT_,null,(1),null)),(new cljs.core.List(null,x,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,form,null,(1),null))], 0))));
}));

(sci.impl.namespaces.double_dot.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,x,form,more){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$$$,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$_DOT_,null,(1),null)),(new cljs.core.List(null,x,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,form,null,(1),null))], 0)))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([more], 0))));
}));

/** @this {Function} */
(sci.impl.namespaces.double_dot.cljs$lang$applyTo = (function (seq23528){
var G__23529 = cljs.core.first(seq23528);
var seq23528__$1 = cljs.core.next(seq23528);
var G__23530 = cljs.core.first(seq23528__$1);
var seq23528__$2 = cljs.core.next(seq23528__$1);
var G__23531 = cljs.core.first(seq23528__$2);
var seq23528__$3 = cljs.core.next(seq23528__$2);
var G__23532 = cljs.core.first(seq23528__$3);
var seq23528__$4 = cljs.core.next(seq23528__$3);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23529,G__23530,G__23531,G__23532,seq23528__$4);
}));

(sci.impl.namespaces.double_dot.cljs$lang$maxFixedArity = (4));

sci.impl.namespaces.lazy_cat_STAR_ = (function sci$impl$namespaces$lazy_cat_STAR_(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23542 = arguments.length;
var i__4737__auto___23543 = (0);
while(true){
if((i__4737__auto___23543 < len__4736__auto___23542)){
args__4742__auto__.push((arguments[i__4737__auto___23543]));

var G__23544 = (i__4737__auto___23543 + (1));
i__4737__auto___23543 = G__23544;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((2) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((2)),(0),null)):null);
return sci.impl.namespaces.lazy_cat_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4743__auto__);
});

(sci.impl.namespaces.lazy_cat_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,colls){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_concat,null,(1),null)),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__23538_SHARP_){
return (new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_lazy_DASH_seq,(new cljs.core.List(null,p1__23538_SHARP_,null,(1),null)),(2),null));
}),colls))));
}));

(sci.impl.namespaces.lazy_cat_STAR_.cljs$lang$maxFixedArity = (2));

/** @this {Function} */
(sci.impl.namespaces.lazy_cat_STAR_.cljs$lang$applyTo = (function (seq23539){
var G__23540 = cljs.core.first(seq23539);
var seq23539__$1 = cljs.core.next(seq23539);
var G__23541 = cljs.core.first(seq23539__$1);
var seq23539__$2 = cljs.core.next(seq23539__$1);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23540,G__23541,seq23539__$2);
}));

sci.impl.namespaces.has_root_impl = (function sci$impl$namespaces$has_root_impl(sci_var){
return sci.impl.vars.hasRoot(sci_var);
});
sci.impl.namespaces.sci_ns_name = (function sci$impl$namespaces$sci_ns_name(ns){
return sci.impl.vars.getName(ns);
});
sci.impl.namespaces.sci_alias = (function sci$impl$namespaces$sci_alias(ctx,alias_sym,ns_sym){
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$env.cljs$core$IFn$_invoke$arity$1(ctx),(function (env){
var current_ns = sci.impl.vars.current_ns_name();
return cljs.core.assoc_in(env,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$namespaces,current_ns,cljs.core.cst$kw$aliases,alias_sym], null),ns_sym);
}));

return null;
});
sci.impl.namespaces.sci_find_ns = (function sci$impl$namespaces$sci_find_ns(ctx,ns_sym){
if((ns_sym instanceof cljs.core.Symbol)){
} else {
throw (new Error("Assert failed: (symbol? ns-sym)"));
}

return sci.impl.utils.namespace_object(cljs.core.cst$kw$env.cljs$core$IFn$_invoke$arity$1(ctx),ns_sym,false,null);
});
sci.impl.namespaces.sci_the_ns = (function sci$impl$namespaces$sci_the_ns(ctx,x){
if((x instanceof sci.impl.vars.SciNamespace)){
return x;
} else {
var or__4126__auto__ = sci.impl.namespaces.sci_find_ns(ctx,x);
if(cljs.core.truth_(or__4126__auto__)){
return or__4126__auto__;
} else {
throw (new Error(["No namespace: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)," found"].join('')));
}
}
});
sci.impl.namespaces.sci_ns_aliases = (function sci$impl$namespaces$sci_ns_aliases(ctx,sci_ns){
var sci_ns__$1 = sci.impl.namespaces.sci_the_ns(ctx,sci_ns);
var name = sci.impl.namespaces.sci_ns_name(sci_ns__$1);
var aliases = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.core.cst$kw$env.cljs$core$IFn$_invoke$arity$1(ctx)),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$namespaces,name,cljs.core.cst$kw$aliases], null));
return cljs.core.zipmap(cljs.core.keys(aliases),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (sym){
return sci.impl.vars.__GT_SciNamespace(sym,null);
}),cljs.core.vals(aliases)));
});
sci.impl.namespaces.sci_ns_interns = (function sci$impl$namespaces$sci_ns_interns(ctx,sci_ns){
var sci_ns__$1 = sci.impl.namespaces.sci_the_ns(ctx,sci_ns);
var name = sci.impl.namespaces.sci_ns_name(sci_ns__$1);
var m = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.core.cst$kw$env.cljs$core$IFn$_invoke$arity$1(ctx)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$namespaces,name], null));
var m__$1 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(m,cljs.core.cst$kw$aliases,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.cst$kw$imports,cljs.core.cst$kw$obj], 0));
return m__$1;
});
sci.impl.namespaces.sci_ns_publics = (function sci$impl$namespaces$sci_ns_publics(ctx,sci_ns){
var sci_ns__$1 = sci.impl.namespaces.sci_the_ns(ctx,sci_ns);
var name = sci.impl.namespaces.sci_ns_name(sci_ns__$1);
var m = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.core.cst$kw$env.cljs$core$IFn$_invoke$arity$1(ctx)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$namespaces,name], null));
var m__$1 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(m,cljs.core.cst$kw$aliases,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.cst$kw$imports,cljs.core.cst$kw$obj], 0));
return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.keep.cljs$core$IFn$_invoke$arity$2((function (p__23545){
var vec__23546 = p__23545;
var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23546,(0),null);
var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23546,(1),null);
if(cljs.core.truth_(cljs.core.cst$kw$private.cljs$core$IFn$_invoke$arity$1(cljs.core.meta(v)))){
return null;
} else {
return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,v], null);
}
}),m__$1));
});
sci.impl.namespaces.sci_ns_imports = (function sci$impl$namespaces$sci_ns_imports(ctx,sci_ns){
var sci_ns__$1 = sci.impl.namespaces.sci_the_ns(ctx,sci_ns);
var name = sci.impl.namespaces.sci_ns_name(sci_ns__$1);
var env = cljs.core.deref(cljs.core.cst$kw$env.cljs$core$IFn$_invoke$arity$1(ctx));
var global_imports = cljs.core.cst$kw$imports.cljs$core$IFn$_invoke$arity$1(env);
var namespace_imports = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(env,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$namespaces,name,cljs.core.cst$kw$imports], null));
var class_opts = cljs.core.cst$kw$class_DASH__GT_opts.cljs$core$IFn$_invoke$arity$1(ctx);
var all_aliased = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.keys(global_imports),cljs.core.keys(namespace_imports));
var all_imports = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.vals(global_imports),cljs.core.vals(namespace_imports));
return cljs.core.zipmap(all_aliased,cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$class,(function (p1__23549_SHARP_){
return cljs.core.get.cljs$core$IFn$_invoke$arity$2(class_opts,p1__23549_SHARP_);
})),all_imports));
});
sci.impl.namespaces.sci_ns_refers = (function sci$impl$namespaces$sci_ns_refers(ctx,sci_ns){
var sci_ns__$1 = sci.impl.namespaces.sci_the_ns(ctx,sci_ns);
var name = sci.impl.namespaces.sci_ns_name(sci_ns__$1);
var env = cljs.core.deref(cljs.core.cst$kw$env.cljs$core$IFn$_invoke$arity$1(ctx));
var the_ns = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(env,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$namespaces,name], null));
var the_ns__$1 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(the_ns,cljs.core.cst$kw$aliases,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.cst$kw$imports,cljs.core.cst$kw$obj], 0));
var clojure_core = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(env,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$namespaces,cljs.core.cst$sym$clojure$core], null));
var clojure_core__$1 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(clojure_core,cljs.core.cst$kw$aliases,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.cst$kw$imports,cljs.core.cst$kw$obj], 0));
return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([the_ns__$1,clojure_core__$1], 0));
});
sci.impl.namespaces.sci_ns_map = (function sci$impl$namespaces$sci_ns_map(ctx,sci_ns){
return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([sci.impl.namespaces.sci_ns_interns(ctx,sci_ns),sci.impl.namespaces.sci_ns_refers(ctx,sci_ns),sci.impl.namespaces.sci_ns_imports(ctx,sci_ns)], 0));
});
sci.impl.namespaces.sci_ns_unmap = (function sci$impl$namespaces$sci_ns_unmap(ctx,sci_ns,sym){
if((sym instanceof cljs.core.Symbol)){
} else {
throw (new Error("Assert failed: (symbol? sym)"));
}

cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$env.cljs$core$IFn$_invoke$arity$1(ctx),(function (env){
var sci_ns__$1 = sci.impl.namespaces.sci_the_ns(ctx,sci_ns);
var name = sci.impl.namespaces.sci_ns_name(sci_ns__$1);
return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(env,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$namespaces,name], null),(function (the_ns_map){
if(cljs.core.contains_QMARK_(the_ns_map,sym)){
return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(the_ns_map,sym);
} else {
if(((cljs.core.contains_QMARK_(cljs.core.cst$kw$imports.cljs$core$IFn$_invoke$arity$1(env),sym)) || (cljs.core.contains_QMARK_(cljs.core.cst$kw$imports.cljs$core$IFn$_invoke$arity$1(the_ns_map),sym)))){
return cljs.core.update.cljs$core$IFn$_invoke$arity$5(the_ns_map,cljs.core.cst$kw$imports,cljs.core.assoc,sym,null);
} else {
return the_ns_map;

}
}
}));
}));

return null;
});
sci.impl.namespaces.sci_all_ns = (function sci$impl$namespaces$sci_all_ns(ctx){
var env = cljs.core.cst$kw$env.cljs$core$IFn$_invoke$arity$1(ctx);
return cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__23550_SHARP_){
return sci.impl.utils.namespace_object(env,p1__23550_SHARP_,true,null);
}),cljs.core.keys(cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(env),cljs.core.cst$kw$namespaces)));
});
sci.impl.namespaces.sci_remove_ns = (function sci$impl$namespaces$sci_remove_ns(ctx,sym){
var env = cljs.core.cst$kw$env.cljs$core$IFn$_invoke$arity$1(ctx);
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(env,cljs.core.update,cljs.core.cst$kw$namespaces,cljs.core.dissoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([sym], 0));

return null;
});
sci.impl.namespaces.sci_intern = (function sci$impl$namespaces$sci_intern(var_args){
var G__23552 = arguments.length;
switch (G__23552) {
case 3:
return sci.impl.namespaces.sci_intern.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return sci.impl.namespaces.sci_intern.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(sci.impl.namespaces.sci_intern.cljs$core$IFn$_invoke$arity$3 = (function (ctx,ns,var_sym){
var ns__$1 = sci.impl.namespaces.sci_the_ns(ctx,ns);
var ns_name = sci.impl.namespaces.sci_ns_name(ns__$1);
var env = cljs.core.cst$kw$env.cljs$core$IFn$_invoke$arity$1(ctx);
var or__4126__auto__ = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(env),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$namespaces,ns_name,var_sym], null));
if(cljs.core.truth_(or__4126__auto__)){
return or__4126__auto__;
} else {
var var_name = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name),cljs.core.str.cljs$core$IFn$_invoke$arity$1(var_sym));
var new_var = sci.impl.vars.__GT_SciVar(null,var_name,cljs.core.meta(var_sym),false);
new_var.sci$impl$vars$IVar$unbind$arity$1(null);

cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(env,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$namespaces,ns_name,var_sym], null),new_var);

return new_var;
}
}));

(sci.impl.namespaces.sci_intern.cljs$core$IFn$_invoke$arity$4 = (function (ctx,ns,var_sym,val){
var ns__$1 = sci.impl.namespaces.sci_the_ns(ctx,ns);
var ns_name = sci.impl.namespaces.sci_ns_name(ns__$1);
var env = cljs.core.cst$kw$env.cljs$core$IFn$_invoke$arity$1(ctx);
var or__4126__auto__ = (function (){var temp__5720__auto__ = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(env),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$namespaces,ns_name,var_sym], null));
if(cljs.core.truth_(temp__5720__auto__)){
var v = temp__5720__auto__;
sci.impl.vars.bindRoot(v,val);

return v;
} else {
return null;
}
})();
if(cljs.core.truth_(or__4126__auto__)){
return or__4126__auto__;
} else {
var var_name = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name),cljs.core.str.cljs$core$IFn$_invoke$arity$1(var_sym));
var new_var = sci.impl.vars.__GT_SciVar(val,var_name,cljs.core.meta(var_sym),false);
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(env,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$namespaces,ns_name,var_sym], null),new_var);

return new_var;
}
}));

(sci.impl.namespaces.sci_intern.cljs$lang$maxFixedArity = 4);

sci.impl.namespaces.sci_bound_QMARK_ = (function sci$impl$namespaces$sci_bound_QMARK_(sci_var){
var or__4126__auto__ = sci.impl.vars.hasRoot(sci_var);
if(cljs.core.truth_(or__4126__auto__)){
return or__4126__auto__;
} else {
return (((!((sci.impl.vars.get_thread_binding(sci_var) == null)))) || (false));
}
});
sci.impl.namespaces.require = (function sci$impl$namespaces$require(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23556 = arguments.length;
var i__4737__auto___23557 = (0);
while(true){
if((i__4737__auto___23557 < len__4736__auto___23556)){
args__4742__auto__.push((arguments[i__4737__auto___23557]));

var G__23558 = (i__4737__auto___23557 + (1));
i__4737__auto___23557 = G__23558;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);
return sci.impl.namespaces.require.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);
});

(sci.impl.namespaces.require.cljs$core$IFn$_invoke$arity$variadic = (function (sci_ctx,args){
return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(sci.impl.utils.eval_require_state),sci_ctx,args);
}));

(sci.impl.namespaces.require.cljs$lang$maxFixedArity = (1));

/** @this {Function} */
(sci.impl.namespaces.require.cljs$lang$applyTo = (function (seq23554){
var G__23555 = cljs.core.first(seq23554);
var seq23554__$1 = cljs.core.next(seq23554);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23555,seq23554__$1);
}));

sci.impl.namespaces.use = (function sci$impl$namespaces$use(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23561 = arguments.length;
var i__4737__auto___23562 = (0);
while(true){
if((i__4737__auto___23562 < len__4736__auto___23561)){
args__4742__auto__.push((arguments[i__4737__auto___23562]));

var G__23563 = (i__4737__auto___23562 + (1));
i__4737__auto___23562 = G__23563;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);
return sci.impl.namespaces.use.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);
});

(sci.impl.namespaces.use.cljs$core$IFn$_invoke$arity$variadic = (function (sci_ctx,args){
return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(sci.impl.utils.eval_use_state),sci_ctx,args);
}));

(sci.impl.namespaces.use.cljs$lang$maxFixedArity = (1));

/** @this {Function} */
(sci.impl.namespaces.use.cljs$lang$applyTo = (function (seq23559){
var G__23560 = cljs.core.first(seq23559);
var seq23559__$1 = cljs.core.next(seq23559);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23560,seq23559__$1);
}));

sci.impl.namespaces.sci_resolve = (function sci$impl$namespaces$sci_resolve(var_args){
var G__23565 = arguments.length;
switch (G__23565) {
case 2:
return sci.impl.namespaces.sci_resolve.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return sci.impl.namespaces.sci_resolve.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(sci.impl.namespaces.sci_resolve.cljs$core$IFn$_invoke$arity$2 = (function (sci_ctx,sym){
var fexpr__23566 = cljs.core.deref(sci.impl.utils.eval_resolve_state);
return (fexpr__23566.cljs$core$IFn$_invoke$arity$2 ? fexpr__23566.cljs$core$IFn$_invoke$arity$2(sci_ctx,sym) : fexpr__23566.call(null,sci_ctx,sym));
}));

(sci.impl.namespaces.sci_resolve.cljs$core$IFn$_invoke$arity$3 = (function (sci_ctx,env,sym){
var fexpr__23567 = cljs.core.deref(sci.impl.utils.eval_resolve_state);
return (fexpr__23567.cljs$core$IFn$_invoke$arity$3 ? fexpr__23567.cljs$core$IFn$_invoke$arity$3(sci_ctx,env,sym) : fexpr__23567.call(null,sci_ctx,env,sym));
}));

(sci.impl.namespaces.sci_resolve.cljs$lang$maxFixedArity = 3);

sci.impl.namespaces.sci_refer = (function sci$impl$namespaces$sci_refer(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23571 = arguments.length;
var i__4737__auto___23572 = (0);
while(true){
if((i__4737__auto___23572 < len__4736__auto___23571)){
args__4742__auto__.push((arguments[i__4737__auto___23572]));

var G__23573 = (i__4737__auto___23572 + (1));
i__4737__auto___23572 = G__23573;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);
return sci.impl.namespaces.sci_refer.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);
});

(sci.impl.namespaces.sci_refer.cljs$core$IFn$_invoke$arity$variadic = (function (sci_ctx,args){
return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(sci.impl.utils.eval_refer_state),sci_ctx,args);
}));

(sci.impl.namespaces.sci_refer.cljs$lang$maxFixedArity = (1));

/** @this {Function} */
(sci.impl.namespaces.sci_refer.cljs$lang$applyTo = (function (seq23569){
var G__23570 = cljs.core.first(seq23569);
var seq23569__$1 = cljs.core.next(seq23569);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23570,seq23569__$1);
}));

sci.impl.namespaces.sci_ns_resolve = (function sci$impl$namespaces$sci_ns_resolve(var_args){
var G__23575 = arguments.length;
switch (G__23575) {
case 3:
return sci.impl.namespaces.sci_ns_resolve.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return sci.impl.namespaces.sci_ns_resolve.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(sci.impl.namespaces.sci_ns_resolve.cljs$core$IFn$_invoke$arity$3 = (function (sci_ctx,ns,sym){
sci.impl.vars.push_thread_bindings(cljs.core.PersistentArrayMap.createAsIfByAssoc([sci.impl.vars.current_ns,sci.impl.namespaces.sci_the_ns(sci_ctx,ns)]));

try{return sci.impl.namespaces.sci_resolve.cljs$core$IFn$_invoke$arity$2(sci_ctx,sym);
}finally {sci.impl.vars.pop_thread_bindings();
}}));

(sci.impl.namespaces.sci_ns_resolve.cljs$core$IFn$_invoke$arity$4 = (function (sci_ctx,ns,env,sym){
sci.impl.vars.push_thread_bindings(cljs.core.PersistentArrayMap.createAsIfByAssoc([sci.impl.vars.current_ns,sci.impl.namespaces.sci_the_ns(sci_ctx,ns)]));

try{return sci.impl.namespaces.sci_resolve.cljs$core$IFn$_invoke$arity$3(sci_ctx,env,sym);
}finally {sci.impl.vars.pop_thread_bindings();
}}));

(sci.impl.namespaces.sci_ns_resolve.cljs$lang$maxFixedArity = 4);

sci.impl.namespaces.sci_requiring_resolve = (function sci$impl$namespaces$sci_requiring_resolve(sci_ctx,sym){
if(cljs.core.qualified_symbol_QMARK_(sym)){
var or__4126__auto__ = sci.impl.namespaces.sci_resolve.cljs$core$IFn$_invoke$arity$2(sci_ctx,sym);
if(cljs.core.truth_(or__4126__auto__)){
return or__4126__auto__;
} else {
var namespace = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace(sym));
sci.impl.namespaces.require.cljs$core$IFn$_invoke$arity$variadic(sci_ctx,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([namespace], 0));

return sci.impl.namespaces.sci_resolve.cljs$core$IFn$_invoke$arity$2(sci_ctx,sym);
}
} else {
throw (new Error(["Not a qualified symbol: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join('')));
}
});
sci.impl.namespaces.sci_find_var = (function sci$impl$namespaces$sci_find_var(sci_ctx,sym){
if(cljs.core.qualified_symbol_QMARK_(sym)){
var nsname = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace(sym));
var sym_SINGLEQUOTE_ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.name(sym));
var temp__5718__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$namespaces.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(cljs.core.cst$kw$env.cljs$core$IFn$_invoke$arity$1(sci_ctx))),nsname);
if(cljs.core.truth_(temp__5718__auto__)){
var namespace = temp__5718__auto__;
return cljs.core.get.cljs$core$IFn$_invoke$arity$2(namespace,sym_SINGLEQUOTE_);
} else {
throw (new Error(["No such namespace: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(nsname)].join('')));
}
} else {
throw (new Error(["Not a qualified symbol: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join('')));
}
});
sci.impl.namespaces.sci_with_bindings = (function sci$impl$namespaces$sci_with_bindings(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23581 = arguments.length;
var i__4737__auto___23582 = (0);
while(true){
if((i__4737__auto___23582 < len__4736__auto___23581)){
args__4742__auto__.push((arguments[i__4737__auto___23582]));

var G__23583 = (i__4737__auto___23582 + (1));
i__4737__auto___23582 = G__23583;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.sci_with_bindings.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);
});

(sci.impl.namespaces.sci_with_bindings.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,bindings,body){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$do,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_push_DASH_thread_DASH_bindings,null,(1),null)),(new cljs.core.List(null,bindings,null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$try,null,(1),null)),body,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$finally,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_pop_DASH_thread_DASH_bindings,null,(1),null))))),null,(1),null))))),null,(1),null))], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.sci_with_bindings.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.sci_with_bindings.cljs$lang$applyTo = (function (seq23577){
var G__23578 = cljs.core.first(seq23577);
var seq23577__$1 = cljs.core.next(seq23577);
var G__23579 = cljs.core.first(seq23577__$1);
var seq23577__$2 = cljs.core.next(seq23577__$1);
var G__23580 = cljs.core.first(seq23577__$2);
var seq23577__$3 = cljs.core.next(seq23577__$2);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23578,G__23579,G__23580,seq23577__$3);
}));

sci.impl.namespaces.sci_binding = (function sci$impl$namespaces$sci_binding(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23588 = arguments.length;
var i__4737__auto___23589 = (0);
while(true){
if((i__4737__auto___23589 < len__4736__auto___23588)){
args__4742__auto__.push((arguments[i__4737__auto___23589]));

var G__23590 = (i__4737__auto___23589 + (1));
i__4737__auto___23589 = G__23590;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.sci_binding.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);
});

(sci.impl.namespaces.sci_binding.cljs$core$IFn$_invoke$arity$variadic = (function (form,_,bindings,body){
if(cljs.core.vector_QMARK_(bindings)){
} else {
sci.impl.utils.throw_error_with_location.cljs$core$IFn$_invoke$arity$2("binding requires a vector for its bindings",form);
}

if(cljs.core.even_QMARK_(cljs.core.count(bindings))){
} else {
sci.impl.utils.throw_error_with_location.cljs$core$IFn$_invoke$arity$2("binding requires an even number of forms in binding vector",form);
}

var var_ize = (function (var_vals){
var ret = cljs.core.PersistentVector.EMPTY;
var vvs = cljs.core.seq(var_vals);
while(true){
if(vvs){
var G__23591 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$var,null,(1),null)),(new cljs.core.List(null,cljs.core.first(vvs),null,(1),null)))))),cljs.core.second(vvs));
var G__23592 = cljs.core.next(cljs.core.next(vvs));
ret = G__23591;
vvs = G__23592;
continue;
} else {
return cljs.core.seq(ret);
}
break;
}
});
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$0()))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_push_DASH_thread_DASH_bindings,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_map,null,(1),null)),var_ize(bindings)))),null,(1),null))))),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$try,null,(1),null)),body,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$finally,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_pop_DASH_thread_DASH_bindings,null,(1),null))))),null,(1),null))))),null,(1),null))], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.sci_binding.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.sci_binding.cljs$lang$applyTo = (function (seq23584){
var G__23585 = cljs.core.first(seq23584);
var seq23584__$1 = cljs.core.next(seq23584);
var G__23586 = cljs.core.first(seq23584__$1);
var seq23584__$2 = cljs.core.next(seq23584__$1);
var G__23587 = cljs.core.first(seq23584__$2);
var seq23584__$3 = cljs.core.next(seq23584__$2);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23585,G__23586,G__23587,seq23584__$3);
}));

sci.impl.namespaces.sci_with_redefs_fn = (function sci$impl$namespaces$sci_with_redefs_fn(binding_map,func){
var root_bind = (function (m){
var seq__23594 = cljs.core.seq(m);
var chunk__23595 = null;
var count__23596 = (0);
var i__23597 = (0);
while(true){
if((i__23597 < count__23596)){
var vec__23604 = chunk__23595.cljs$core$IIndexed$_nth$arity$2(null,i__23597);
var a_var = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23604,(0),null);
var a_val = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23604,(1),null);
sci.impl.vars.bindRoot(a_var,a_val);


var G__23610 = seq__23594;
var G__23611 = chunk__23595;
var G__23612 = count__23596;
var G__23613 = (i__23597 + (1));
seq__23594 = G__23610;
chunk__23595 = G__23611;
count__23596 = G__23612;
i__23597 = G__23613;
continue;
} else {
var temp__5720__auto__ = cljs.core.seq(seq__23594);
if(temp__5720__auto__){
var seq__23594__$1 = temp__5720__auto__;
if(cljs.core.chunked_seq_QMARK_(seq__23594__$1)){
var c__4556__auto__ = cljs.core.chunk_first(seq__23594__$1);
var G__23614 = cljs.core.chunk_rest(seq__23594__$1);
var G__23615 = c__4556__auto__;
var G__23616 = cljs.core.count(c__4556__auto__);
var G__23617 = (0);
seq__23594 = G__23614;
chunk__23595 = G__23615;
count__23596 = G__23616;
i__23597 = G__23617;
continue;
} else {
var vec__23607 = cljs.core.first(seq__23594__$1);
var a_var = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23607,(0),null);
var a_val = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23607,(1),null);
sci.impl.vars.bindRoot(a_var,a_val);


var G__23618 = cljs.core.next(seq__23594__$1);
var G__23619 = null;
var G__23620 = (0);
var G__23621 = (0);
seq__23594 = G__23618;
chunk__23595 = G__23619;
count__23596 = G__23620;
i__23597 = G__23621;
continue;
}
} else {
return null;
}
}
break;
}
});
var old_vals = cljs.core.zipmap(cljs.core.keys(binding_map),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__23593_SHARP_){
return sci.impl.vars.getRawRoot(p1__23593_SHARP_);
}),cljs.core.keys(binding_map)));
try{root_bind(binding_map);

return (func.cljs$core$IFn$_invoke$arity$0 ? func.cljs$core$IFn$_invoke$arity$0() : func.call(null));
}finally {root_bind(old_vals);
}});
sci.impl.namespaces.sci_with_redefs = (function sci$impl$namespaces$sci_with_redefs(var_args){
var args__4742__auto__ = [];
var len__4736__auto___23627 = arguments.length;
var i__4737__auto___23628 = (0);
while(true){
if((i__4737__auto___23628 < len__4736__auto___23627)){
args__4742__auto__.push((arguments[i__4737__auto___23628]));

var G__23629 = (i__4737__auto___23628 + (1));
i__4737__auto___23628 = G__23629;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.sci_with_redefs.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);
});

(sci.impl.namespaces.sci_with_redefs.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,bindings,body){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_with_DASH_redefs_DASH_fn,null,(1),null)),(new cljs.core.List(null,cljs.core.zipmap(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__23622_SHARP_){
return (new cljs.core.List(null,cljs.core.cst$sym$var,(new cljs.core.List(null,p1__23622_SHARP_,null,(1),null)),(2),null));
}),cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2((2),bindings)),cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2((2),cljs.core.next(bindings))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_fn,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$0()))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.sci_with_redefs.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.sci_with_redefs.cljs$lang$applyTo = (function (seq23623){
var G__23624 = cljs.core.first(seq23623);
var seq23623__$1 = cljs.core.next(seq23623);
var G__23625 = cljs.core.first(seq23623__$1);
var seq23623__$2 = cljs.core.next(seq23623__$1);
var G__23626 = cljs.core.first(seq23623__$2);
var seq23623__$3 = cljs.core.next(seq23623__$2);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23624,G__23625,G__23626,seq23623__$3);
}));

/**
 * Returns a Symbol with the given namespace and name. Arity-1 works
 *   on strings, keywords, and vars.
 */
sci.impl.namespaces.symbol_STAR_ = (function sci$impl$namespaces$symbol_STAR_(var_args){
var G__23631 = arguments.length;
switch (G__23631) {
case 1:
return sci.impl.namespaces.symbol_STAR_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return sci.impl.namespaces.symbol_STAR_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(sci.impl.namespaces.symbol_STAR_.cljs$core$IFn$_invoke$arity$1 = (function (name){
if(sci.impl.vars.var_QMARK_(name)){
var m = cljs.core.meta(name);
var ns = cljs.core.cst$kw$ns.cljs$core$IFn$_invoke$arity$1(m);
var nm = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m);
if(cljs.core.truth_((function (){var and__4115__auto__ = ns;
if(cljs.core.truth_(and__4115__auto__)){
return nm;
} else {
return and__4115__auto__;
}
})())){
return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(sci.impl.namespaces.sci_ns_name(ns)),cljs.core.name(nm));
} else {
return null;
}
} else {
return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(name);
}
}));

(sci.impl.namespaces.symbol_STAR_.cljs$core$IFn$_invoke$arity$2 = (function (ns,name){
return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(ns,name);
}));

(sci.impl.namespaces.symbol_STAR_.cljs$lang$maxFixedArity = 2);

sci.impl.namespaces.macroexpand_STAR_ = (function sci$impl$namespaces$macroexpand_STAR_(ctx,expr){
var fexpr__23633 = cljs.core.deref(sci.impl.utils.macroexpand_STAR_);
return (fexpr__23633.cljs$core$IFn$_invoke$arity$2 ? fexpr__23633.cljs$core$IFn$_invoke$arity$2(ctx,expr) : fexpr__23633.call(null,ctx,expr));
});
sci.impl.namespaces.macroexpand_1_STAR_ = (function sci$impl$namespaces$macroexpand_1_STAR_(ctx,expr){
var fexpr__23634 = cljs.core.deref(sci.impl.utils.macroexpand_1_STAR_);
return (fexpr__23634.cljs$core$IFn$_invoke$arity$2 ? fexpr__23634.cljs$core$IFn$_invoke$arity$2(ctx,expr) : fexpr__23634.call(null,ctx,expr));
});
sci.impl.namespaces._STAR_1 = sci.impl.vars.__GT_SciVar(null,cljs.core.cst$sym$_STAR_1,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns,sci.impl.namespaces.clojure_core_ns,cljs.core.cst$kw$dynamic,true], null),false);
sci.impl.namespaces._STAR_2 = sci.impl.vars.__GT_SciVar(null,cljs.core.cst$sym$_STAR_2,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns,sci.impl.namespaces.clojure_core_ns,cljs.core.cst$kw$dynamic,true], null),false);
sci.impl.namespaces._STAR_3 = sci.impl.vars.__GT_SciVar(null,cljs.core.cst$sym$_STAR_3,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns,sci.impl.namespaces.clojure_core_ns,cljs.core.cst$kw$dynamic,true], null),false);
sci.impl.namespaces._STAR_e = sci.impl.vars.__GT_SciVar(null,cljs.core.cst$sym$_STAR_e,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns,sci.impl.namespaces.clojure_core_ns,cljs.core.cst$kw$dynamic,true], null),false);
sci.impl.namespaces.clojure_core = cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$sym$unchecked_DASH_char,cljs.core.cst$sym$sorted_DASH_set,cljs.core.cst$sym$true_QMARK_,cljs.core.cst$sym$unchecked_DASH_byte,cljs.core.cst$sym$_STAR_2,cljs.core.cst$sym$doto,cljs.core.cst$sym$reduce_DASH_kv,cljs.core.cst$sym$defmethod,cljs.core.cst$sym$update_DASH_in,cljs.core.cst$sym$prefer_DASH_method,cljs.core.cst$sym$derive,cljs.core.cst$sym$nfirst,cljs.core.cst$sym$sort_DASH_by,cljs.core.cst$sym$keys,cljs.core.cst$sym$ancestors,cljs.core.cst$sym$first,cljs.core.cst$sym$butlast,cljs.core.cst$sym$with_DASH_out_DASH_str,cljs.core.cst$sym$partition_DASH_by,cljs.core.cst$sym$uri_QMARK_,cljs.core.cst$sym$map_DASH_entry_QMARK_,cljs.core.cst$sym$simple_DASH_keyword_QMARK_,cljs.core.cst$sym$into_DASH_array,cljs.core.cst$sym$ns_DASH_refers,cljs.core.cst$sym$rest,cljs.core.cst$sym$seq,cljs.core.cst$sym$unchecked_DASH_inc_DASH_int,cljs.core.cst$sym$odd_QMARK_,cljs.core.cst$sym$partition,cljs.core.cst$sym$_GT__EQ_,cljs.core.cst$sym$fnext,cljs.core.cst$sym$when_DASH_first,cljs.core.cst$sym$bit_DASH_or,cljs.core.cst$sym$disj,cljs.core.cst$sym$with_DASH_redefs_DASH_fn,cljs.core.cst$sym$_DASH_new_DASH_var,cljs.core.cst$sym$unchecked_DASH_short,cljs.core.cst$sym$ffirst,cljs.core.cst$sym$condp,cljs.core.cst$sym$munge,cljs.core.cst$sym$_STAR_file_STAR_,cljs.core.cst$sym$unchecked_DASH_negate_DASH_int,cljs.core.cst$sym$print_DASH_str,cljs.core.cst$sym$vreset_BANG_,cljs.core.cst$sym$uuid_QMARK_,cljs.core.cst$sym$reset_BANG_,cljs.core.cst$sym$atom,cljs.core.cst$sym$select_DASH_keys,cljs.core.cst$sym$reverse,cljs.core.cst$sym$ex_DASH_message,cljs.core.cst$sym$special_DASH_symbol_QMARK_,cljs.core.cst$sym$merge,cljs.core.cst$sym$newline,cljs.core.cst$sym$unchecked_DASH_multiply,cljs.core.cst$sym$$$,cljs.core.cst$sym$chunked_DASH_seq_QMARK_,cljs.core.cst$sym$inst_QMARK_,cljs.core.cst$sym$random_DASH_sample,cljs.core.cst$sym$_GT_,cljs.core.cst$sym$count,cljs.core.cst$sym$simple_DASH_ident_QMARK_,cljs.core.cst$sym$ns_DASH_name,cljs.core.cst$sym$_STAR_1,cljs.core.cst$sym$last,cljs.core.cst$sym$bit_DASH_shift_DASH_left,cljs.core.cst$sym$int,cljs.core.cst$sym$unchecked_DASH_negate,cljs.core.cst$sym$multi_DASH_fn_DASH_impl,cljs.core.cst$sym$unchecked_DASH_remainder_DASH_int,cljs.core.cst$sym$byte,cljs.core.cst$sym$conj_BANG_,cljs.core.cst$sym$println,cljs.core.cst$sym$defprotocol,cljs.core.cst$sym$int_QMARK_,cljs.core.cst$sym$long_DASH_array,cljs.core.cst$sym$find,cljs.core.cst$sym$vals,cljs.core.cst$sym$nil_QMARK_,cljs.core.cst$sym$flush,cljs.core.cst$sym$hash,cljs.core.cst$sym$pr,cljs.core.cst$sym$unchecked_DASH_subtract,cljs.core.cst$sym$comment,cljs.core.cst$sym$with_DASH_redefs,cljs.core.cst$sym$float_QMARK_,cljs.core.cst$sym$second,cljs.core.cst$sym$extend_DASH_protocol,cljs.core.cst$sym$_STAR_err_STAR_,cljs.core.cst$sym$chunk_DASH_first,cljs.core.cst$sym$alias,cljs.core.cst$sym$unchecked_DASH_add_DASH_int,cljs.core.cst$sym$ifn_QMARK_,cljs.core.cst$sym$ex_DASH_info,cljs.core.cst$sym$inc,cljs.core.cst$sym$_SLASH_,cljs.core.cst$sym$volatile_BANG_,cljs.core.cst$sym$with_DASH_meta,cljs.core.cst$sym$map_QMARK_,cljs.core.cst$sym$vector_QMARK_,cljs.core.cst$sym$_DASH__GT__GT_,cljs.core.cst$sym$quot,cljs.core.cst$sym$any_QMARK_,cljs.core.cst$sym$unchecked_DASH_add,cljs.core.cst$sym$floats,cljs.core.cst$sym$drop_DASH_while,cljs.core.cst$sym$bounded_DASH_count,cljs.core.cst$sym$take_DASH_while,cljs.core.cst$sym$extends_QMARK_,cljs.core.cst$sym$sort,cljs.core.cst$sym$false_QMARK_,cljs.core.cst$sym$cat,cljs.core.cst$sym$extend_DASH_type,cljs.core.cst$sym$_STAR_print_DASH_level_STAR_,cljs.core.cst$sym$replace,cljs.core.cst$sym$drop,cljs.core.cst$sym$push_DASH_thread_DASH_bindings,cljs.core.cst$sym$not,cljs.core.cst$sym$keep,cljs.core.cst$sym$cons,cljs.core.cst$sym$_STAR_e,cljs.core.cst$sym$bit_DASH_shift_DASH_right,cljs.core.cst$sym$associative_QMARK_,cljs.core.cst$sym$read,cljs.core.cst$sym$unquote,cljs.core.cst$sym$macroexpand,cljs.core.cst$sym$_STAR_print_DASH_length_STAR_,cljs.core.cst$sym$if_DASH_not,cljs.core.cst$sym$chunk_DASH_next,cljs.core.cst$sym$var_DASH_set,cljs.core.cst$sym$bit_DASH_flip,cljs.core.cst$sym$aset,cljs.core.cst$sym$_DASH_deref,cljs.core.cst$sym$_STAR_ns_STAR_,cljs.core.cst$sym$some_DASH_fn,cljs.core.cst$sym$var_QMARK_,cljs.core.cst$sym$_STAR_print_DASH_meta_STAR_,cljs.core.cst$sym$when_DASH_not,cljs.core.cst$sym$unchecked_DASH_multiply_DASH_int,cljs.core.cst$sym$identity,cljs.core.cst$sym$_DASH_reset_BANG_,cljs.core.cst$sym$to_DASH_array,cljs.core.cst$sym$double_DASH_array,cljs.core.cst$sym$sorted_DASH_map,cljs.core.cst$sym$_DASH_reified_DASH_methods,cljs.core.cst$sym$concat,cljs.core.cst$sym$char,cljs.core.cst$sym$ident_QMARK_,cljs.core.cst$sym$make_DASH_array,cljs.core.cst$sym$chunk_DASH_buffer,cljs.core.cst$sym$peek,cljs.core.cst$sym$hash_DASH_unordered_DASH_coll,cljs.core.cst$sym$when,cljs.core.cst$sym$clj_DASH__GT_js,cljs.core.cst$sym$sequence,cljs.core.cst$sym$group_DASH_by,cljs.core.cst$sym$re_DASH_seq,cljs.core.cst$sym$_DASH_swap_BANG_,cljs.core.cst$sym$when_DASH_some,cljs.core.cst$sym$unchecked_DASH_subtract_DASH_int,cljs.core.cst$sym$_LT__EQ_,cljs.core.cst$sym$prefers,cljs.core.cst$sym$vary_DASH_meta,cljs.core.cst$sym$_EQ_,cljs.core.cst$sym$intern,cljs.core.cst$sym$keep_DASH_indexed,cljs.core.cst$sym$js_DASH_obj,cljs.core.cst$sym$every_QMARK_,cljs.core.cst$sym$comp,cljs.core.cst$sym$bit_DASH_set,cljs.core.cst$sym$dissoc,cljs.core.cst$sym$min,cljs.core.cst$sym$char_QMARK_,cljs.core.cst$sym$with_DASH_open,cljs.core.cst$sym$interleave,cljs.core.cst$sym$with_DASH_local_DASH_vars,cljs.core.cst$sym$bound_QMARK_,cljs.core.cst$sym$all_DASH_ns,cljs.core.cst$sym$split_DASH_at,cljs.core.cst$sym$neg_DASH_int_QMARK_,cljs.core.cst$sym$mapv,cljs.core.cst$sym$defonce,cljs.core.cst$sym$prn,cljs.core.cst$sym$drop_DASH_last,cljs.core.cst$sym$fnil,cljs.core.cst$sym$cond_DASH__GT__GT_,cljs.core.cst$sym$pop_DASH_thread_DASH_bindings,cljs.core.cst$sym$satisfies_QMARK_,cljs.core.cst$sym$next,cljs.core.cst$sym$_PLUS_,cljs.core.cst$sym$load_DASH_string,cljs.core.cst$sym$name,cljs.core.cst$sym$unchecked_DASH_double,cljs.core.cst$sym$when_DASH_let,cljs.core.cst$sym$symbol_QMARK_,cljs.core.cst$sym$chunk_DASH_cons,cljs.core.cst$sym$ns_DASH_imports,cljs.core.cst$sym$methods,cljs.core.cst$sym$reset_DASH_meta_BANG_,cljs.core.cst$sym$js_DASH__GT_clj,cljs.core.cst$sym$dotimes,cljs.core.cst$sym$rand_DASH_int,cljs.core.cst$sym$complement,cljs.core.cst$sym$list_QMARK_,cljs.core.cst$sym$aget,cljs.core.cst$sym$zipmap,cljs.core.cst$sym$find_DASH_var,cljs.core.cst$sym$run_BANG_,cljs.core.cst$sym$_EQ__EQ_,cljs.core.cst$sym$chars,cljs.core.cst$sym$iterate,cljs.core.cst$sym$boolean,cljs.core.cst$sym$hash_DASH_map,cljs.core.cst$sym$unchecked_DASH_inc,cljs.core.cst$sym$max_DASH_key,cljs.core.cst$sym$qualified_DASH_ident_QMARK_,cljs.core.cst$sym$coll_QMARK_,cljs.core.cst$sym$reversible_QMARK_,cljs.core.cst$sym$ns_DASH_unmap,cljs.core.cst$sym$apply,cljs.core.cst$sym$_STAR_in_STAR_,cljs.core.cst$sym$subvec,cljs.core.cst$sym$isa_QMARK_,cljs.core.cst$sym$not_DASH_every_QMARK_,cljs.core.cst$sym$ex_DASH_cause,cljs.core.cst$sym$keyword_QMARK_,cljs.core.cst$sym$ex_DASH_data,cljs.core.cst$sym$_STAR_print_DASH_namespace_DASH_maps_STAR_,cljs.core.cst$sym$compare,cljs.core.cst$sym$underive,cljs.core.cst$sym$transduce,cljs.core.cst$sym$range,cljs.core.cst$sym$IDeref,cljs.core.cst$sym$sorted_QMARK_,cljs.core.cst$sym$frequencies,cljs.core.cst$sym$cycle,cljs.core.cst$sym$max,cljs.core.cst$sym$simple_DASH_symbol_QMARK_,cljs.core.cst$sym$reify,cljs.core.cst$sym$empty_QMARK_,cljs.core.cst$sym$into,cljs.core.cst$sym$integer_QMARK_,cljs.core.cst$sym$_STAR_,cljs.core.cst$sym$some_DASH__GT__GT_,cljs.core.cst$sym$unsigned_DASH_bit_DASH_shift_DASH_right,cljs.core.cst$sym$pr_DASH_str,cljs.core.cst$sym$some_DASH__GT_,cljs.core.cst$sym$chunk,cljs.core.cst$sym$cond,cljs.core.cst$sym$distinct,cljs.core.cst$sym$ensure_DASH_reduced,cljs.core.cst$sym$object_DASH_array,cljs.core.cst$sym$juxt,cljs.core.cst$sym$some,cljs.core.cst$sym$interpose,cljs.core.cst$sym$the_DASH_ns,cljs.core.cst$sym$instance_QMARK_,cljs.core.cst$sym$descendants,cljs.core.cst$sym$get_DASH_in,cljs.core.cst$sym$meta,cljs.core.cst$sym$reify_STAR_,cljs.core.cst$sym$defrecord,cljs.core.cst$sym$val,cljs.core.cst$sym$read_DASH_string,cljs.core.cst$sym$assoc_DASH_in,cljs.core.cst$sym$zero_QMARK_,cljs.core.cst$sym$transient,cljs.core.cst$sym$letfn,cljs.core.cst$sym$realized_QMARK_,cljs.core.cst$sym$list_STAR_,cljs.core.cst$sym$ns_DASH_interns,cljs.core.cst$sym$memoize,cljs.core.cst$sym$subseq,cljs.core.cst$sym$completing,cljs.core.cst$sym$unchecked_DASH_divide_DASH_int,cljs.core.cst$sym$shuffle,cljs.core.cst$sym$ns_DASH_map,cljs.core.cst$sym$prn_DASH_str,cljs.core.cst$sym$defn_DASH_,cljs.core.cst$sym$compare_DASH_and_DASH_set_BANG_,cljs.core.cst$sym$use,cljs.core.cst$sym$longs,cljs.core.cst$sym$remove_DASH_ns,cljs.core.cst$sym$unchecked_DASH_int,cljs.core.cst$sym$nthrest,cljs.core.cst$sym$doubles,cljs.core.cst$sym$remove_DASH_method,cljs.core.cst$sym$extend,cljs.core.cst$sym$nnext,cljs.core.cst$sym$dec,cljs.core.cst$sym$qualified_DASH_keyword_QMARK_,cljs.core.cst$sym$comparator,cljs.core.cst$sym$take_DASH_last,cljs.core.cst$sym$find_DASH_ns,cljs.core.cst$sym$string_QMARK_,cljs.core.cst$sym$print,cljs.core.cst$sym$bit_DASH_xor,cljs.core.cst$sym$map,cljs.core.cst$sym$float,cljs.core.cst$sym$chunk_DASH_append,cljs.core.cst$sym$deref,cljs.core.cst$sym$re_DASH_pattern,cljs.core.cst$sym$repeat,cljs.core.cst$sym$reduce,cljs.core.cst$sym$qualified_DASH_symbol_QMARK_,cljs.core.cst$sym$eval,cljs.core.cst$sym$vector,cljs.core.cst$sym$doall,cljs.core.cst$sym$assoc_BANG_,cljs.core.cst$sym$not_EQ_,cljs.core.cst$sym$alter_DASH_meta_BANG_,cljs.core.cst$sym$constantly,cljs.core.cst$sym$seq_QMARK_,cljs.core.cst$sym$get,cljs.core.cst$sym$require,cljs.core.cst$sym$key,cljs.core.cst$sym$bit_DASH_and_DASH_not,cljs.core.cst$sym$mapcat,cljs.core.cst$sym$cond_DASH__GT_,cljs.core.cst$sym$nat_DASH_int_QMARK_,cljs.core.cst$sym$get_DASH_method,cljs.core.cst$sym$_STAR_out_STAR_,cljs.core.cst$sym$str,cljs.core.cst$sym$empty,cljs.core.cst$sym$counted_QMARK_,cljs.core.cst$sym$set_QMARK_,cljs.core.cst$sym$alength,cljs.core.cst$sym$filterv,cljs.core.cst$sym$reductions,cljs.core.cst$sym$booleans,cljs.core.cst$sym$_LT_,cljs.core.cst$sym$reduced,cljs.core.cst$sym$namespace,cljs.core.cst$sym$keyword,cljs.core.cst$sym$record_QMARK_,cljs.core.cst$sym$tagged_DASH_literal_QMARK_,cljs.core.cst$sym$_DASH_,cljs.core.cst$sym$bit_DASH_and,cljs.core.cst$sym$unreduced,cljs.core.cst$sym$assoc,cljs.core.cst$sym$defmulti,cljs.core.cst$sym$partition_DASH_all,cljs.core.cst$sym$bit_DASH_not,cljs.core.cst$sym$some_QMARK_,cljs.core.cst$sym$pos_QMARK_,cljs.core.cst$sym$trampoline,cljs.core.cst$sym$rand,cljs.core.cst$sym$re_DASH_matches,cljs.core.cst$sym$boolean_QMARK_,cljs.core.cst$sym$every_DASH_pred,cljs.core.cst$sym$fn_QMARK_,cljs.core.cst$sym$sequential_QMARK_,cljs.core.cst$sym$list,cljs.core.cst$sym$sorted_DASH_set_DASH_by,cljs.core.cst$sym$nthnext,cljs.core.cst$sym$eduction,cljs.core.cst$sym$rand_DASH_nth,cljs.core.cst$sym$delay,cljs.core.cst$sym$partial,cljs.core.cst$sym$with_DASH_bindings,cljs.core.cst$sym$rsubseq,cljs.core.cst$sym$contains_QMARK_,cljs.core.cst$sym$_DASH__GT_,cljs.core.cst$sym$shorts,cljs.core.cst$sym$ISwap,cljs.core.cst$sym$as_DASH__GT_,cljs.core.cst$sym$hash_DASH_set,cljs.core.cst$sym$take,cljs.core.cst$sym$if_DASH_let,cljs.core.cst$sym$macroexpand_DASH_1,cljs.core.cst$sym$split_DASH_with,cljs.core.cst$sym$refer,cljs.core.cst$sym$binding_DASH_conveyor_DASH_fn,cljs.core.cst$sym$make_DASH_hierarchy,cljs.core.cst$sym$tagged_DASH_literal,cljs.core.cst$sym$has_DASH_root_DASH_impl,cljs.core.cst$sym$parents,cljs.core.cst$sym$vec,cljs.core.cst$sym$nth,cljs.core.cst$kw$obj,cljs.core.cst$sym$lazy_DASH_cat,cljs.core.cst$sym$if_DASH_some,cljs.core.cst$sym$subs,cljs.core.cst$sym$symbol,cljs.core.cst$sym$mod,cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$reduced_QMARK_,cljs.core.cst$sym$_DASH_new_DASH_dynamic_DASH_var,cljs.core.cst$sym$conj,cljs.core.cst$sym$bytes,cljs.core.cst$sym$unchecked_DASH_float,cljs.core.cst$sym$bit_DASH_test,cljs.core.cst$sym$sorted_DASH_map_DASH_by,cljs.core.cst$sym$double_QMARK_,cljs.core.cst$sym$rseq,cljs.core.cst$sym$unchecked_DASH_long,cljs.core.cst$sym$binding,cljs.core.cst$sym$double,cljs.core.cst$sym$tree_DASH_seq,cljs.core.cst$sym$multi_DASH_fn_DASH_add_DASH_method_DASH_impl,cljs.core.cst$sym$seqable_QMARK_,cljs.core.cst$sym$swap_BANG_,cljs.core.cst$sym$vswap_BANG_,cljs.core.cst$sym$array_DASH_map,cljs.core.cst$sym$reset_DASH_thread_DASH_binding_DASH_frame_DASH_impl,cljs.core.cst$sym$dedupe,cljs.core.cst$sym$short,cljs.core.cst$sym$update,cljs.core.cst$sym$filter,cljs.core.cst$sym$unchecked_DASH_dec_DASH_int,cljs.core.cst$sym$_STAR_3,cljs.core.cst$sym$requiring_DASH_resolve,cljs.core.cst$sym$rem,cljs.core.cst$sym$pop,cljs.core.cst$sym$merge_DASH_with,cljs.core.cst$sym$long,cljs.core.cst$sym$assert,cljs.core.cst$sym$flatten,cljs.core.cst$sym$distinct_QMARK_,cljs.core.cst$sym$map_DASH_indexed,cljs.core.cst$sym$ns_DASH_publics,cljs.core.cst$sym$protocol_DASH_type_DASH_impl,cljs.core.cst$sym$even_QMARK_,cljs.core.cst$sym$var_DASH_get,cljs.core.cst$sym$multi_DASH_fn_QMARK__DASH_impl,cljs.core.cst$sym$alter_DASH_var_DASH_root,cljs.core.cst$sym$type,cljs.core.cst$sym$neg_QMARK_,cljs.core.cst$sym$gensym,cljs.core.cst$sym$resolve,cljs.core.cst$sym$add_DASH_watch,cljs.core.cst$sym$not_DASH_any_QMARK_,cljs.core.cst$sym$take_DASH_nth,cljs.core.cst$sym$dorun,cljs.core.cst$sym$remove_DASH_all_DASH_methods,cljs.core.cst$sym$not_DASH_empty,cljs.core.cst$sym$ns_DASH_aliases,cljs.core.cst$sym$ns_DASH_resolve,cljs.core.cst$sym$get_DASH_thread_DASH_binding_DASH_frame_DASH_impl,cljs.core.cst$sym$chunk_DASH_rest,cljs.core.cst$sym$remove_DASH_watch,cljs.core.cst$sym$int_DASH_array,cljs.core.cst$sym$pos_DASH_int_QMARK_,cljs.core.cst$sym$ints,cljs.core.cst$sym$identical_QMARK_,cljs.core.cst$sym$persistent_BANG_,cljs.core.cst$sym$IReset,cljs.core.cst$sym$indexed_QMARK_,cljs.core.cst$sym$min_DASH_key,cljs.core.cst$sym$repeatedly,cljs.core.cst$sym$set,cljs.core.cst$sym$remove,cljs.core.cst$sym$while,cljs.core.cst$sym$re_DASH_find],[(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unchecked_char;},cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_char,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unchecked_DASH_char,"cljs/core.cljs",29,1,2726,2726,cljs.core.cst$sym$number,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.unchecked_char)?cljs.core.unchecked_char.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unchecked_char;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23636 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23636,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23636;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.sorted_set;},cljs.core.cst$sym$cljs$core_SLASH_sorted_DASH_set,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$sorted_DASH_set,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(0),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keys)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),1,9454,9454,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),"Returns a new sorted set with supplied keys.",(cljs.core.truth_(cljs.core.sorted_set)?cljs.core.sorted_set.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.sorted_set;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23637 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23637,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23637;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.true_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_true_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$true_QMARK_,"cljs/core.cljs",21,1,2233,2233,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if x is the value true, false otherwise.",((cljs.core.true_QMARK_)?cljs.core.true_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.true_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23638 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23638,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23638;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unchecked_byte;},cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_byte,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unchecked_DASH_byte,"cljs/core.cljs",29,1,2725,2725,cljs.core.cst$sym$number,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.unchecked_byte)?cljs.core.unchecked_byte.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unchecked_byte;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23639 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23639,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23639;
}
})(),false);
})(),sci.impl.namespaces._STAR_2,sci.impl.namespaces.macrofy(sci.impl.namespaces.doto_STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.reduce_kv;},cljs.core.cst$sym$cljs$core_SLASH_reduce_DASH_kv,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$reduce_DASH_kv,"cljs/core.cljs",16,1,2569,2569,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),"Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.",(cljs.core.truth_(cljs.core.reduce_kv)?cljs.core.reduce_kv.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.reduce_kv;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23640 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23640,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23640;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.multimethods.defmethod),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.update_in;},cljs.core.cst$sym$cljs$core_SLASH_update_DASH_in,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$update_DASH_in,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(6),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),1,5315,5315,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.",(cljs.core.truth_(cljs.core.update_in)?cljs.core.update_in.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.update_in;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23641 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23641,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23641;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.prefer_method;},cljs.core.cst$sym$cljs$core_SLASH_prefer_DASH_method,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$prefer_DASH_method,"cljs/core.cljs",20,1,11243,11243,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val_DASH_x,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)),"Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict",(cljs.core.truth_(cljs.core.prefer_method)?cljs.core.prefer_method.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.prefer_method;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23642 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23642,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23642;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.hierarchies.derive_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.nfirst;},cljs.core.cst$sym$cljs$core_SLASH_nfirst,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$nfirst,"cljs/core.cljs",13,1,1767,1767,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Same as (next (first x))",(cljs.core.truth_(cljs.core.nfirst)?cljs.core.nfirst.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.nfirst;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23643 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23643,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23643;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.sort_by;},cljs.core.cst$sym$cljs$core_SLASH_sort_DASH_by,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$sort_DASH_by,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,3,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,2463,2463,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),"Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison function, or a -/0/+ valued comparator.\n   Comp defaults to compare.",(cljs.core.truth_(cljs.core.sort_by)?cljs.core.sort_by.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.sort_by;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23644 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23644,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23644;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.keys;},cljs.core.cst$sym$cljs$core_SLASH_keys,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$keys,"cljs/core.cljs",11,1,9019,9019,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map], null)),"Returns a sequence of the map's keys, in the same order as (seq map).",(cljs.core.truth_(cljs.core.keys)?cljs.core.keys.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.keys;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23645 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23645,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23645;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.hierarchies.ancestors_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.first;},cljs.core.cst$sym$cljs$core_SLASH_first,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$first,"cljs/core.cljs",12,1,1253,1253,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.",(cljs.core.truth_(cljs.core.first)?cljs.core.first.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.first;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23646 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23646,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23646;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.butlast;},cljs.core.cst$sym$cljs$core_SLASH_butlast,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$butlast,"cljs/core.cljs",14,1,9509,9509,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),"Return a seq of all but the last item in coll, in linear time",(cljs.core.truth_(cljs.core.butlast)?cljs.core.butlast.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.butlast;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23647 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23647,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23647;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.io.with_out_str,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci_SLASH_macro,true], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.partition_by;},cljs.core.cst$sym$cljs$core_SLASH_partition_DASH_by,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$partition_DASH_by,"cljs/core.cljs",19,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,9851,9851,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),"Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.",(cljs.core.truth_(cljs.core.partition_by)?cljs.core.partition_by.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.partition_by;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23648 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23648,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23648;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.uri_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_uri_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$added,cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],["1.9",cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$uri_QMARK_,"cljs/core.cljs",11,1,11704,11704,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true x is a goog.Uri instance.",(cljs.core.truth_(cljs.core.uri_QMARK_)?cljs.core.uri_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.uri_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23649 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23649,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23649;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.map_entry_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_map_DASH_entry_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$map_DASH_entry_QMARK_,"cljs/core.cljs",17,1,6744,6744,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if x satisfies IMapEntry",(cljs.core.truth_(cljs.core.map_entry_QMARK_)?cljs.core.map_entry_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.map_entry_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23650 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23650,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23650;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.simple_keyword_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_simple_DASH_keyword_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$simple_DASH_keyword_QMARK_,"cljs/core.cljs",22,1,3396,3396,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Return true if x is a keyword without a namespace",(cljs.core.truth_(cljs.core.simple_keyword_QMARK_)?cljs.core.simple_keyword_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.simple_keyword_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23651 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23651,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23651;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.into_array;},cljs.core.cst$sym$cljs$core_SLASH_into_DASH_array,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$into_DASH_array,"cljs/core.cljs",24,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,524,524,cljs.core.cst$sym$array,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null)),"Returns an array with components set to the values in aseq. Optional type\n  argument accepted for compatibility with Clojure.",(cljs.core.truth_(cljs.core.into_array)?cljs.core.into_array.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.into_array;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23652 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23652,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23652;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.namespaces.sci_ns_refers,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.rest;},cljs.core.cst$sym$cljs$core_SLASH_rest,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$rest,"cljs/core.cljs",16,1,1264,1264,cljs.core.cst$sym$seq,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.",((cljs.core.rest)?cljs.core.rest.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.rest;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23653 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23653,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23653;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.seq;},cljs.core.cst$sym$cljs$core_SLASH_seq,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$seq,"cljs/core.cljs",15,1,1226,1226,cljs.core.cst$sym$seq,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.",((cljs.core.seq)?cljs.core.seq.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.seq;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23654 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23654,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23654;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unchecked_inc_int;},cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_inc_DASH_int,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unchecked_DASH_inc_DASH_int,"cljs/core.cljs",24,1,2765,2765,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.unchecked_inc_int)?cljs.core.unchecked_inc_int.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unchecked_inc_int;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23655 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23655,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23655;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.odd_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_odd_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$odd_QMARK_,"cljs/core.cljs",11,1,4268,4268,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),"Returns true if n is odd, throws an exception if n is not an integer",(cljs.core.truth_(cljs.core.odd_QMARK_)?cljs.core.odd_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.odd_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23656 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23656,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23656;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.partition;},cljs.core.cst$sym$cljs$core_SLASH_partition,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$partition,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,4,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,5265,5265,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition up to n items. In case there are\n  not enough padding elements, return a partition with less than n items.",(cljs.core.truth_(cljs.core.partition)?cljs.core.partition.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.partition;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23657 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23657,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23657;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core._GT__EQ_;},cljs.core.cst$sym$cljs$core_SLASH__GT__EQ_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$_GT__EQ_,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,2681,2681,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.",((cljs.core._GT__EQ_)?cljs.core._GT__EQ_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core._GT__EQ_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23658 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23658,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23658;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.fnext;},cljs.core.cst$sym$cljs$core_SLASH_fnext,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$fnext,"cljs/core.cljs",12,1,1772,1772,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Same as (first (next x))",(cljs.core.truth_(cljs.core.fnext)?cljs.core.fnext.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.fnext;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23659 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23659,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23659;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.when_first_STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.bit_or;},cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_or,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$bit_DASH_or,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,2875,2875,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Bitwise or",(cljs.core.truth_(cljs.core.bit_or)?cljs.core.bit_or.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.bit_or;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23660 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23660,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23660;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.disj;},cljs.core.cst$sym$cljs$core_SLASH_disj,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$disj,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,2113,2113,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),"disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).",(cljs.core.truth_(cljs.core.disj)?cljs.core.disj.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.disj;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23661 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23661,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23661;
}
})(),false);
})(),sci.impl.namespaces.sci_with_redefs_fn,(function (){
return sci.impl.vars.new_var.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym.cljs$core$IFn$_invoke$arity$0(),null);
}),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unchecked_short;},cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_short,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unchecked_DASH_short,"cljs/core.cljs",30,1,2727,2727,cljs.core.cst$sym$number,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.unchecked_short)?cljs.core.unchecked_short.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unchecked_short;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23662 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23662,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23662;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.ffirst;},cljs.core.cst$sym$cljs$core_SLASH_ffirst,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$ffirst,"cljs/core.cljs",13,1,1762,1762,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Same as (first (first x))",(cljs.core.truth_(cljs.core.ffirst)?cljs.core.ffirst.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.ffirst;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23663 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23663,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23663;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.condp_STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.munge;},cljs.core.cst$sym$cljs$core_SLASH_munge,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$munge,"cljs/core.cljs",12,1,11513,11513,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)),null,(cljs.core.truth_(cljs.core.munge)?cljs.core.munge.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.munge;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23664 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23664,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23664;
}
})(),false);
})(),sci.impl.vars.current_file,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unchecked_negate_int;},cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_negate_DASH_int,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unchecked_DASH_negate_DASH_int,"cljs/core.cljs",27,1,2785,2785,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.unchecked_negate_int)?cljs.core.unchecked_negate_int.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unchecked_negate_int;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23665 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23665,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23665;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return sci.impl.io.print_str;},cljs.core.cst$sym$sci$impl$io_SLASH_print_DASH_str,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$sci$impl$io,cljs.core.cst$sym$print_DASH_str,"resources/public/cljs-out/dev/sci/impl/io.cljc",19,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(0),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),4,159,159,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"pr to a string, returning it",(cljs.core.truth_(sci.impl.io.print_str)?sci.impl.io.print_str.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = sci.impl.io.print_str;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23666 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23666,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23666;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.vreset_BANG_;},cljs.core.cst$sym$cljs$core_SLASH_vreset_BANG_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$vreset_BANG_,"cljs/core.cljs",14,1,4591,4591,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vol,cljs.core.cst$sym$newval], null)),"Sets the value of volatile to newval without regard for the\n   current value. Returns newval.",(cljs.core.truth_(cljs.core.vreset_BANG_)?cljs.core.vreset_BANG_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.vreset_BANG_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23667 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23667,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23667;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.uuid_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_uuid_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$uuid_QMARK_,"cljs/core.cljs",12,1,11316,11316,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.uuid_QMARK_)?cljs.core.uuid_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.uuid_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23668 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23668,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23668;
}
})(),false);
})(),sci.impl.core_protocols.reset_BANG__STAR_,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.atom;},cljs.core.cst$sym$cljs$core_SLASH_atom,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$atom,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(1),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$validator], null)], null)], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,4460,4460,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$validator], null)], null)], null)),"Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will become the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.",(cljs.core.truth_(cljs.core.atom)?cljs.core.atom.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.atom;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23669 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23669,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23669;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.select_keys;},cljs.core.cst$sym$cljs$core_SLASH_select_DASH_keys,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$select_DASH_keys,"cljs/core.cljs",18,1,9133,9133,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map,cljs.core.cst$sym$keyseq], null)),"Returns a map containing only those entries in map whose key is in keys",(cljs.core.truth_(cljs.core.select_keys)?cljs.core.select_keys.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.select_keys;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23670 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23670,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23670;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.reverse;},cljs.core.cst$sym$cljs$core_SLASH_reverse,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$reverse,"cljs/core.cljs",14,1,3211,3211,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns a seq of the items in coll in reverse order. Not lazy.",(cljs.core.truth_(cljs.core.reverse)?cljs.core.reverse.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.reverse;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23671 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23671,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23671;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return sci.impl.namespaces.ex_message;},cljs.core.cst$sym$sci$impl$namespaces_SLASH_ex_DASH_message,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.with_meta(cljs.core.cst$sym$sci$impl$namespaces,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$no_DASH_doc,true], null)),cljs.core.cst$sym$ex_DASH_message,"resources/public/cljs-out/dev/sci/impl/namespaces.cljc",16,1,247,247,cljs.core.List.EMPTY,null,(cljs.core.truth_(sci.impl.namespaces.ex_message)?sci.impl.namespaces.ex_message.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = sci.impl.namespaces.ex_message;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23672 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23672,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23672;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.special_symbol_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_special_DASH_symbol_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$special_DASH_symbol_QMARK_,"cljs/core.cljs",31,1,11396,11396,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if x names a special form",((cljs.core.special_symbol_QMARK_)?cljs.core.special_symbol_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.special_symbol_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23673 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23673,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23673;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.merge;},cljs.core.cst$sym$cljs$core_SLASH_merge,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$merge,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(0),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$maps)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),1,9109,9109,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.",(cljs.core.truth_(cljs.core.merge)?cljs.core.merge.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.merge;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23674 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23674,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23674;
}
})(),false);
})(),sci.impl.io.newline,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unchecked_multiply;},cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_multiply,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unchecked_DASH_multiply,"cljs/core.cljs",33,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),1,2768,2768,cljs.core.cst$sym$number,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the product of nums. (*) returns 1.",(cljs.core.truth_(cljs.core.unchecked_multiply)?cljs.core.unchecked_multiply.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unchecked_multiply;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23675 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23675,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23675;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.double_dot),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.chunked_seq_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_chunked_DASH_seq_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$chunked_DASH_seq_QMARK_,"cljs/core.cljs",19,1,2185,2185,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Return true if x satisfies IChunkedSeq.",(cljs.core.truth_(cljs.core.chunked_seq_QMARK_)?cljs.core.chunked_seq_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.chunked_seq_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23676 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23676,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23676;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.inst_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_inst_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$inst_QMARK_,"cljs/core.cljs",12,1,1415,1415,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Return true if x satisfies Inst",(cljs.core.truth_(cljs.core.inst_QMARK_)?cljs.core.inst_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.inst_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23677 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23677,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23677;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.random_sample;},cljs.core.cst$sym$cljs$core_SLASH_random_DASH_sample,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$random_DASH_sample,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,10664,10664,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),"Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.",(cljs.core.truth_(cljs.core.random_sample)?cljs.core.random_sample.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.random_sample;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23678 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23678,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23678;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core._GT_;},cljs.core.cst$sym$cljs$core_SLASH__GT_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$_GT_,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,2669,2669,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.",((cljs.core._GT_)?cljs.core._GT_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core._GT_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23679 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23679,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23679;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.count;},cljs.core.cst$sym$cljs$core_SLASH_count,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$count,"cljs/core.cljs",12,1,1828,1828,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps",(cljs.core.truth_(cljs.core.count)?cljs.core.count.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.count;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23680 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23680,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23680;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.simple_ident_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_simple_DASH_ident_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$simple_DASH_ident_QMARK_,"cljs/core.cljs",20,1,3380,3380,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Return true if x is a symbol or keyword without a namespace",(cljs.core.truth_(cljs.core.simple_ident_QMARK_)?cljs.core.simple_ident_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.simple_ident_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23681 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23681,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23681;
}
})(),false);
})(),sci.impl.namespaces.sci_ns_name,sci.impl.namespaces._STAR_1,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.last;},cljs.core.cst$sym$cljs$core_SLASH_last,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$last,"cljs/core.cljs",11,1,1782,1782,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),"Return the last item in coll, in linear time",(cljs.core.truth_(cljs.core.last)?cljs.core.last.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.last;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23682 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23682,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23682;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.bit_shift_left;},cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_shift_DASH_left,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$bit_DASH_shift_DASH_left,"cljs/core.cljs",21,1,2911,2911,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),"Bitwise shift left",(cljs.core.truth_(cljs.core.bit_shift_left)?cljs.core.bit_shift_left.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.bit_shift_left;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23683 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23683,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23683;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.int$;},cljs.core.cst$sym$cljs$core_SLASH_int,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$int,"cljs/core.cljs",10,1,2812,2812,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Coerce to int by stripping decimal places.",(cljs.core.truth_(cljs.core.int$)?cljs.core.int$.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.int$;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23684 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23684,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23684;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unchecked_negate;},cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_negate,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unchecked_DASH_negate,"cljs/core.cljs",23,1,2782,2782,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.unchecked_negate)?cljs.core.unchecked_negate.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unchecked_negate;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23685 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23685,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23685;
}
})(),false);
})(),sci.impl.multimethods.multi_fn_impl,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unchecked_remainder_int;},cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_remainder_DASH_int,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unchecked_DASH_remainder_DASH_int,"cljs/core.cljs",30,1,2790,2790,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,(cljs.core.truth_(cljs.core.unchecked_remainder_int)?cljs.core.unchecked_remainder_int.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unchecked_remainder_int;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23686 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23686,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23686;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.byte$;},cljs.core.cst$sym$cljs$core_SLASH_byte,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$byte,"cljs/core.cljs",19,1,2711,2711,cljs.core.cst$sym$number,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.byte$)?cljs.core.byte$.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.byte$;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23687 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23687,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23687;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.conj_BANG_;},cljs.core.cst$sym$cljs$core_SLASH_conj_BANG_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$conj_BANG_,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),1,3838,3838,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),"Adds val to the transient collection, and return tcoll. The 'addition'\n  may happen at different 'places' depending on the concrete type.",(cljs.core.truth_(cljs.core.conj_BANG_)?cljs.core.conj_BANG_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.conj_BANG_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23688 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23688,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23688;
}
})(),false);
})(),sci.impl.io.println,cljs.core.with_meta(sci.impl.protocols.defprotocol,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$sci_SLASH_macro,true,cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.int_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_int_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$int_QMARK_,"cljs/core.cljs",11,1,2283,2283,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Return true if x satisfies integer? or is an instance of goog.math.Integer\n   or goog.math.Long.",(cljs.core.truth_(cljs.core.int_QMARK_)?cljs.core.int_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.int_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23689 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23689,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23689;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.long_array;},cljs.core.cst$sym$cljs$core_SLASH_long_DASH_array,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$long_DASH_array,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,3701,3701,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),"Creates an array of longs. Does not coerce array, provided for compatibility\n  with Clojure.",(cljs.core.truth_(cljs.core.long_array)?cljs.core.long_array.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.long_array;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23690 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23690,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23690;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.find;},cljs.core.cst$sym$cljs$core_SLASH_find,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$find,"cljs/core.cljs",11,1,2363,2363,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),"Returns the map entry for key, or nil if key not present.",(cljs.core.truth_(cljs.core.find)?cljs.core.find.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.find;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23691 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23691,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23691;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.vals;},cljs.core.cst$sym$cljs$core_SLASH_vals,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$vals,"cljs/core.cljs",11,1,9098,9098,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map], null)),"Returns a sequence of the map's values, in the same order as (seq map).",(cljs.core.truth_(cljs.core.vals)?cljs.core.vals.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.vals;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23692 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23692,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23692;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.nil_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_nil_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$nil_QMARK_,"cljs/core.cljs",20,1,235,235,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if x is nil, false otherwise.",((cljs.core.nil_QMARK_)?cljs.core.nil_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.nil_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23693 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23693,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23693;
}
})(),false);
})(),sci.impl.io.flush,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.hash;},cljs.core.cst$sym$cljs$core_SLASH_hash,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$hash,"cljs/core.cljs",11,1,1000,1000,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),"Returns the hash code of its argument. Note this is the hash code\n   consistent with =.",(cljs.core.truth_(cljs.core.hash)?cljs.core.hash.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.hash;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23694 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23694,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23694;
}
})(),false);
})(),sci.impl.io.pr,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unchecked_subtract;},cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_subtract,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unchecked_DASH_subtract,"cljs/core.cljs",33,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,2793,2793,cljs.core.cst$sym$number,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",(cljs.core.truth_(cljs.core.unchecked_subtract)?cljs.core.unchecked_subtract.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unchecked_subtract;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23695 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23695,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23695;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.comment_STAR_),sci.impl.namespaces.macrofy(sci.impl.namespaces.sci_with_redefs),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.float_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_float_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$float_QMARK_,"cljs/core.cljs",13,1,2336,2336,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true for JavaScript numbers, false otherwise.",(cljs.core.truth_(cljs.core.float_QMARK_)?cljs.core.float_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.float_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23696 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23696,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23696;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.second;},cljs.core.cst$sym$cljs$core_SLASH_second,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$second,"cljs/core.cljs",13,1,1757,1757,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Same as (first (next x))",(cljs.core.truth_(cljs.core.second)?cljs.core.second.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.second;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23697 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23697,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23697;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.protocols.extend_protocol,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$sci_SLASH_macro,true,cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),sci.impl.io.err,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.chunk_first;},cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_first,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$chunk_DASH_first,"cljs/core.cljs",18,1,3645,3645,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,(cljs.core.truth_(cljs.core.chunk_first)?cljs.core.chunk_first.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.chunk_first;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23698 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23698,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23698;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.namespaces.sci_alias,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unchecked_add_int;},cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_add_DASH_int,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unchecked_DASH_add_DASH_int,"cljs/core.cljs",32,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),1,2738,2738,cljs.core.cst$sym$number,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the sum of nums. (+) returns 0.",(cljs.core.truth_(cljs.core.unchecked_add_int)?cljs.core.unchecked_add_int.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unchecked_add_int;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23699 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23699,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23699;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.ifn_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_ifn_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$ifn_QMARK_,"cljs/core.cljs",11,1,2270,2270,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),"Returns true if f returns true for fn? or satisfies IFn.",(cljs.core.truth_(cljs.core.ifn_QMARK_)?cljs.core.ifn_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.ifn_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23700 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23700,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23700;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.ex_info;},cljs.core.cst$sym$cljs$core_SLASH_ex_DASH_info,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$ex_DASH_info,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,3,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,11361,11361,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),"Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.",(cljs.core.truth_(cljs.core.ex_info)?cljs.core.ex_info.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.ex_info;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23701 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23701,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23701;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.inc;},cljs.core.cst$sym$cljs$core_SLASH_inc,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$inc,"cljs/core.cljs",10,1,1437,1437,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns a number one greater than num.",(cljs.core.truth_(cljs.core.inc)?cljs.core.inc.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.inc;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23702 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23702,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23702;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core._SLASH_;},cljs.core.cst$sym$cljs$core_SLASH__SLASH_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$_SLASH_,"cljs/core.cljs",new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,2638,cljs.core.cst$sym$number,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.",(cljs.core.truth_(cljs.core._SLASH_)?cljs.core._SLASH_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core._SLASH_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23703 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23703,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23703;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.volatile_BANG_;},cljs.core.cst$sym$cljs$core_SLASH_volatile_BANG_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$volatile_BANG_,"cljs/core.cljs",16,1,4582,4582,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null)),"Creates and returns a Volatile with an initial value of val.",(cljs.core.truth_(cljs.core.volatile_BANG_)?cljs.core.volatile_BANG_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.volatile_BANG_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23704 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23704,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23704;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.with_meta;},cljs.core.cst$sym$cljs$core_SLASH_with_DASH_meta,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$with_DASH_meta,"cljs/core.cljs",16,1,2082,2082,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)),"Returns an object of the same type and value as obj, with\n  map m as its metadata.",(cljs.core.truth_(cljs.core.with_meta)?cljs.core.with_meta.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.with_meta;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23705 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23705,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23705;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.map_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_map_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$map_QMARK_,"cljs/core.cljs",11,1,2167,2167,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Return true if x satisfies IMap",(cljs.core.truth_(cljs.core.map_QMARK_)?cljs.core.map_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.map_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23706 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23706,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23706;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.vector_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_vector_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$vector_QMARK_,"cljs/core.cljs",14,1,2179,2179,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Return true if x satisfies IVector",(cljs.core.truth_(cljs.core.vector_QMARK_)?cljs.core.vector_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.vector_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23707 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23707,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23707;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.__GT__GT__STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.quot;},cljs.core.cst$sym$cljs$core_SLASH_quot,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$quot,"cljs/core.cljs",11,1,2851,2851,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null)),"quot[ient] of dividing numerator by denominator.",(cljs.core.truth_(cljs.core.quot)?cljs.core.quot.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.quot;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23708 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23708,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23708;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.any_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_any_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$any_QMARK_,"cljs/core.cljs",11,1,281,281,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if given any argument.",(cljs.core.truth_(cljs.core.any_QMARK_)?cljs.core.any_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.any_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23709 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23709,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23709;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unchecked_add;},cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_add,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unchecked_DASH_add,"cljs/core.cljs",28,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),1,2731,2731,cljs.core.cst$sym$number,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the sum of nums. (+) returns 0.",(cljs.core.truth_(cljs.core.unchecked_add)?cljs.core.unchecked_add.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unchecked_add;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23710 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23710,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23710;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.floats;},cljs.core.cst$sym$cljs$core_SLASH_floats,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$floats,"cljs/core.cljs",13,1,2837,2837,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.floats)?cljs.core.floats.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.floats;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23711 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23711,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23711;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.drop_while;},cljs.core.cst$sym$cljs$core_SLASH_drop_DASH_while,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$drop_DASH_while,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,4823,4823,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.",(cljs.core.truth_(cljs.core.drop_while)?cljs.core.drop_while.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.drop_while;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23712 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23712,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23712;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.bounded_count;},cljs.core.cst$sym$cljs$core_SLASH_bounded_DASH_count,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$added,cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],["1.9",cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$bounded_DASH_count,"cljs/core.cljs",20,1,3767,3767,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"If coll is counted? returns its count, else will count at most the first n\n   elements of coll using its seq",(cljs.core.truth_(cljs.core.bounded_count)?cljs.core.bounded_count.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.bounded_count;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23713 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23713,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23713;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.take_while;},cljs.core.cst$sym$cljs$core_SLASH_take_DASH_while,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$take_DASH_while,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,9598,9598,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of successive items from coll while\n  (pred item) returns logical true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",(cljs.core.truth_(cljs.core.take_while)?cljs.core.take_while.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.take_while;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23714 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23714,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23714;
}
})(),false);
})(),sci.impl.protocols.extends_QMARK_,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.sort;},cljs.core.cst$sym$cljs$core_SLASH_sort,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$sort,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,2449,2449,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),"Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison function, or a -/0/+ valued comparator.\n   Comp defaults to compare.",(cljs.core.truth_(cljs.core.sort)?cljs.core.sort.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.sort;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23715 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23715,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23715;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.false_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_false_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$false_QMARK_,"cljs/core.cljs",22,1,2229,2229,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if x is the value false, false otherwise.",((cljs.core.false_QMARK_)?cljs.core.false_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.false_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23716 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23716,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23716;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.cat;},cljs.core.cst$sym$cljs$core_SLASH_cat,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$added,cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],["1.7",cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$cat,"cljs/core.cljs",10,1,10609,10609,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null)),"A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction.",(cljs.core.truth_(cljs.core.cat)?cljs.core.cat.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.cat;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23717 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23717,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23717;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.protocols.extend_type,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$sci_SLASH_macro,true,cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),sci.impl.io.print_level,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.replace;},cljs.core.cst$sym$cljs$core_SLASH_replace,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$replace,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,9466,9466,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),"Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.",(cljs.core.truth_(cljs.core.replace)?cljs.core.replace.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.replace;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23718 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23718,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23718;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.drop;},cljs.core.cst$sym$cljs$core_SLASH_drop,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$drop,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,4784,4784,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.",(cljs.core.truth_(cljs.core.drop)?cljs.core.drop.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.drop;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23719 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23719,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23719;
}
})(),false);
})(),sci.impl.vars.push_thread_bindings,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.not;},cljs.core.cst$sym$cljs$core_SLASH_not,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$not,"cljs/core.cljs",10,1,252,252,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if x is logical false, false otherwise.",(cljs.core.truth_(cljs.core.not)?cljs.core.not.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.not;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23720 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23720,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23720;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.keep;},cljs.core.cst$sym$cljs$core_SLASH_keep,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$keep,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,4397,4397,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.",(cljs.core.truth_(cljs.core.keep)?cljs.core.keep.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.keep;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23721 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23721,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23721;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.cons;},cljs.core.cst$sym$cljs$core_SLASH_cons,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$cons,"cljs/core.cljs",11,1,3295,3295,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$coll], null)),"Returns a new seq where x is the first element and coll is the rest.",(cljs.core.truth_(cljs.core.cons)?cljs.core.cons.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.cons;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23722 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23722,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23722;
}
})(),false);
})(),sci.impl.namespaces._STAR_e,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.bit_shift_right;},cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_shift_DASH_right,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$bit_DASH_shift_DASH_right,"cljs/core.cljs",22,1,2915,2915,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),"Bitwise shift right",(cljs.core.truth_(cljs.core.bit_shift_right)?cljs.core.bit_shift_right.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.bit_shift_right;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23723 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23723,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23723;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.associative_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_associative_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$associative_QMARK_,"cljs/core.cljs",19,1,2147,2147,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if coll implements IAssociative",(cljs.core.truth_(cljs.core.associative_QMARK_)?cljs.core.associative_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.associative_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23724 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23724,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23724;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.read.read,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var G__23725 = sci.impl.vars.__GT_SciVar(null,cljs.core.cst$sym$clojure$core_SLASH_unquote,null,false);
G__23725.sci$impl$vars$IVar$unbind$arity$1(null);

return G__23725;
})(),cljs.core.with_meta(sci.impl.namespaces.macroexpand_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),sci.impl.io.print_length,sci.impl.namespaces.macrofy(sci.impl.namespaces.if_not_STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.chunk_next;},cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_next,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$chunk_DASH_next,"cljs/core.cljs",17,1,3651,3651,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,(cljs.core.truth_(cljs.core.chunk_next)?cljs.core.chunk_next.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.chunk_next;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23726 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23726,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23726;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return sci.impl.vars.var_set;},cljs.core.cst$sym$sci$impl$vars_SLASH_var_DASH_set,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$sci$impl$vars,cljs.core.cst$sym$var_DASH_set,"resources/public/cljs-out/dev/sci/impl/vars.cljc",14,1,369,369,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$val], null)),null,(cljs.core.truth_(sci.impl.vars.var_set)?sci.impl.vars.var_set.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = sci.impl.vars.var_set;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23727 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23727,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23727;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.bit_flip;},cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_flip,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$bit_DASH_flip,"cljs/core.cljs",15,1,2892,2892,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),"Flip bit at index n",(cljs.core.truth_(cljs.core.bit_flip)?cljs.core.bit_flip.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.bit_flip;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23728 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23728,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23728;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.aset;},cljs.core.cst$sym$cljs$core_SLASH_aset,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$aset,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(3),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,509,509,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),"Sets the value at the index/indices. Works on JavaScript arrays.\n  Returns val.",(cljs.core.truth_(cljs.core.aset)?cljs.core.aset.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.aset;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23729 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23729,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23729;
}
})(),false);
})(),sci.impl.core_protocols._deref,sci.impl.vars.current_ns,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.some_fn;},cljs.core.cst$sym$cljs$core_SLASH_some_DASH_fn,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$some_DASH_fn,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(3),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),1,4671,4671,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),"Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.",(cljs.core.truth_(cljs.core.some_fn)?cljs.core.some_fn.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.some_fn;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23730 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23730,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23730;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return sci.impl.vars.var_QMARK_;},cljs.core.cst$sym$sci$impl$vars_SLASH_var_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$sci$impl$vars,cljs.core.cst$sym$var_QMARK_,"resources/public/cljs-out/dev/sci/impl/vars.cljc",11,1,372,372,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(sci.impl.vars.var_QMARK_)?sci.impl.vars.var_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = sci.impl.vars.var_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23731 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23731,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23731;
}
})(),false);
})(),sci.impl.io.print_meta,sci.impl.namespaces.macrofy(sci.impl.namespaces.when_not_STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unchecked_multiply_int;},cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_multiply_DASH_int,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unchecked_DASH_multiply_DASH_int,"cljs/core.cljs",37,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),1,2775,2775,cljs.core.cst$sym$number,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the product of nums. (*) returns 1.",(cljs.core.truth_(cljs.core.unchecked_multiply_int)?cljs.core.unchecked_multiply_int.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unchecked_multiply_int;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23732 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23732,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23732;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.identity;},cljs.core.cst$sym$cljs$core_SLASH_identity,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$identity,"cljs/core.cljs",15,1,2581,2581,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns its argument.",(cljs.core.truth_(cljs.core.identity)?cljs.core.identity.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.identity;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23733 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23733,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23733;
}
})(),false);
})(),sci.impl.core_protocols._reset_BANG_,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.to_array;},cljs.core.cst$sym$cljs$core_SLASH_to_DASH_array,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$to_DASH_array,"cljs/core.cljs",15,1,3658,3658,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns an array containing the contents of coll.",(cljs.core.truth_(cljs.core.to_array)?cljs.core.to_array.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.to_array;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23734 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23734,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23734;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.double_array;},cljs.core.cst$sym$cljs$core_SLASH_double_DASH_array,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$double_DASH_array,"cljs/core.cljs",19,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,3723,3723,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),"Creates an array of doubles. Does not coerce array, provided for compatibility\n  with Clojure.",(cljs.core.truth_(cljs.core.double_array)?cljs.core.double_array.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.double_array;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23735 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23735,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23735;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.sorted_map;},cljs.core.cst$sym$cljs$core_SLASH_sorted_DASH_map,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$sorted_DASH_map,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(0),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),1,8932,8932,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"keyval => key val\n  Returns a new sorted map with supplied mappings.",(cljs.core.truth_(cljs.core.sorted_map)?cljs.core.sorted_map.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.sorted_map;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23736 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23736,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23736;
}
})(),false);
})(),(function (p1__23635_SHARP_){
return sci.impl.types.getMethods(p1__23635_SHARP_);
}),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.concat;},cljs.core.cst$sym$cljs$core_SLASH_concat,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$concat,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$zs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),1,3788,3788,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$zs], null)),"Returns a lazy seq representing the concatenation of the elements in the supplied colls.",(cljs.core.truth_(cljs.core.concat)?cljs.core.concat.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.concat;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23737 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23737,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23737;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.char$;},cljs.core.cst$sym$cljs$core_SLASH_char,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$char,"cljs/core.cljs",11,1,2713,2713,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Coerce to char",(cljs.core.truth_(cljs.core.char$)?cljs.core.char$.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.char$;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23738 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23738,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23738;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.ident_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_ident_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$ident_QMARK_,"cljs/core.cljs",13,1,3376,3376,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Return true if x is a symbol or keyword",(cljs.core.truth_(cljs.core.ident_QMARK_)?cljs.core.ident_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.ident_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23739 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23739,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23739;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.make_array;},cljs.core.cst$sym$cljs$core_SLASH_make_DASH_array,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$make_DASH_array,"cljs/core.cljs",24,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,416,416,cljs.core.cst$sym$array,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null)),"Construct a JavaScript array of the specified dimensions. Accepts ignored\n  type argument for compatibility with Clojure. Note that there is no efficient\n  way to allocate multi-dimensional arrays in JavaScript; as such, this function\n  will run in polynomial time when called with 3 or more arguments.",(cljs.core.truth_(cljs.core.make_array)?cljs.core.make_array.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.make_array;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23740 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23740,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23740;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.chunk_buffer;},cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_buffer,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$chunk_DASH_buffer,"cljs/core.cljs",19,1,3526,3526,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$capacity], null)),null,(cljs.core.truth_(cljs.core.chunk_buffer)?cljs.core.chunk_buffer.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.chunk_buffer;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23741 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23741,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23741;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.peek;},cljs.core.cst$sym$cljs$core_SLASH_peek,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$peek,"cljs/core.cljs",11,1,2098,2098,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.",(cljs.core.truth_(cljs.core.peek)?cljs.core.peek.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.peek;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23742 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23742,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23742;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.hash_unordered_coll;},cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_unordered_DASH_coll,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$hash_DASH_unordered_DASH_coll,"cljs/core.cljs",34,1,1365,1365,cljs.core.cst$sym$number,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.",(cljs.core.truth_(cljs.core.hash_unordered_coll)?cljs.core.hash_unordered_coll.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.hash_unordered_coll;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23743 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23743,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23743;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.when_STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.clj__GT_js;},cljs.core.cst$sym$cljs$core_SLASH_clj_DASH__GT_js,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$clj_DASH__GT_js,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(1),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$x,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyword_DASH_fn], null),cljs.core.cst$kw$or,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$keyword_DASH_fn,cljs.core.cst$sym$name], null),cljs.core.cst$kw$as,cljs.core.cst$sym$options], null))], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyword_DASH_fn], null),cljs.core.cst$kw$or,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$keyword_DASH_fn,cljs.core.cst$sym$name], null),cljs.core.cst$kw$as,cljs.core.cst$sym$options], null)], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),1,10736,10736,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyword_DASH_fn], null),cljs.core.cst$kw$or,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$keyword_DASH_fn,cljs.core.cst$sym$name], null),cljs.core.cst$kw$as,cljs.core.cst$sym$options], null)], null)),"Recursively transforms ClojureScript values to JavaScript.\n  sets/vectors/lists become Arrays, Keywords and Symbol become Strings,\n  Maps become Objects. Arbitrary keys are encoded to by `key->js`.\n  Options is a key-value pair, where the only valid key is\n  :keyword-fn, which should point to a single-argument function to be\n  called on keyword keys. Default to `name`.",(cljs.core.truth_(cljs.core.clj__GT_js)?cljs.core.clj__GT_js.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.clj__GT_js;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23744 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23744,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23744;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.sequence;},cljs.core.cst$sym$cljs$core_SLASH_sequence,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$sequence,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,4212,4212,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),"Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments",(cljs.core.truth_(cljs.core.sequence)?cljs.core.sequence.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.sequence;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23745 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23745,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23745;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.group_by;},cljs.core.cst$sym$cljs$core_SLASH_group_DASH_by,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$group_DASH_by,"cljs/core.cljs",15,1,10850,10850,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),"Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.",(cljs.core.truth_(cljs.core.group_by)?cljs.core.group_by.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.group_by;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23746 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23746,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23746;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.re_seq;},cljs.core.cst$sym$cljs$core_SLASH_re_DASH_seq,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$re_DASH_seq,"cljs/core.cljs",13,1,10027,10027,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null)),"Returns a lazy sequence of successive matches of re in s.",(cljs.core.truth_(cljs.core.re_seq)?cljs.core.re_seq.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.re_seq;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23747 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23747,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23747;
}
})(),false);
})(),sci.impl.core_protocols._swap_BANG_,sci.impl.namespaces.macrofy(sci.impl.namespaces.when_some_STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unchecked_subtract_int;},cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_subtract_DASH_int,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unchecked_DASH_subtract_DASH_int,"cljs/core.cljs",37,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,2800,2800,cljs.core.cst$sym$number,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",(cljs.core.truth_(cljs.core.unchecked_subtract_int)?cljs.core.unchecked_subtract_int.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unchecked_subtract_int;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23748 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23748,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23748;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core._LT__EQ_;},cljs.core.cst$sym$cljs$core_SLASH__LT__EQ_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$_LT__EQ_,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,2657,2657,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.",((cljs.core._LT__EQ_)?cljs.core._LT__EQ_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core._LT__EQ_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23749 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23749,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23749;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.prefers;},cljs.core.cst$sym$cljs$core_SLASH_prefers,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$prefers,"cljs/core.cljs",14,1,11258,11258,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null)),"Given a multimethod, returns a map of preferred value -> set of other values",(cljs.core.truth_(cljs.core.prefers)?cljs.core.prefers.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.prefers;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23750 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23750,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23750;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.vary_meta;},cljs.core.cst$sym$cljs$core_SLASH_vary_DASH_meta,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$vary_DASH_meta,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(6),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null,null)], null),1,3989,3989,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.",(cljs.core.truth_(cljs.core.vary_meta)?cljs.core.vary_meta.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.vary_meta;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23751 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23751,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23751;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core._EQ_;},cljs.core.cst$sym$cljs$core_SLASH__EQ_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$_EQ_,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,1286,1286,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.",((cljs.core._EQ_)?cljs.core._EQ_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core._EQ_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23752 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23752,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23752;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.namespaces.sci_intern,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.keep_indexed;},cljs.core.cst$sym$cljs$core_SLASH_keep_DASH_indexed,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$keep_DASH_indexed,"cljs/core.cljs",19,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,4596,4596,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.",(cljs.core.truth_(cljs.core.keep_indexed)?cljs.core.keep_indexed.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.keep_indexed;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23753 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23753,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23753;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.js_obj;},cljs.core.cst$sym$cljs$core_SLASH_js_DASH_obj,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$js_DASH_obj,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(0),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,2190,2190,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"Create JavaSript object from an even number arguments representing\n  interleaved keys and values.",(cljs.core.truth_(cljs.core.js_obj)?cljs.core.js_obj.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.js_obj;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23754 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23754,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23754;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.every_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_every_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$every_QMARK_,"cljs/core.cljs",13,1,4234,4234,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns true if (pred x) is logical true for every x in coll, else\n  false.",(cljs.core.truth_(cljs.core.every_QMARK_)?cljs.core.every_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.every_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23755 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23755,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23755;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.comp;},cljs.core.cst$sym$cljs$core_SLASH_comp,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$comp,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(3),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$f2,cljs.core.cst$sym$f3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),1,4286,4286,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$f2,cljs.core.cst$sym$f3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),"Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.",(cljs.core.truth_(cljs.core.comp)?cljs.core.comp.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.comp;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23756 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23756,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23756;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.bit_set;},cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_set,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$bit_DASH_set,"cljs/core.cljs",14,1,2901,2901,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),"Set bit at index n",(cljs.core.truth_(cljs.core.bit_set)?cljs.core.bit_set.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.bit_set;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23757 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23757,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23757;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.dissoc;},cljs.core.cst$sym$cljs$core_SLASH_dissoc,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$dissoc,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,2010,2010,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),"dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).",(cljs.core.truth_(cljs.core.dissoc)?cljs.core.dissoc.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.dissoc;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23758 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23758,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23758;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.min;},cljs.core.cst$sym$cljs$core_SLASH_min,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$min,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,2704,2704,cljs.core.cst$sym$number,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the least of the nums.",(cljs.core.truth_(cljs.core.min)?cljs.core.min.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.min;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23759 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23759,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23759;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.char_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_char_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$char_QMARK_,"cljs/core.cljs",12,1,276,276,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if x is a JavaScript string of length one.",(cljs.core.truth_(cljs.core.char_QMARK_)?cljs.core.char_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.char_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23760 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23760,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23760;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.with_open_STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.interleave;},cljs.core.cst$sym$cljs$core_SLASH_interleave,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$interleave,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),1,5102,5102,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),"Returns a lazy seq of the first item in each coll, then the second etc.",(cljs.core.truth_(cljs.core.interleave)?cljs.core.interleave.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.interleave;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23761 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23761,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23761;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.with_local_vars_STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return sci.impl.namespaces.sci_bound_QMARK_;},cljs.core.cst$sym$sci$impl$namespaces_SLASH_sci_DASH_bound_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.with_meta(cljs.core.cst$sym$sci$impl$namespaces,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$no_DASH_doc,true], null)),cljs.core.cst$sym$sci_DASH_bound_QMARK_,"resources/public/cljs-out/dev/sci/impl/namespaces.cljc",17,1,493,493,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sci_DASH_var], null)),null,(cljs.core.truth_(sci.impl.namespaces.sci_bound_QMARK_)?sci.impl.namespaces.sci_bound_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = sci.impl.namespaces.sci_bound_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23762 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23762,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23762;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.namespaces.sci_all_ns,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.split_at;},cljs.core.cst$sym$cljs$core_SLASH_split_DASH_at,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$split_DASH_at,"cljs/core.cljs",15,1,4915,4915,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"Returns a vector of [(take n coll) (drop n coll)]",(cljs.core.truth_(cljs.core.split_at)?cljs.core.split_at.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.split_at;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23763 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23763,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23763;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.neg_int_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_neg_DASH_int_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$neg_DASH_int_QMARK_,"cljs/core.cljs",24,1,2307,2307,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Return true if x satisfies int? and is negative.",((cljs.core.neg_int_QMARK_)?cljs.core.neg_int_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.neg_int_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23764 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23764,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23764;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.mapv;},cljs.core.cst$sym$cljs$core_SLASH_mapv,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$mapv,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(4),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),1,5240,5240,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),"Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.",(cljs.core.truth_(cljs.core.mapv)?cljs.core.mapv.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.mapv;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23765 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23765,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23765;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.defonce_STAR_),sci.impl.io.prn,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.drop_last;},cljs.core.cst$sym$cljs$core_SLASH_drop_DASH_last,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$drop_DASH_last,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,4809,4809,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),"Return a lazy sequence of all but the last n (default 1) items in coll",(cljs.core.truth_(cljs.core.drop_last)?cljs.core.drop_last.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.drop_last;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23766 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23766,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23766;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.fnil;},cljs.core.cst$sym$cljs$core_SLASH_fnil,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$fnil,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,4,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,4344,4344,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),"Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.",(cljs.core.truth_(cljs.core.fnil)?cljs.core.fnil.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.fnil;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23767 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23767,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23767;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.cond__GT__GT__STAR_),sci.impl.vars.pop_thread_bindings,sci.impl.protocols.satisfies_QMARK_,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.next;},cljs.core.cst$sym$cljs$core_SLASH_next,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$next,"cljs/core.cljs",16,1,1277,1277,cljs.core.cst$sym$seq,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil",((cljs.core.next)?cljs.core.next.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.next;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23768 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23768,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23768;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core._PLUS_;},cljs.core.cst$sym$cljs$core_SLASH__PLUS_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$_PLUS_,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),1,2614,2614,cljs.core.cst$sym$number,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the sum of nums. (+) returns 0.",(cljs.core.truth_(cljs.core._PLUS_)?cljs.core._PLUS_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core._PLUS_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23769 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23769,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23769;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.read.load_string,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.name;},cljs.core.cst$sym$cljs$core_SLASH_name,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$name,"cljs/core.cljs",11,1,9517,9517,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns the name String of a string, symbol or keyword.",(cljs.core.truth_(cljs.core.name)?cljs.core.name.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.name;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23770 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23770,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23770;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unchecked_double;},cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_double,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unchecked_DASH_double,"cljs/core.cljs",31,1,2729,2729,cljs.core.cst$sym$number,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.unchecked_double)?cljs.core.unchecked_double.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unchecked_double;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23771 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23771,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23771;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.when_let_STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.symbol_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_symbol_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$symbol_QMARK_,"cljs/core.cljs",23,1,1049,1049,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Return true if x is a Symbol",((cljs.core.symbol_QMARK_)?cljs.core.symbol_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.symbol_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23772 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23772,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23772;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.chunk_cons;},cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_cons,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$chunk_DASH_cons,"cljs/core.cljs",17,1,3634,3634,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$rest], null)),null,(cljs.core.truth_(cljs.core.chunk_cons)?cljs.core.chunk_cons.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.chunk_cons;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23773 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23773,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23773;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.namespaces.sci_ns_imports,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.methods$;},cljs.core.cst$sym$cljs$core_SLASH_methods,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$methods,"cljs/core.cljs",14,1,11249,11249,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null)),"Given a multimethod, returns a map of dispatch values -> dispatch fns",(cljs.core.truth_(cljs.core.methods$)?cljs.core.methods$.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.methods$;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23774 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23774,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23774;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.reset_meta_BANG_;},cljs.core.cst$sym$cljs$core_SLASH_reset_DASH_meta_BANG_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$reset_DASH_meta_BANG_,"cljs/core.cljs",18,1,10516,10516,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$m], null)),"Atomically resets the metadata for an atom",(cljs.core.truth_(cljs.core.reset_meta_BANG_)?cljs.core.reset_meta_BANG_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.reset_meta_BANG_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23775 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23775,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23775;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.js__GT_clj;},cljs.core.cst$sym$cljs$core_SLASH_js_DASH__GT_clj,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$js_DASH__GT_clj,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(1),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,10767,10767,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$opts], null)),"Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.",(cljs.core.truth_(cljs.core.js__GT_clj)?cljs.core.js__GT_clj.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.js__GT_clj;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23776 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23776,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23776;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.dotimes_STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.rand_int;},cljs.core.cst$sym$cljs$core_SLASH_rand_DASH_int,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$rand_DASH_int,"cljs/core.cljs",15,1,10839,10839,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),"Returns a random integer between 0 (inclusive) and n (exclusive).",(cljs.core.truth_(cljs.core.rand_int)?cljs.core.rand_int.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.rand_int;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23777 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23777,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23777;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.complement;},cljs.core.cst$sym$cljs$core_SLASH_complement,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$complement,"cljs/core.cljs",17,1,4272,4272,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),"Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.",(cljs.core.truth_(cljs.core.complement)?cljs.core.complement.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.complement;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23778 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23778,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23778;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.list_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_list_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$list_QMARK_,"cljs/core.cljs",12,1,3122,3122,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if x implements IList",(cljs.core.truth_(cljs.core.list_QMARK_)?cljs.core.list_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.list_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23779 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23779,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23779;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.aget;},cljs.core.cst$sym$cljs$core_SLASH_aget,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$aget,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,502,502,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),"Returns the value at the index/indices. Works on JavaScript arrays.",(cljs.core.truth_(cljs.core.aget)?cljs.core.aget.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.aget;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23780 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23780,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23780;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.zipmap;},cljs.core.cst$sym$cljs$core_SLASH_zipmap,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$zipmap,"cljs/core.cljs",13,1,9526,9526,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keys,cljs.core.cst$sym$vals], null)),"Returns a map with the keys mapped to the corresponding vals.",(cljs.core.truth_(cljs.core.zipmap)?cljs.core.zipmap.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.zipmap;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23781 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23781,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23781;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.namespaces.sci_find_var,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.run_BANG_;},cljs.core.cst$sym$cljs$core_SLASH_run_BANG_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$run_BANG_,"cljs/core.cljs",11,1,10711,10711,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proc,cljs.core.cst$sym$coll], null)),"Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil",(cljs.core.truth_(cljs.core.run_BANG_)?cljs.core.run_BANG_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.run_BANG_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23782 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23782,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23782;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core._EQ__EQ_;},cljs.core.cst$sym$cljs$core_SLASH__EQ__EQ_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$_EQ__EQ_,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,2934,2934,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.",((cljs.core._EQ__EQ_)?cljs.core._EQ__EQ_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core._EQ__EQ_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23783 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23783,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23783;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.chars;},cljs.core.cst$sym$cljs$core_SLASH_chars,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$chars,"cljs/core.cljs",12,1,2834,2834,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.chars)?cljs.core.chars.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.chars;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23784 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23784,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23784;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.iterate;},cljs.core.cst$sym$cljs$core_SLASH_iterate,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$added,cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],["1.0",cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$iterate,"cljs/core.cljs",14,1,5097,5097,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null)),"Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects",(cljs.core.truth_(cljs.core.iterate)?cljs.core.iterate.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.iterate;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23785 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23785,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23785;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.boolean$;},cljs.core.cst$sym$cljs$core_SLASH_boolean,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$boolean,"cljs/core.cljs",14,1,2262,2262,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Coerce to boolean",(cljs.core.truth_(cljs.core.boolean$)?cljs.core.boolean$.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.boolean$;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23786 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23786,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23786;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.hash_map;},cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_map,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$hash_DASH_map,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(0),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),1,8901,8901,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"keyval => key val\n  Returns a new hash map with supplied mappings.",(cljs.core.truth_(cljs.core.hash_map)?cljs.core.hash_map.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.hash_map;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23787 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23787,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23787;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unchecked_inc;},cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_inc,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unchecked_DASH_inc,"cljs/core.cljs",20,1,2762,2762,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.unchecked_inc)?cljs.core.unchecked_inc.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unchecked_inc;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23788 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23788,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23788;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.max_key;},cljs.core.cst$sym$cljs$core_SLASH_max_DASH_key,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$max_DASH_key,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(3),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,9538,9538,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the x for which (k x), a number, is greatest.\n\n  If there are multiple such xs, the last one is returned.",(cljs.core.truth_(cljs.core.max_key)?cljs.core.max_key.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.max_key;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23789 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23789,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23789;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.qualified_ident_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_qualified_DASH_ident_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$qualified_DASH_ident_QMARK_,"cljs/core.cljs",23,1,3384,3384,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Return true if x is a symbol or keyword with a namespace",(cljs.core.truth_(cljs.core.qualified_ident_QMARK_)?cljs.core.qualified_ident_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.qualified_ident_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23790 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23790,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23790;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.coll_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_coll_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$coll_QMARK_,"cljs/core.cljs",12,1,2133,2133,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if x satisfies ICollection",(cljs.core.truth_(cljs.core.coll_QMARK_)?cljs.core.coll_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.coll_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23791 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23791,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23791;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.reversible_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_reversible_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$reversible_QMARK_,"cljs/core.cljs",18,1,3200,3200,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns true if coll satisfies? IReversible.",(cljs.core.truth_(cljs.core.reversible_QMARK_)?cljs.core.reversible_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.reversible_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23792 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23792,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23792;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.namespaces.sci_ns_unmap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.apply;},cljs.core.cst$sym$cljs$core_SLASH_apply,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$apply,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(5),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(5),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),1,3939,3939,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"Applies fn f to the argument list formed by prepending intervening arguments to args.",(cljs.core.truth_(cljs.core.apply)?cljs.core.apply.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.apply;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23793 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23793,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23793;
}
})(),false);
})(),sci.impl.io.in$,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.subvec;},cljs.core.cst$sym$cljs$core_SLASH_subvec,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$subvec,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,3,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,5989,5989,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),"Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.",(cljs.core.truth_(cljs.core.subvec)?cljs.core.subvec.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.subvec;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23794 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23794,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23794;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.hierarchies.isa_QMARK__STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.not_every_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_not_DASH_every_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$not_DASH_every_QMARK_,"cljs/core.cljs",17,1,4243,4243,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns false if (pred x) is logical true for every x in\n  coll, else true.",(cljs.core.truth_(cljs.core.not_every_QMARK_)?cljs.core.not_every_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.not_every_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23795 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23795,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23795;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return sci.impl.namespaces.ex_cause;},cljs.core.cst$sym$sci$impl$namespaces_SLASH_ex_DASH_cause,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.with_meta(cljs.core.cst$sym$sci$impl$namespaces,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$no_DASH_doc,true], null)),cljs.core.cst$sym$ex_DASH_cause,"resources/public/cljs-out/dev/sci/impl/namespaces.cljc",14,1,255,255,cljs.core.List.EMPTY,null,(cljs.core.truth_(sci.impl.namespaces.ex_cause)?sci.impl.namespaces.ex_cause.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = sci.impl.namespaces.ex_cause;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23796 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23796,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23796;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.keyword_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_keyword_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$keyword_QMARK_,"cljs/core.cljs",15,1,3346,3346,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Return true if x is a Keyword",(cljs.core.truth_(cljs.core.keyword_QMARK_)?cljs.core.keyword_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.keyword_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23797 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23797,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23797;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.ex_data;},cljs.core.cst$sym$cljs$core_SLASH_ex_DASH_data,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$ex_DASH_data,"cljs/core.cljs",14,1,11368,11368,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null)),"Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.",(cljs.core.truth_(cljs.core.ex_data)?cljs.core.ex_data.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.ex_data;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23798 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23798,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23798;
}
})(),false);
})(),sci.impl.io.print_namespace_maps,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.compare;},cljs.core.cst$sym$cljs$core_SLASH_compare,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$compare,"cljs/core.cljs",22,1,2391,2391,cljs.core.cst$sym$number,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),"Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.",(cljs.core.truth_(cljs.core.compare)?cljs.core.compare.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.compare;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23799 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23799,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23799;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.hierarchies.underive_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.transduce;},cljs.core.cst$sym$cljs$core_SLASH_transduce,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$transduce,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,4,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,2596,2596,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),"reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.",(cljs.core.truth_(cljs.core.transduce)?cljs.core.transduce.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.transduce;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23800 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23800,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23800;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.range;},cljs.core.cst$sym$cljs$core_SLASH_range,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$range,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,3,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),1,9801,9801,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),"Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.",(cljs.core.truth_(cljs.core.range)?cljs.core.range.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.range;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23801 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23801,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23801;
}
})(),false);
})(),sci.impl.core_protocols.deref_protocol,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.sorted_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_sorted_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$sorted_QMARK_,"cljs/core.cljs",14,1,2159,2159,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if coll satisfies ISorted",(cljs.core.truth_(cljs.core.sorted_QMARK_)?cljs.core.sorted_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.sorted_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23802 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23802,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23802;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.frequencies;},cljs.core.cst$sym$cljs$core_SLASH_frequencies,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$frequencies,"cljs/core.cljs",18,1,9892,9892,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns a map from distinct items in coll to the number of times\n  they appear.",(cljs.core.truth_(cljs.core.frequencies)?cljs.core.frequencies.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.frequencies;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23803 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23803,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23803;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.cycle;},cljs.core.cst$sym$cljs$core_SLASH_cycle,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$cycle,"cljs/core.cljs",12,1,4909,4909,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns a lazy (infinite!) sequence of repetitions of the items in coll.",(cljs.core.truth_(cljs.core.cycle)?cljs.core.cycle.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.cycle;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23804 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23804,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23804;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.max;},cljs.core.cst$sym$cljs$core_SLASH_max,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$max,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,2697,2697,cljs.core.cst$sym$number,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the greatest of the nums.",(cljs.core.truth_(cljs.core.max)?cljs.core.max.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.max;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23805 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23805,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23805;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.simple_symbol_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_simple_DASH_symbol_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$simple_DASH_symbol_QMARK_,"cljs/core.cljs",21,1,3388,3388,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Return true if x is a symbol without a namespace",(cljs.core.truth_(cljs.core.simple_symbol_QMARK_)?cljs.core.simple_symbol_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.simple_symbol_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23806 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23806,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23806;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.reify.reify,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$sci_SLASH_macro,true,cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.empty_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_empty_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$empty_QMARK_,"cljs/core.cljs",13,1,2127,2127,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))",(cljs.core.truth_(cljs.core.empty_QMARK_)?cljs.core.empty_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.empty_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23807 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23807,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23807;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.into;},cljs.core.cst$sym$cljs$core_SLASH_into,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$into,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,3,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),1,5224,5224,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),"Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.",(cljs.core.truth_(cljs.core.into)?cljs.core.into.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.into;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23808 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23808,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23808;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.integer_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_integer_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$integer_QMARK_,"cljs/core.cljs",15,1,2275,2275,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),"Returns true if n is a JavaScript number with no decimal part.",(cljs.core.truth_(cljs.core.integer_QMARK_)?cljs.core.integer_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.integer_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23809 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23809,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23809;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core._STAR_;},cljs.core.cst$sym$cljs$core_SLASH__STAR_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$_STAR_,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),1,2629,2629,cljs.core.cst$sym$number,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the product of nums. (*) returns 1.",(cljs.core.truth_(cljs.core._STAR_)?cljs.core._STAR_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core._STAR_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23810 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23810,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23810;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.some__GT__GT__STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unsigned_bit_shift_right;},cljs.core.cst$sym$cljs$core_SLASH_unsigned_DASH_bit_DASH_shift_DASH_right,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unsigned_DASH_bit_DASH_shift_DASH_right,"cljs/core.cljs",31,1,2923,2923,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),"Bitwise shift right with zero fill",(cljs.core.truth_(cljs.core.unsigned_bit_shift_right)?cljs.core.unsigned_bit_shift_right.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unsigned_bit_shift_right;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23811 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23811,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23811;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return sci.impl.io.pr_str;},cljs.core.cst$sym$sci$impl$io_SLASH_pr_DASH_str,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$sci$impl$io,cljs.core.cst$sym$pr_DASH_str,"resources/public/cljs-out/dev/sci/impl/io.cljc",16,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(0),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),4,92,92,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"pr to a string, returning it",(cljs.core.truth_(sci.impl.io.pr_str)?sci.impl.io.pr_str.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = sci.impl.io.pr_str;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23812 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23812,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23812;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.some__GT__STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.chunk;},cljs.core.cst$sym$cljs$core_SLASH_chunk,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$chunk,"cljs/core.cljs",12,1,3642,3642,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b], null)),null,(cljs.core.truth_(cljs.core.chunk)?cljs.core.chunk.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.chunk;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23813 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23813,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23813;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.cond_STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.distinct;},cljs.core.cst$sym$cljs$core_SLASH_distinct,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$distinct,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,1,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,9483,9483,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the elements of coll with duplicates removed.\n  Returns a stateful transducer when no collection is provided.",(cljs.core.truth_(cljs.core.distinct)?cljs.core.distinct.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.distinct;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23814 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23814,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23814;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.ensure_reduced;},cljs.core.cst$sym$cljs$core_SLASH_ensure_DASH_reduced,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$ensure_DASH_reduced,"cljs/core.cljs",21,1,1457,1457,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"If x is already reduced?, returns it, else returns (reduced x)",(cljs.core.truth_(cljs.core.ensure_reduced)?cljs.core.ensure_reduced.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.ensure_reduced;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23815 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23815,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23815;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.object_array;},cljs.core.cst$sym$cljs$core_SLASH_object_DASH_array,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$object_DASH_array,"cljs/core.cljs",19,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,3745,3745,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),"Creates an array of objects. Does not coerce array, provided for compatibility\n  with Clojure.",(cljs.core.truth_(cljs.core.object_array)?cljs.core.object_array.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.object_array;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23816 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23816,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23816;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.juxt;},cljs.core.cst$sym$cljs$core_SLASH_juxt,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$juxt,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(3),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),1,9917,9917,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),"Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]",(cljs.core.truth_(cljs.core.juxt)?cljs.core.juxt.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.juxt;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23817 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23817,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23817;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.some;},cljs.core.cst$sym$cljs$core_SLASH_some,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$some,"cljs/core.cljs",11,1,4248,4248,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)",(cljs.core.truth_(cljs.core.some)?cljs.core.some.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.some;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23818 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23818,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23818;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.interpose;},cljs.core.cst$sym$cljs$core_SLASH_interpose,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$interpose,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,5118,5118,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),"Returns a lazy seq of the elements of coll separated by sep.\n  Returns a stateful transducer when no collection is provided.",(cljs.core.truth_(cljs.core.interpose)?cljs.core.interpose.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.interpose;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23819 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23819,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23819;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.namespaces.sci_the_ns,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),sci.impl.protocols.instance_impl,cljs.core.with_meta(sci.impl.hierarchies.descendants_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.get_in;},cljs.core.cst$sym$cljs$core_SLASH_get_DASH_in,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$added,cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$static,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],["1.2",cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$get_DASH_in,"cljs/core.cljs",13,true,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,3,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,5287,5287,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),"Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.",(cljs.core.truth_(cljs.core.get_in)?cljs.core.get_in.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.get_in;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23820 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23820,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23820;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.meta;},cljs.core.cst$sym$cljs$core_SLASH_meta,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$meta,"cljs/core.cljs",11,1,2091,2091,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),"Returns the metadata of obj, returns nil if there is no metadata.",(cljs.core.truth_(cljs.core.meta)?cljs.core.meta.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.meta;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23821 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23821,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23821;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.reify.reify_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),cljs.core.with_meta(sci.impl.records.defrecord,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$sci_SLASH_macro,true,cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.val;},cljs.core.cst$sym$cljs$core_SLASH_val,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$val,"cljs/core.cljs",10,1,9104,9104,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map_DASH_entry], null)),"Returns the value in the map entry.",(cljs.core.truth_(cljs.core.val)?cljs.core.val.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.val;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23822 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23822,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23822;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.read.read_string,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.assoc_in;},cljs.core.cst$sym$cljs$core_SLASH_assoc_DASH_in,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$assoc_DASH_in,"cljs/core.cljs",15,1,5306,5306,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$v], null)),"Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.",(cljs.core.truth_(cljs.core.assoc_in)?cljs.core.assoc_in.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.assoc_in;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23823 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23823,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23823;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.zero_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_zero_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$zero_QMARK_,"cljs/core.cljs",21,1,2951,2951,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if num is zero, else false",((cljs.core.zero_QMARK_)?cljs.core.zero_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.zero_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23824 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23824,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23824;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.transient$;},cljs.core.cst$sym$cljs$core_SLASH_transient,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$transient,"cljs/core.cljs",16,1,3826,3826,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns a new, transient version of the collection, in constant time.",(cljs.core.truth_(cljs.core.transient$)?cljs.core.transient$.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.transient$;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23825 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23825,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23825;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.letfn_STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.realized_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_realized_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$realized_QMARK_,"cljs/core.cljs",25,1,10597,10597,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if a value has been produced for a delay or lazy sequence.",((cljs.core.realized_QMARK_)?cljs.core.realized_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.realized_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23826 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23826,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23826;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.list_STAR_;},cljs.core.cst$sym$cljs$core_SLASH_list_STAR_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$list_STAR_,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(4),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),1,3813,3813,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.",(cljs.core.truth_(cljs.core.list_STAR_)?cljs.core.list_STAR_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.list_STAR_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23827 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23827,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23827;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.namespaces.sci_ns_interns,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.memoize;},cljs.core.cst$sym$cljs$core_SLASH_memoize,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$memoize,"cljs/core.cljs",14,1,10802,10802,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),"Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.",(cljs.core.truth_(cljs.core.memoize)?cljs.core.memoize.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.memoize;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23828 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23828,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23828;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.subseq;},cljs.core.cst$sym$cljs$core_SLASH_subseq,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$subseq,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,5,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,9623,9623,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true",(cljs.core.truth_(cljs.core.subseq)?cljs.core.subseq.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.subseq;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23829 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23829,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23829;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.completing;},cljs.core.cst$sym$cljs$core_SLASH_completing,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$completing,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,2585,2585,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),"Takes a reducing function f of 2 args and returns a fn suitable for\n  transduce by adding an arity-1 signature that calls cf (default -\n  identity) on the result argument.",(cljs.core.truth_(cljs.core.completing)?cljs.core.completing.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.completing;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23830 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23830,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23830;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unchecked_divide_int;},cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_divide_DASH_int,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unchecked_DASH_divide_DASH_int,"cljs/core.cljs",35,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,2755,2755,cljs.core.cst$sym$number,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.",(cljs.core.truth_(cljs.core.unchecked_divide_int)?cljs.core.unchecked_divide_int.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unchecked_divide_int;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23831 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23831,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23831;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.shuffle;},cljs.core.cst$sym$cljs$core_SLASH_shuffle,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$shuffle,"cljs/core.cljs",14,1,2490,2490,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Return a random permutation of coll",(cljs.core.truth_(cljs.core.shuffle)?cljs.core.shuffle.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.shuffle;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23832 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23832,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23832;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.namespaces.sci_ns_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return sci.impl.io.prn_str;},cljs.core.cst$sym$sci$impl$io_SLASH_prn_DASH_str,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$sci$impl$io,cljs.core.cst$sym$prn_DASH_str,"resources/public/cljs-out/dev/sci/impl/io.cljc",17,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(0),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),4,127,127,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"pr to a string, returning it",(cljs.core.truth_(sci.impl.io.prn_str)?sci.impl.io.prn_str.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = sci.impl.io.prn_str;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23833 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23833,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23833;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.defn__STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.compare_and_set_BANG_;},cljs.core.cst$sym$cljs$core_SLASH_compare_DASH_and_DASH_set_BANG_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$compare_DASH_and_DASH_set_BANG_,"cljs/core.cljs",23,1,4547,4547,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)),"Atomically sets the value of atom to newval if and only if the\n  current value of the atom is equal to oldval. Returns true if\n  set happened, else false.",(cljs.core.truth_(cljs.core.compare_and_set_BANG_)?cljs.core.compare_and_set_BANG_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.compare_and_set_BANG_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23834 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23834,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23834;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.namespaces.use,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.longs;},cljs.core.cst$sym$cljs$core_SLASH_longs,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$longs,"cljs/core.cljs",12,1,2839,2839,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.longs)?cljs.core.longs.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.longs;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23835 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23835,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23835;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.namespaces.sci_remove_ns,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unchecked_int;},cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_int,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unchecked_DASH_int,"cljs/core.cljs",20,1,2817,2817,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Coerce to int by stripping decimal places.",(cljs.core.truth_(cljs.core.unchecked_int)?cljs.core.unchecked_int.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unchecked_int;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23836 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23836,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23836;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.nthrest;},cljs.core.cst$sym$cljs$core_SLASH_nthrest,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$nthrest,"cljs/core.cljs",14,1,1941,1941,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null)),"Returns the nth rest of coll, coll when n is 0.",(cljs.core.truth_(cljs.core.nthrest)?cljs.core.nthrest.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.nthrest;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23837 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23837,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23837;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.doubles;},cljs.core.cst$sym$cljs$core_SLASH_doubles,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$doubles,"cljs/core.cljs",14,1,2838,2838,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.doubles)?cljs.core.doubles.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.doubles;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23838 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23838,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23838;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.remove_method;},cljs.core.cst$sym$cljs$core_SLASH_remove_DASH_method,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$remove_DASH_method,"cljs/core.cljs",20,1,11238,11238,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null)),"Removes the method of multimethod associated with dispatch-value.",(cljs.core.truth_(cljs.core.remove_method)?cljs.core.remove_method.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.remove_method;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23839 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23839,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23839;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.protocols.extend,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.nnext;},cljs.core.cst$sym$cljs$core_SLASH_nnext,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$nnext,"cljs/core.cljs",12,1,1777,1777,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Same as (next (next x))",(cljs.core.truth_(cljs.core.nnext)?cljs.core.nnext.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.nnext;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23840 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23840,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23840;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.dec;},cljs.core.cst$sym$cljs$core_SLASH_dec,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$dec,"cljs/core.cljs",10,1,2693,2693,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns a number one less than num.",(cljs.core.truth_(cljs.core.dec)?cljs.core.dec.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.dec;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23841 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23841,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23841;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.qualified_keyword_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_qualified_DASH_keyword_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$qualified_DASH_keyword_QMARK_,"cljs/core.cljs",25,1,3400,3400,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Return true if x is a keyword with a namespace",(cljs.core.truth_(cljs.core.qualified_keyword_QMARK_)?cljs.core.qualified_keyword_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.qualified_keyword_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23842 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23842,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23842;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.comparator;},cljs.core.cst$sym$cljs$core_SLASH_comparator,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$comparator,"cljs/core.cljs",17,1,11390,11390,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null)),"Returns an JavaScript compatible comparator based upon pred.",(cljs.core.truth_(cljs.core.comparator)?cljs.core.comparator.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.comparator;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23843 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23843,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23843;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.take_last;},cljs.core.cst$sym$cljs$core_SLASH_take_DASH_last,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$take_DASH_last,"cljs/core.cljs",16,1,4814,4814,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.",(cljs.core.truth_(cljs.core.take_last)?cljs.core.take_last.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.take_last;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23844 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23844,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23844;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.namespaces.sci_find_ns,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.string_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_string_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$string_QMARK_,"cljs/core.cljs",23,1,271,271,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if x is a JavaScript string.",((cljs.core.string_QMARK_)?cljs.core.string_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.string_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23845 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23845,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23845;
}
})(),false);
})(),sci.impl.io.print,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.bit_xor;},cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_xor,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$bit_DASH_xor,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,2863,2863,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Bitwise exclusive or",(cljs.core.truth_(cljs.core.bit_xor)?cljs.core.bit_xor.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.bit_xor;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23846 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23846,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23846;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.map;},cljs.core.cst$sym$cljs$core_SLASH_map,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$map,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(4),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),1,4710,4710,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),"Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.",(cljs.core.truth_(cljs.core.map)?cljs.core.map.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.map;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23847 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23847,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23847;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.float$;},cljs.core.cst$sym$cljs$core_SLASH_float,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$float,"cljs/core.cljs",20,1,2722,2722,cljs.core.cst$sym$number,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.float$)?cljs.core.float$.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.float$;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23848 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23848,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23848;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.chunk_append;},cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_append,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$chunk_DASH_append,"cljs/core.cljs",19,1,3639,3639,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b,cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.chunk_append)?cljs.core.chunk_append.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.chunk_append;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23849 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23849,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23849;
}
})(),false);
})(),sci.impl.core_protocols.deref_STAR_,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.re_pattern;},cljs.core.cst$sym$cljs$core_SLASH_re_DASH_pattern,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$re_DASH_pattern,"cljs/core.cljs",17,1,10034,10034,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),"Returns an instance of RegExp which has compiled the provided string.",(cljs.core.truth_(cljs.core.re_pattern)?cljs.core.re_pattern.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.re_pattern;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23850 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23850,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23850;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.repeat;},cljs.core.cst$sym$cljs$core_SLASH_repeat,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$repeat,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,5017,5017,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),"Returns a lazy (infinite!, or length n if supplied) sequence of xs.",(cljs.core.truth_(cljs.core.repeat)?cljs.core.repeat.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.repeat;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23851 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23851,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23851;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.reduce;},cljs.core.cst$sym$cljs$core_SLASH_reduce,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$reduce,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,3,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,2520,2520,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),"f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.",(cljs.core.truth_(cljs.core.reduce)?cljs.core.reduce.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.reduce;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23852 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23852,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23852;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.qualified_symbol_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_qualified_DASH_symbol_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$qualified_DASH_symbol_QMARK_,"cljs/core.cljs",24,1,3392,3392,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Return true if x is a symbol with a namespace",(cljs.core.truth_(cljs.core.qualified_symbol_QMARK_)?cljs.core.qualified_symbol_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.qualified_symbol_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23853 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23853,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23853;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.read.eval,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.vector;},cljs.core.cst$sym$cljs$core_SLASH_vector,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$vector,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(0),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),1,5737,5737,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"Creates a new vector containing the args.",(cljs.core.truth_(cljs.core.vector)?cljs.core.vector.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.vector;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23854 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23854,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23854;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.doall;},cljs.core.cst$sym$cljs$core_SLASH_doall,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$doall,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,9966,9966,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.",(cljs.core.truth_(cljs.core.doall)?cljs.core.doall.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.doall;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23855 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23855,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23855;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.assoc_BANG_;},cljs.core.cst$sym$cljs$core_SLASH_assoc_BANG_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$assoc_BANG_,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(3),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,3851,3851,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),"When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.",(cljs.core.truth_(cljs.core.assoc_BANG_)?cljs.core.assoc_BANG_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.assoc_BANG_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23856 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23856,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23856;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.not_EQ_;},cljs.core.cst$sym$cljs$core_SLASH_not_EQ_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$not_EQ_,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,4005,4005,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Same as (not (= obj1 obj2))",((cljs.core.not_EQ_)?cljs.core.not_EQ_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.not_EQ_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23857 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23857,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23857;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.alter_meta_BANG_;},cljs.core.cst$sym$cljs$core_SLASH_alter_DASH_meta_BANG_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$alter_DASH_meta_BANG_,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),1,10507,10507,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects",(cljs.core.truth_(cljs.core.alter_meta_BANG_)?cljs.core.alter_meta_BANG_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.alter_meta_BANG_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23858 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23858,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23858;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.constantly;},cljs.core.cst$sym$cljs$core_SLASH_constantly,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$constantly,"cljs/core.cljs",17,1,4282,4282,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns a function that takes any number of arguments and returns x.",(cljs.core.truth_(cljs.core.constantly)?cljs.core.constantly.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.constantly;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23859 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23859,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23859;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.seq_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_seq_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$seq_QMARK_,"cljs/core.cljs",11,1,2246,2246,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),"Return true if s satisfies ISeq",(cljs.core.truth_(cljs.core.seq_QMARK_)?cljs.core.seq_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.seq_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23860 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23860,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23860;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.get;},cljs.core.cst$sym$cljs$core_SLASH_get,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$get,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,3,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,1949,1949,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),"Returns the value mapped to key, not-found or nil if key not present.",(cljs.core.truth_(cljs.core.get)?cljs.core.get.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.get;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23861 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23861,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23861;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.namespaces.require,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.key;},cljs.core.cst$sym$cljs$core_SLASH_key,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$key,"cljs/core.cljs",10,1,9025,9025,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map_DASH_entry], null)),"Returns the key of the map entry.",(cljs.core.truth_(cljs.core.key)?cljs.core.key.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.key;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23862 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23862,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23862;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.bit_and_not;},cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_and_DASH_not,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$bit_DASH_and_DASH_not,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,2881,2881,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Bitwise and with complement",(cljs.core.truth_(cljs.core.bit_and_not)?cljs.core.bit_and_not.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.bit_and_not;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23863 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23863,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23863;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.mapcat;},cljs.core.cst$sym$cljs$core_SLASH_mapcat,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$added,cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$static,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],["1.0",cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$mapcat,"cljs/core.cljs",13,true,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(1),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,5154,5154,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),"Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided",(cljs.core.truth_(cljs.core.mapcat)?cljs.core.mapcat.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.mapcat;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23864 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23864,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23864;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.cond__GT__STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.nat_int_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_nat_DASH_int_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$nat_DASH_int_QMARK_,"cljs/core.cljs",15,1,2321,2321,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Return true if x satisfies int? and is a natural integer value.",(cljs.core.truth_(cljs.core.nat_int_QMARK_)?cljs.core.nat_int_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.nat_int_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23865 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23865,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23865;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.get_method;},cljs.core.cst$sym$cljs$core_SLASH_get_DASH_method,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$get_DASH_method,"cljs/core.cljs",17,1,11253,11253,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null)),"Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default",(cljs.core.truth_(cljs.core.get_method)?cljs.core.get_method.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.get_method;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23866 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23866,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23866;
}
})(),false);
})(),sci.impl.io.out,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.str;},cljs.core.cst$sym$cljs$core_SLASH_str,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$str,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(1),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,2972,2972,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ys], null)),"With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.",(cljs.core.truth_(cljs.core.str)?cljs.core.str.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.str;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23867 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23867,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23867;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.empty;},cljs.core.cst$sym$cljs$core_SLASH_empty,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$empty,"cljs/core.cljs",12,1,1809,1809,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns an empty collection of the same category as coll, or nil",(cljs.core.truth_(cljs.core.empty)?cljs.core.empty.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.empty;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23868 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23868,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23868;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.counted_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_counted_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$counted_QMARK_,"cljs/core.cljs",15,1,1534,1534,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if coll implements count in constant time",(cljs.core.truth_(cljs.core.counted_QMARK_)?cljs.core.counted_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.counted_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23869 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23869,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23869;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.set_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_set_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$set_QMARK_,"cljs/core.cljs",11,1,2140,2140,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if x satisfies ISet",(cljs.core.truth_(cljs.core.set_QMARK_)?cljs.core.set_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.set_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23870 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23870,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23870;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.alength;},cljs.core.cst$sym$cljs$core_SLASH_alength,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$alength,"cljs/core.cljs",22,1,517,517,cljs.core.cst$sym$number,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null)),"Returns the length of the array. Works on arrays of all types.",(cljs.core.truth_(cljs.core.alength)?cljs.core.alength.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.alength;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23871 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23871,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23871;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.filterv;},cljs.core.cst$sym$cljs$core_SLASH_filterv,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$filterv,"cljs/core.cljs",14,1,5256,5256,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns a vector of the items in coll for which\n  (pred item) returns logical true. pred must be free of side-effects.",(cljs.core.truth_(cljs.core.filterv)?cljs.core.filterv.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.filterv;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23872 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23872,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23872;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.reductions;},cljs.core.cst$sym$cljs$core_SLASH_reductions,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$reductions,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,3,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,9901,9901,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),"Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.",(cljs.core.truth_(cljs.core.reductions)?cljs.core.reductions.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.reductions;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23873 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23873,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23873;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.booleans;},cljs.core.cst$sym$cljs$core_SLASH_booleans,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$booleans,"cljs/core.cljs",15,1,2832,2832,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.booleans)?cljs.core.booleans.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.booleans;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23874 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23874,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23874;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core._LT_;},cljs.core.cst$sym$cljs$core_SLASH__LT_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$_LT_,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,2645,2645,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.",((cljs.core._LT_)?cljs.core._LT_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core._LT_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23875 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23875,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23875;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.reduced;},cljs.core.cst$sym$cljs$core_SLASH_reduced,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$reduced,"cljs/core.cljs",14,1,1447,1447,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Wraps x in a way such that a reduce will terminate with the value x",(cljs.core.truth_(cljs.core.reduced)?cljs.core.reduced.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.reduced;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23876 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23876,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23876;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.namespace;},cljs.core.cst$sym$cljs$core_SLASH_namespace,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$namespace,"cljs/core.cljs",16,1,3369,3369,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns the namespace String of a symbol or keyword, or nil if not present.",(cljs.core.truth_(cljs.core.namespace)?cljs.core.namespace.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.namespace;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23877 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23877,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23877;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.keyword;},cljs.core.cst$sym$cljs$core_SLASH_keyword,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$keyword,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,3404,3404,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),"Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.",(cljs.core.truth_(cljs.core.keyword)?cljs.core.keyword.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.keyword;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23878 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23878,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23878;
}
})(),false);
})(),sci.impl.records.sci_record_QMARK_,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.tagged_literal_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_tagged_DASH_literal_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$tagged_DASH_literal_QMARK_,"cljs/core.cljs",22,1,11444,11444,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)),"Return true if the value is the data representation of a tagged literal",(cljs.core.truth_(cljs.core.tagged_literal_QMARK_)?cljs.core.tagged_literal_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.tagged_literal_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23879 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23879,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23879;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core._;},cljs.core.cst$sym$cljs$core_SLASH__DASH_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$_DASH_,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,2622,2622,cljs.core.cst$sym$number,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",(cljs.core.truth_(cljs.core._)?cljs.core._.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core._;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23880 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23880,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23880;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.bit_and;},cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_and,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$bit_DASH_and,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,2869,2869,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Bitwise and",(cljs.core.truth_(cljs.core.bit_and)?cljs.core.bit_and.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.bit_and;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23881 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23881,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23881;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unreduced;},cljs.core.cst$sym$cljs$core_SLASH_unreduced,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unreduced,"cljs/core.cljs",16,1,1462,1462,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"If x is reduced?, returns (deref x), else returns x",(cljs.core.truth_(cljs.core.unreduced)?cljs.core.unreduced.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unreduced;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23882 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23882,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23882;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.assoc;},cljs.core.cst$sym$cljs$core_SLASH_assoc,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$assoc,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(3),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,1993,1993,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),"assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index. Note - index must be <= (count vector).",(cljs.core.truth_(cljs.core.assoc)?cljs.core.assoc.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.assoc;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23883 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23883,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23883;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.multimethods.defmulti,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$sci_SLASH_macro,true,cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.partition_all;},cljs.core.cst$sym$cljs$core_SLASH_partition_DASH_all,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$partition_DASH_all,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,3,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,9567,9567,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.",(cljs.core.truth_(cljs.core.partition_all)?cljs.core.partition_all.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.partition_all;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23884 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23884,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23884;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.bit_not;},cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_not,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$bit_DASH_not,"cljs/core.cljs",14,1,2897,2897,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Bitwise complement",(cljs.core.truth_(cljs.core.bit_not)?cljs.core.bit_not.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.bit_not;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23885 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23885,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23885;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.some_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_some_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$some_QMARK_,"cljs/core.cljs",21,1,260,260,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if x is not nil, false otherwise.",((cljs.core.some_QMARK_)?cljs.core.some_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.some_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23886 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23886,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23886;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.pos_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_pos_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$pos_QMARK_,"cljs/core.cljs",20,1,2947,2947,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if num is greater than zero, else false",((cljs.core.pos_QMARK_)?cljs.core.pos_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.pos_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23887 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23887,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23887;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.trampoline;},cljs.core.cst$sym$cljs$core_SLASH_trampoline,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$trampoline,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(1),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,10817,10817,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.",(cljs.core.truth_(cljs.core.trampoline)?cljs.core.trampoline.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.trampoline;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23888 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23888,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23888;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.rand;},cljs.core.cst$sym$cljs$core_SLASH_rand,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$rand,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,1,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,10833,10833,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),"Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).",(cljs.core.truth_(cljs.core.rand)?cljs.core.rand.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.rand;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23889 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23889,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23889;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.re_matches;},cljs.core.cst$sym$cljs$core_SLASH_re_DASH_matches,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$re_DASH_matches,"cljs/core.cljs",17,1,9987,9987,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null)),"Returns the result of (re-find re s) if re fully matches s.",(cljs.core.truth_(cljs.core.re_matches)?cljs.core.re_matches.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.re_matches;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23890 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23890,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23890;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.boolean_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_boolean_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$boolean_QMARK_,"cljs/core.cljs",15,1,2237,2237,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Return true if x is a Boolean",(cljs.core.truth_(cljs.core.boolean_QMARK_)?cljs.core.boolean_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.boolean_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23891 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23891,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23891;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.every_pred;},cljs.core.cst$sym$cljs$core_SLASH_every_DASH_pred,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$every_DASH_pred,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(3),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),1,4632,4632,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),"Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.",(cljs.core.truth_(cljs.core.every_pred)?cljs.core.every_pred.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.every_pred;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23892 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23892,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23892;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.fn_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_fn_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$fn_QMARK_,"cljs/core.cljs",10,1,2024,2024,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),"Return true if f is a JavaScript function or satisfies the Fn protocol.",(cljs.core.truth_(cljs.core.fn_QMARK_)?cljs.core.fn_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.fn_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23893 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23893,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23893;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.sequential_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_sequential_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$sequential_QMARK_,"cljs/core.cljs",18,1,2155,2155,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if coll satisfies ISequential",(cljs.core.truth_(cljs.core.sequential_QMARK_)?cljs.core.sequential_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.sequential_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23894 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23894,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23894;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.list;},cljs.core.cst$sym$cljs$core_SLASH_list,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$list,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(0),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),1,3218,3218,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),"Creates a new list containing the items.",(cljs.core.truth_(cljs.core.list)?cljs.core.list.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.list;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23895 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23895,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23895;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.sorted_set_by;},cljs.core.cst$sym$cljs$core_SLASH_sorted_DASH_set_DASH_by,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$sorted_DASH_set_DASH_by,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(1),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keys)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),1,9459,9459,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),"Returns a new sorted set with supplied keys, using the supplied comparator.",(cljs.core.truth_(cljs.core.sorted_set_by)?cljs.core.sorted_set_by.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.sorted_set_by;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23896 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23896,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23896;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.nthnext;},cljs.core.cst$sym$cljs$core_SLASH_nthnext,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$nthnext,"cljs/core.cljs",14,1,2962,2962,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null)),"Returns the nth next of coll, (seq coll) when n is 0.",(cljs.core.truth_(cljs.core.nthnext)?cljs.core.nthnext.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.nthnext;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23897 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23897,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23897;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.eduction;},cljs.core.cst$sym$cljs$core_SLASH_eduction,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$eduction,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(0),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xforms)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xforms], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),1,10702,10702,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xforms], null)),"Returns a reducible/iterable application of the transducers\n  to the items in coll. Transducers are applied in order as if\n  combined with comp. Note that these applications will be\n  performed every time reduce/iterator is called.",(cljs.core.truth_(cljs.core.eduction)?cljs.core.eduction.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.eduction;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23898 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23898,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23898;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.rand_nth;},cljs.core.cst$sym$cljs$core_SLASH_rand_DASH_nth,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$rand_DASH_nth,"cljs/core.cljs",15,1,10843,10843,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.",(cljs.core.truth_(cljs.core.rand_nth)?cljs.core.rand_nth.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.rand_nth;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23899 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23899,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23899;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.delay_STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.partial;},cljs.core.cst$sym$cljs$core_SLASH_partial,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$partial,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(4),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),1,4315,4315,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.",(cljs.core.truth_(cljs.core.partial)?cljs.core.partial.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.partial;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23900 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23900,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23900;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.sci_with_bindings),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.rsubseq;},cljs.core.cst$sym$cljs$core_SLASH_rsubseq,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$rsubseq,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,5,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,9638,9638,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true",(cljs.core.truth_(cljs.core.rsubseq)?cljs.core.rsubseq.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.rsubseq;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23901 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23901,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23901;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.contains_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_contains_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$contains_QMARK_,"cljs/core.cljs",16,1,2352,2352,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)),"Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.",(cljs.core.truth_(cljs.core.contains_QMARK_)?cljs.core.contains_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.contains_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23902 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23902,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23902;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.__GT__STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.shorts;},cljs.core.cst$sym$cljs$core_SLASH_shorts,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$shorts,"cljs/core.cljs",13,1,2835,2835,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.shorts)?cljs.core.shorts.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.shorts;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23903 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23903,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23903;
}
})(),false);
})(),sci.impl.core_protocols.swap_protocol,sci.impl.namespaces.macrofy(sci.impl.namespaces.as__GT__STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.hash_set;},cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_set,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$hash_DASH_set,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(0),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,9448,9448,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),"Returns a new hash set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj.",(cljs.core.truth_(cljs.core.hash_set)?cljs.core.hash_set.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.hash_set;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23904 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23904,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23904;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.take;},cljs.core.cst$sym$cljs$core_SLASH_take,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$take,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,4757,4757,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.",(cljs.core.truth_(cljs.core.take)?cljs.core.take.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.take;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23905 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23905,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23905;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.if_let_STAR_),cljs.core.with_meta(sci.impl.namespaces.macroexpand_1_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.split_with;},cljs.core.cst$sym$cljs$core_SLASH_split_DASH_with,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$split_DASH_with,"cljs/core.cljs",17,1,9846,9846,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns a vector of [(take-while pred coll) (drop-while pred coll)]",(cljs.core.truth_(cljs.core.split_with)?cljs.core.split_with.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.split_with;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23906 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23906,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23906;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.namespaces.sci_refer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),sci.impl.vars.binding_conveyor_fn,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.make_hierarchy;},cljs.core.cst$sym$cljs$core_SLASH_make_DASH_hierarchy,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$make_DASH_hierarchy,"cljs/core.cljs",21,1,10862,10862,cljs.core.list(cljs.core.PersistentVector.EMPTY),"Creates a hierarchy object for use with derive, isa? etc.",(cljs.core.truth_(cljs.core.make_hierarchy)?cljs.core.make_hierarchy.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.make_hierarchy;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23907 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23907,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23907;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.tagged_literal;},cljs.core.cst$sym$cljs$core_SLASH_tagged_DASH_literal,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$tagged_DASH_literal,"cljs/core.cljs",21,1,11449,11449,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null)),"Construct a data representation of a tagged literal from a\n  tag symbol and a form.",(cljs.core.truth_(cljs.core.tagged_literal)?cljs.core.tagged_literal.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.tagged_literal;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23908 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23908,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23908;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return sci.impl.namespaces.has_root_impl;},cljs.core.cst$sym$sci$impl$namespaces_SLASH_has_DASH_root_DASH_impl,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.with_meta(cljs.core.cst$sym$sci$impl$namespaces,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$no_DASH_doc,true], null)),cljs.core.cst$sym$has_DASH_root_DASH_impl,"resources/public/cljs-out/dev/sci/impl/namespaces.cljc",20,1,365,365,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sci_DASH_var], null)),null,(cljs.core.truth_(sci.impl.namespaces.has_root_impl)?sci.impl.namespaces.has_root_impl.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = sci.impl.namespaces.has_root_impl;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23909 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23909,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23909;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.hierarchies.parents_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.vec;},cljs.core.cst$sym$cljs$core_SLASH_vec,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$vec,"cljs/core.cljs",10,1,5717,5717,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Creates a new vector containing the contents of coll. JavaScript arrays\n  will be aliased and should not be modified.",(cljs.core.truth_(cljs.core.vec)?cljs.core.vec.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.vec;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23910 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23910,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23910;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.nth;},cljs.core.cst$sym$cljs$core_SLASH_nth,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$nth,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,3,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,1869,1869,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),"Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.",(cljs.core.truth_(cljs.core.nth)?cljs.core.nth.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.nth;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23911 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23911,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23911;
}
})(),false);
})(),sci.impl.namespaces.clojure_core_ns,sci.impl.namespaces.macrofy(sci.impl.namespaces.lazy_cat_STAR_),sci.impl.namespaces.macrofy(sci.impl.namespaces.if_some_STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.subs;},cljs.core.cst$sym$cljs$core_SLASH_subs,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$subs,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,3,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,2986,2986,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),"Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.",(cljs.core.truth_(cljs.core.subs)?cljs.core.subs.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.subs;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23912 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23912,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23912;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return sci.impl.namespaces.symbol_STAR_;},cljs.core.cst$sym$sci$impl$namespaces_SLASH_symbol_STAR_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.with_meta(cljs.core.cst$sym$sci$impl$namespaces,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$no_DASH_doc,true], null)),cljs.core.cst$sym$symbol_STAR_,"resources/public/cljs-out/dev/sci/impl/namespaces.cljc",14,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,611,611,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),"Returns a Symbol with the given namespace and name. Arity-1 works\n  on strings, keywords, and vars.",(cljs.core.truth_(sci.impl.namespaces.symbol_STAR_)?sci.impl.namespaces.symbol_STAR_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = sci.impl.namespaces.symbol_STAR_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23913 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23913,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23913;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.mod;},cljs.core.cst$sym$cljs$core_SLASH_mod,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$mod,"cljs/core.cljs",10,1,2846,2846,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null)),"Modulus of num and div. Truncates toward negative infinity.",(cljs.core.truth_(cljs.core.mod)?cljs.core.mod.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.mod;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23914 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23914,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23914;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.number_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_number_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$number_QMARK_,"cljs/core.cljs",23,1,247,247,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if x is a JavaScript number.",((cljs.core.number_QMARK_)?cljs.core.number_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.number_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23915 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23915,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23915;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.reduced_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_reduced_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$reduced_QMARK_,"cljs/core.cljs",15,1,1452,1452,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$r], null)),"Returns true if x is the result of a call to reduced",(cljs.core.truth_(cljs.core.reduced_QMARK_)?cljs.core.reduced_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.reduced_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23916 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23916,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23916;
}
})(),false);
})(),(function (){
return sci.impl.vars.new_var.cljs$core$IFn$_invoke$arity$3(cljs.core.gensym.cljs$core$IFn$_invoke$arity$0(),null,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$dynamic,true], null));
}),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.conj;},cljs.core.cst$sym$cljs$core_SLASH_conj,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$conj,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),1,1794,1794,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),"conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.",(cljs.core.truth_(cljs.core.conj)?cljs.core.conj.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.conj;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23917 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23917,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23917;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.bytes;},cljs.core.cst$sym$cljs$core_SLASH_bytes,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$bytes,"cljs/core.cljs",12,1,2833,2833,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.bytes)?cljs.core.bytes.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.bytes;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23918 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23918,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23918;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unchecked_float;},cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_float,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unchecked_DASH_float,"cljs/core.cljs",30,1,2728,2728,cljs.core.cst$sym$number,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.unchecked_float)?cljs.core.unchecked_float.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unchecked_float;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23919 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23919,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23919;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.bit_test;},cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_test,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$bit_DASH_test,"cljs/core.cljs",24,1,2906,2906,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),"Test bit at index n",((cljs.core.bit_test)?cljs.core.bit_test.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.bit_test;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23920 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23920,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23920;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.sorted_map_by;},cljs.core.cst$sym$cljs$core_SLASH_sorted_DASH_map_DASH_by,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$sorted_DASH_map_DASH_by,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(1),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),1,8941,8941,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.",(cljs.core.truth_(cljs.core.sorted_map_by)?cljs.core.sorted_map_by.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.sorted_map_by;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23921 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23921,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23921;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.double_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_double_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$double_QMARK_,"cljs/core.cljs",14,1,2341,2341,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true for JavaScript numbers, false otherwise.",(cljs.core.truth_(cljs.core.double_QMARK_)?cljs.core.double_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.double_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23922 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23922,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23922;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.rseq;},cljs.core.cst$sym$cljs$core_SLASH_rseq,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$rseq,"cljs/core.cljs",16,1,3205,3205,cljs.core.cst$sym$seq,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rev], null)),"Returns, in constant time, a seq of the items in rev (which\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil",((cljs.core.rseq)?cljs.core.rseq.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.rseq;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23923 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23923,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23923;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unchecked_long;},cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_long,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unchecked_DASH_long,"cljs/core.cljs",21,1,2827,2827,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Coerce to long by stripping decimal places. Identical to `int'.",(cljs.core.truth_(cljs.core.unchecked_long)?cljs.core.unchecked_long.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unchecked_long;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23924 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23924,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23924;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.namespaces.sci_binding,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci_SLASH_macro,true], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.double$;},cljs.core.cst$sym$cljs$core_SLASH_double,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$double,"cljs/core.cljs",21,1,2723,2723,cljs.core.cst$sym$number,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.double$)?cljs.core.double$.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.double$;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23925 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23925,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23925;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.tree_seq;},cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_seq,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$tree_DASH_seq,"cljs/core.cljs",15,1,5201,5201,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$branch_QMARK_,cljs.core.cst$sym$children,cljs.core.cst$sym$root], null)),"Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n  branch? must be a fn of one arg that returns true if passed a node\n  that can have children (but may not).  children must be a fn of one\n  arg that returns a sequence of the children. Will only be called on\n  nodes for which branch? returns true. Root is the root node of the\n  tree.",(cljs.core.truth_(cljs.core.tree_seq)?cljs.core.tree_seq.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.tree_seq;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23926 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23926,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23926;
}
})(),false);
})(),sci.impl.multimethods.multi_fn_add_method_impl,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.seqable_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_seqable_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$seqable_QMARK_,"cljs/core.cljs",15,1,2253,2253,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),"Return true if the seq function is supported for s",(cljs.core.truth_(cljs.core.seqable_QMARK_)?cljs.core.seqable_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.seqable_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23927 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23927,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23927;
}
})(),false);
})(),sci.impl.core_protocols.swap_BANG__STAR_,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return sci.impl.namespaces.vswap_BANG__STAR_;},cljs.core.cst$sym$sci$impl$namespaces_SLASH_vswap_BANG__STAR_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.with_meta(cljs.core.cst$sym$sci$impl$namespaces,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$no_DASH_doc,true], null)),cljs.core.cst$sym$vswap_BANG__STAR_,"resources/public/cljs-out/dev/sci/impl/namespaces.cljc",14,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$vol,cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vol,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),1,309,309,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vol,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),null,(cljs.core.truth_(sci.impl.namespaces.vswap_BANG__STAR_)?sci.impl.namespaces.vswap_BANG__STAR_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = sci.impl.namespaces.vswap_BANG__STAR_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23928 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23928,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23928;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.array_map;},cljs.core.cst$sym$cljs$core_SLASH_array_DASH_map,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$array_DASH_map,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(0),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),1,8910,8910,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"keyval => key val\n  Returns a new array map with supplied mappings.",(cljs.core.truth_(cljs.core.array_map)?cljs.core.array_map.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.array_map;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23929 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23929,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23929;
}
})(),false);
})(),sci.impl.vars.reset_thread_binding_frame,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.dedupe;},cljs.core.cst$sym$cljs$core_SLASH_dedupe,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$dedupe,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,1,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,10645,10645,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.",(cljs.core.truth_(cljs.core.dedupe)?cljs.core.dedupe.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.dedupe;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23930 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23930,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23930;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.short$;},cljs.core.cst$sym$cljs$core_SLASH_short,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$short,"cljs/core.cljs",20,1,2721,2721,cljs.core.cst$sym$number,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.short$)?cljs.core.short$.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.short$;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23931 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23931,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23931;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.update;},cljs.core.cst$sym$cljs$core_SLASH_update,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$update,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(6),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),1,5342,5342,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value.",(cljs.core.truth_(cljs.core.update)?cljs.core.update.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.update;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23932 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23932,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23932;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.filter;},cljs.core.cst$sym$cljs$core_SLASH_filter,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$filter,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,5164,5164,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the items in coll for which\n  (pred item) returns logical true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",(cljs.core.truth_(cljs.core.filter)?cljs.core.filter.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.filter;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23933 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23933,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23933;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.unchecked_dec_int;},cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_dec_DASH_int,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$unchecked_DASH_dec_DASH_int,"cljs/core.cljs",24,1,2750,2750,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns a number one less than x, an int.",(cljs.core.truth_(cljs.core.unchecked_dec_int)?cljs.core.unchecked_dec_int.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.unchecked_dec_int;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23934 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23934,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23934;
}
})(),false);
})(),sci.impl.namespaces._STAR_3,cljs.core.with_meta(sci.impl.namespaces.sci_requiring_resolve,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.rem;},cljs.core.cst$sym$cljs$core_SLASH_rem,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$rem,"cljs/core.cljs",10,1,2857,2857,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null)),"remainder of dividing numerator by denominator.",(cljs.core.truth_(cljs.core.rem)?cljs.core.rem.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.rem;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23935 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23935,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23935;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.pop;},cljs.core.cst$sym$cljs$core_SLASH_pop,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$pop,"cljs/core.cljs",10,1,2105,2105,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.",(cljs.core.truth_(cljs.core.pop)?cljs.core.pop.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.pop;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23936 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23936,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23936;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.merge_with;},cljs.core.cst$sym$cljs$core_SLASH_merge_DASH_with,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$merge_DASH_with,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(1),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$maps)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),1,9117,9117,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).",(cljs.core.truth_(cljs.core.merge_with)?cljs.core.merge_with.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.merge_with;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23937 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23937,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23937;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.long$;},cljs.core.cst$sym$cljs$core_SLASH_long,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$long,"cljs/core.cljs",11,1,2822,2822,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Coerce to long by stripping decimal places. Identical to `int'.",(cljs.core.truth_(cljs.core.long$)?cljs.core.long$.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.long$;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23938 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23938,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23938;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.namespaces.assert_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci_SLASH_macro,true], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.flatten;},cljs.core.cst$sym$cljs$core_SLASH_flatten,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$flatten,"cljs/core.cljs",14,1,5216,5216,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.",(cljs.core.truth_(cljs.core.flatten)?cljs.core.flatten.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.flatten;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23939 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23939,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23939;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.distinct_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_distinct_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$distinct_QMARK_,"cljs/core.cljs",25,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,2373,2373,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns true if no two of the arguments are =",((cljs.core.distinct_QMARK_)?cljs.core.distinct_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.distinct_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23940 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23940,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23940;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.map_indexed;},cljs.core.cst$sym$cljs$core_SLASH_map_DASH_indexed,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$map_DASH_indexed,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,4369,4369,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item. Returns a stateful transducer when\n  no collection is provided.",(cljs.core.truth_(cljs.core.map_indexed)?cljs.core.map_indexed.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.map_indexed;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23941 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23941,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23941;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.namespaces.sci_ns_publics,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),sci.impl.types.type_impl,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.even_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_even_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$even_QMARK_,"cljs/core.cljs",12,1,4262,4262,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),"Returns true if n is even, throws an exception if n is not an integer",(cljs.core.truth_(cljs.core.even_QMARK_)?cljs.core.even_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.even_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23942 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23942,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23942;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return sci.impl.vars.var_get;},cljs.core.cst$sym$sci$impl$vars_SLASH_var_DASH_get,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$sci$impl$vars,cljs.core.cst$sym$var_DASH_get,"resources/public/cljs-out/dev/sci/impl/vars.cljc",14,1,366,366,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null)),null,(cljs.core.truth_(sci.impl.vars.var_get)?sci.impl.vars.var_get.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = sci.impl.vars.var_get;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23943 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23943,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23943;
}
})(),false);
})(),sci.impl.multimethods.multi_fn_QMARK__impl,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return sci.impl.vars.alter_var_root;},cljs.core.cst$sym$sci$impl$vars_SLASH_alter_DASH_var_DASH_root,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$sci$impl$vars,cljs.core.cst$sym$alter_DASH_var_DASH_root,"resources/public/cljs-out/dev/sci/impl/vars.cljc",21,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$v,cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),1,405,405,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),null,(cljs.core.truth_(sci.impl.vars.alter_var_root)?sci.impl.vars.alter_var_root.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = sci.impl.vars.alter_var_root;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23944 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23944,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23944;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.type;},cljs.core.cst$sym$cljs$core_SLASH_type,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$type,"cljs/core.cljs",11,1,311,311,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Return x's constructor.",(cljs.core.truth_(cljs.core.type)?cljs.core.type.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.type;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23945 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23945,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23945;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.neg_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_neg_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$neg_QMARK_,"cljs/core.cljs",20,1,2956,2956,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if num is less than zero, else false",((cljs.core.neg_QMARK_)?cljs.core.neg_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.neg_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23946 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23946,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23946;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.gensym;},cljs.core.cst$sym$cljs$core_SLASH_gensym,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$gensym,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,1,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,10556,10556,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),"Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.",(cljs.core.truth_(cljs.core.gensym)?cljs.core.gensym.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.gensym;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23947 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23947,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23947;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.namespaces.sci_resolve,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.add_watch;},cljs.core.cst$sym$cljs$core_SLASH_add_DASH_watch,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$add_DASH_watch,"cljs/core.cljs",16,1,10521,10521,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)),"Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1",(cljs.core.truth_(cljs.core.add_watch)?cljs.core.add_watch.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.add_watch;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23948 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23948,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23948;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.not_any_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_not_DASH_any_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$not_DASH_any_QMARK_,"cljs/core.cljs",15,1,4257,4257,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns false if (pred x) is logical true for any x in coll,\n  else true.",(cljs.core.truth_(cljs.core.not_any_QMARK_)?cljs.core.not_any_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.not_any_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23949 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23949,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23949;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.take_nth;},cljs.core.cst$sym$cljs$core_SLASH_take_DASH_nth,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$take_DASH_nth,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,9825,9825,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.",(cljs.core.truth_(cljs.core.take_nth)?cljs.core.take_nth.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.take_nth;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23950 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23950,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23950;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.dorun;},cljs.core.cst$sym$cljs$core_SLASH_dorun,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$dorun,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,9953,9953,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.",(cljs.core.truth_(cljs.core.dorun)?cljs.core.dorun.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.dorun;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23951 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23951,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23951;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.remove_all_methods;},cljs.core.cst$sym$cljs$core_SLASH_remove_DASH_all_DASH_methods,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$remove_DASH_all_DASH_methods,"cljs/core.cljs",25,1,11233,11233,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null)),"Removes all of the methods of multimethod.",(cljs.core.truth_(cljs.core.remove_all_methods)?cljs.core.remove_all_methods.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.remove_all_methods;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23952 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23952,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23952;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.not_empty;},cljs.core.cst$sym$cljs$core_SLASH_not_DASH_empty,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$not_DASH_empty,"cljs/core.cljs",16,1,4012,4012,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"If coll is empty, returns nil, else coll",(cljs.core.truth_(cljs.core.not_empty)?cljs.core.not_empty.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.not_empty;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23953 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23953,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23953;
}
})(),false);
})(),cljs.core.with_meta(sci.impl.namespaces.sci_ns_aliases,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),cljs.core.with_meta(sci.impl.namespaces.sci_ns_resolve,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),sci.impl.vars.get_thread_binding_frame,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.chunk_rest;},cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_rest,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$chunk_DASH_rest,"cljs/core.cljs",17,1,3648,3648,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,(cljs.core.truth_(cljs.core.chunk_rest)?cljs.core.chunk_rest.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.chunk_rest;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23954 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23954,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23954;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.remove_watch;},cljs.core.cst$sym$cljs$core_SLASH_remove_DASH_watch,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$remove_DASH_watch,"cljs/core.cljs",19,1,10544,10544,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key], null)),"Removes a watch (set by add-watch) from a reference",(cljs.core.truth_(cljs.core.remove_watch)?cljs.core.remove_watch.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.remove_watch;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23955 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23955,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23955;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.int_array;},cljs.core.cst$sym$cljs$core_SLASH_int_DASH_array,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$int_DASH_array,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,3679,3679,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),"Creates an array of ints. Does not coerce array, provided for compatibility\n  with Clojure.",(cljs.core.truth_(cljs.core.int_array)?cljs.core.int_array.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.int_array;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23956 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23956,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23956;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.pos_int_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_pos_DASH_int_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$pos_DASH_int_QMARK_,"cljs/core.cljs",15,1,2291,2291,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Return true if x satisfies int? and is positive.",(cljs.core.truth_(cljs.core.pos_int_QMARK_)?cljs.core.pos_int_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.pos_int_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23957 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23957,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23957;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.ints;},cljs.core.cst$sym$cljs$core_SLASH_ints,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$ints,"cljs/core.cljs",11,1,2836,2836,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,(cljs.core.truth_(cljs.core.ints)?cljs.core.ints.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.ints;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23958 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23958,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23958;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.identical_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_identical_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$identical_QMARK_,"cljs/core.cljs",26,1,230,230,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),"Tests if 2 arguments are the same object",((cljs.core.identical_QMARK_)?cljs.core.identical_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.identical_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23959 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23959,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23959;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.persistent_BANG_;},cljs.core.cst$sym$cljs$core_SLASH_persistent_BANG_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$persistent_BANG_,"cljs/core.cljs",18,1,3831,3831,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)),"Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.",(cljs.core.truth_(cljs.core.persistent_BANG_)?cljs.core.persistent_BANG_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.persistent_BANG_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23960 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23960,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23960;
}
})(),false);
})(),sci.impl.core_protocols.reset_protocol,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.indexed_QMARK_;},cljs.core.cst$sym$cljs$core_SLASH_indexed_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$indexed_QMARK_,"cljs/core.cljs",15,1,1538,1538,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),"Returns true if coll implements nth in constant time",(cljs.core.truth_(cljs.core.indexed_QMARK_)?cljs.core.indexed_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.indexed_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23961 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23961,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23961;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.min_key;},cljs.core.cst$sym$cljs$core_SLASH_min_DASH_key,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$min_DASH_key,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(3),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,9547,9547,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the x for which (k x), a number, is least.\n\n  If there are multiple such xs, the last one is returned.",(cljs.core.truth_(cljs.core.min_key)?cljs.core.min_key.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.min_key;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23962 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23962,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23962;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.repeatedly;},cljs.core.cst$sym$cljs$core_SLASH_repeatedly,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$repeatedly,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,5029,5029,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),"Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it",(cljs.core.truth_(cljs.core.repeatedly)?cljs.core.repeatedly.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.repeatedly;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23963 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23963,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23963;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.set;},cljs.core.cst$sym$cljs$core_SLASH_set,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$set,"cljs/core.cljs",10,1,9429,9429,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns a set of the distinct elements of coll.",(cljs.core.truth_(cljs.core.set)?cljs.core.set.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.set;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23964 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23964,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23964;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.remove;},cljs.core.cst$sym$cljs$core_SLASH_remove,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$remove,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,5193,5193,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the items in coll for which\n  (pred item) returns logical false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",(cljs.core.truth_(cljs.core.remove)?cljs.core.remove.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.remove;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23965 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23965,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23965;
}
})(),false);
})(),sci.impl.namespaces.macrofy(sci.impl.namespaces.while_STAR_),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_core_ns;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.core.re_find;},cljs.core.cst$sym$cljs$core_SLASH_re_DASH_find,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$core,cljs.core.cst$sym$re_DASH_find,"cljs/core.cljs",14,1,10000,10000,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null)),"Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.",(cljs.core.truth_(cljs.core.re_find)?cljs.core.re_find.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.core.re_find;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__23966 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__23966,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__23966;
}
})(),false);
})()]);
sci.impl.namespaces.dir_fn = (function sci$impl$namespaces$dir_fn(ctx,ns){
var current_ns = sci.impl.vars.current_ns_name();
var the_ns = sci.impl.namespaces.sci_the_ns(ctx,cljs.core.get.cljs$core$IFn$_invoke$arity$3(sci.impl.namespaces.sci_ns_aliases(ctx,current_ns),ns,ns));
return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,sci.impl.namespaces.sci_ns_publics(ctx,the_ns)));
});
sci.impl.namespaces.dir = (function sci$impl$namespaces$dir(_,___$1,nsname){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_doseq,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$v__23967__auto__,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$clojure$repl_SLASH_dir_DASH_fn,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$quote,null,(1),null)),(new cljs.core.List(null,nsname,null,(1),null))))),null,(1),null))))),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_println,null,(1),null)),(new cljs.core.List(null,cljs.core.cst$sym$v__23967__auto__,null,(1),null))))),null,(1),null))], 0))));
});
sci.impl.namespaces.print_doc = (function sci$impl$namespaces$print_doc(m){
var arglists = cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m);
var doc = cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m);
var macro_QMARK_ = cljs.core.cst$kw$macro.cljs$core$IFn$_invoke$arity$1(m);
sci.impl.io.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["-------------------------"], 0));

sci.impl.io.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[(function (){var temp__5720__auto__ = cljs.core.cst$kw$ns.cljs$core$IFn$_invoke$arity$1(m);
if(cljs.core.truth_(temp__5720__auto__)){
var ns_STAR_ = temp__5720__auto__;
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sci.impl.namespaces.sci_ns_name(ns_STAR_)),"/"].join('');
} else {
return null;
}
})(),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m))].join('')], 0));

if(cljs.core.truth_(arglists)){
sci.impl.io.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arglists], 0));
} else {
}

if(cljs.core.truth_(macro_QMARK_)){
sci.impl.io.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Macro"], 0));
} else {
}

if(cljs.core.truth_(doc)){
return sci.impl.io.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([" ",doc], 0));
} else {
return null;
}
});
sci.impl.namespaces.doc = (function sci$impl$namespaces$doc(_,___$1,sym){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_if_DASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$var__23968__auto__,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_resolve,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$quote,null,(1),null)),(new cljs.core.List(null,sym,null,(1),null))))),null,(1),null))))),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_when,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_var_QMARK_,null,(1),null)),(new cljs.core.List(null,cljs.core.cst$sym$var__23968__auto__,null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$clojure$repl_SLASH_print_DASH_doc,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_meta,null,(1),null)),(new cljs.core.List(null,cljs.core.cst$sym$var__23968__auto__,null,(1),null))))),null,(1),null))))),null,(1),null))], 0)))),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_if_DASH_let,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$ns__23969__auto__,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_find_DASH_ns,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$quote,null,(1),null)),(new cljs.core.List(null,sym,null,(1),null))))),null,(1),null))))),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$clojure$repl_SLASH_print_DASH_doc,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_assoc,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_meta,null,(1),null)),(new cljs.core.List(null,cljs.core.cst$sym$ns__23969__auto__,null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.cst$kw$name,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_ns_DASH_name,null,(1),null)),(new cljs.core.List(null,cljs.core.cst$sym$ns__23969__auto__,null,(1),null))))),null,(1),null))], 0)))),null,(1),null))))),null,(1),null))], 0)))),null,(1),null))], 0))));
});
/**
 * Prints documentation for any var whose documentation or name
 *   contains a match for re-string-or-pattern
 */
sci.impl.namespaces.find_doc = (function sci$impl$namespaces$find_doc(ctx,re_string_or_pattern){
var re = cljs.core.re_pattern(re_string_or_pattern);
var ms = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p1__23970_SHARP_){
return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$name,cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.meta,cljs.core.vals(sci.impl.namespaces.sci_ns_interns(ctx,p1__23970_SHARP_))));
}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([sci.impl.namespaces.sci_all_ns(ctx)], 0)),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__23971_SHARP_){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(p1__23971_SHARP_),cljs.core.cst$kw$name,sci.impl.namespaces.sci_ns_name(p1__23971_SHARP_));
}),sci.impl.namespaces.sci_all_ns(ctx)));
var seq__23972 = cljs.core.seq(ms);
var chunk__23974 = null;
var count__23975 = (0);
var i__23976 = (0);
while(true){
if((i__23976 < count__23975)){
var m = chunk__23974.cljs$core$IIndexed$_nth$arity$2(null,i__23976);
if(cljs.core.truth_((function (){var and__4115__auto__ = cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m);
if(cljs.core.truth_(and__4115__auto__)){
var or__4126__auto__ = cljs.core.re_find(re,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m));
if(cljs.core.truth_(or__4126__auto__)){
return or__4126__auto__;
} else {
return cljs.core.re_find(re,cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m)));
}
} else {
return and__4115__auto__;
}
})())){
sci.impl.namespaces.print_doc(m);


var G__23978 = seq__23972;
var G__23979 = chunk__23974;
var G__23980 = count__23975;
var G__23981 = (i__23976 + (1));
seq__23972 = G__23978;
chunk__23974 = G__23979;
count__23975 = G__23980;
i__23976 = G__23981;
continue;
} else {
var G__23982 = seq__23972;
var G__23983 = chunk__23974;
var G__23984 = count__23975;
var G__23985 = (i__23976 + (1));
seq__23972 = G__23982;
chunk__23974 = G__23983;
count__23975 = G__23984;
i__23976 = G__23985;
continue;
}
} else {
var temp__5720__auto__ = cljs.core.seq(seq__23972);
if(temp__5720__auto__){
var seq__23972__$1 = temp__5720__auto__;
if(cljs.core.chunked_seq_QMARK_(seq__23972__$1)){
var c__4556__auto__ = cljs.core.chunk_first(seq__23972__$1);
var G__23986 = cljs.core.chunk_rest(seq__23972__$1);
var G__23987 = c__4556__auto__;
var G__23988 = cljs.core.count(c__4556__auto__);
var G__23989 = (0);
seq__23972 = G__23986;
chunk__23974 = G__23987;
count__23975 = G__23988;
i__23976 = G__23989;
continue;
} else {
var m = cljs.core.first(seq__23972__$1);
if(cljs.core.truth_((function (){var and__4115__auto__ = cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m);
if(cljs.core.truth_(and__4115__auto__)){
var or__4126__auto__ = cljs.core.re_find(re,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m));
if(cljs.core.truth_(or__4126__auto__)){
return or__4126__auto__;
} else {
return cljs.core.re_find(re,cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m)));
}
} else {
return and__4115__auto__;
}
})())){
sci.impl.namespaces.print_doc(m);


var G__23990 = cljs.core.next(seq__23972__$1);
var G__23991 = null;
var G__23992 = (0);
var G__23993 = (0);
seq__23972 = G__23990;
chunk__23974 = G__23991;
count__23975 = G__23992;
i__23976 = G__23993;
continue;
} else {
var G__23994 = cljs.core.next(seq__23972__$1);
var G__23995 = null;
var G__23996 = (0);
var G__23997 = (0);
seq__23972 = G__23994;
chunk__23974 = G__23995;
count__23975 = G__23996;
i__23976 = G__23997;
continue;
}
}
} else {
return null;
}
}
break;
}
});
/**
 * Given a regular expression or stringable thing, return a seq of all
 *   public definitions in all currently-loaded namespaces that match the
 *   str-or-pattern.
 */
sci.impl.namespaces.apropos = (function sci$impl$namespaces$apropos(ctx,str_or_pattern){
var matches_QMARK_ = (((str_or_pattern instanceof RegExp))?(function (p1__23998_SHARP_){
return cljs.core.re_find(str_or_pattern,cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__23998_SHARP_));
}):(function (p1__23999_SHARP_){
return clojure.string.includes_QMARK_(cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__23999_SHARP_),cljs.core.str.cljs$core$IFn$_invoke$arity$1(str_or_pattern));
}));
return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (ns){
var ns_name = cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);
return cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__24000_SHARP_){
return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(ns_name,cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__24000_SHARP_));
}),cljs.core.filter.cljs$core$IFn$_invoke$arity$2(matches_QMARK_,cljs.core.keys(sci.impl.namespaces.sci_ns_publics(ctx,ns))));
}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([sci.impl.namespaces.sci_all_ns(ctx)], 0)));
});
/**
 * Returns a string of the source code for the given symbol, if it can
 *   find it.  This requires that the symbol resolve to a Var defined in
 *   a namespace for which the .clj is in the classpath.  Returns nil if
 *   it can't find the source.  For most REPL usage, 'source' is more
 *   convenient.
 * 
 *   Example: (source-fn 'filter)
 */
sci.impl.namespaces.source_fn = (function sci$impl$namespaces$source_fn(ctx,x){
var temp__5720__auto__ = sci.impl.namespaces.sci_resolve.cljs$core$IFn$_invoke$arity$2(ctx,x);
if(cljs.core.truth_(temp__5720__auto__)){
var v = temp__5720__auto__;
var map__24001 = cljs.core.meta(v);
var map__24001__$1 = (((((!((map__24001 == null))))?(((((map__24001.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__24001.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__24001):map__24001);
var line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24001__$1,cljs.core.cst$kw$line);
var ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24001__$1,cljs.core.cst$kw$ns);
if(cljs.core.truth_((function (){var and__4115__auto__ = line;
if(cljs.core.truth_(and__4115__auto__)){
return ns;
} else {
return and__4115__auto__;
}
})())){
var temp__5720__auto____$1 = (function (){var temp__5720__auto____$1 = cljs.core.cst$kw$load_DASH_fn.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(cljs.core.cst$kw$env.cljs$core$IFn$_invoke$arity$1(ctx)));
if(cljs.core.truth_(temp__5720__auto____$1)){
var load_fn = temp__5720__auto____$1;
return cljs.core.cst$kw$source.cljs$core$IFn$_invoke$arity$1((function (){var G__24003 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$namespace,sci.impl.namespaces.sci_ns_name(ns)], null);
return (load_fn.cljs$core$IFn$_invoke$arity$1 ? load_fn.cljs$core$IFn$_invoke$arity$1(G__24003) : load_fn.call(null,G__24003));
})());
} else {
return null;
}
})();
if(cljs.core.truth_(temp__5720__auto____$1)){
var source = temp__5720__auto____$1;
var lines = clojure.string.split.cljs$core$IFn$_invoke$arity$2(source,/\n/);
var line__$1 = (line - (1));
var start = clojure.string.join.cljs$core$IFn$_invoke$arity$2("\n",cljs.core.drop.cljs$core$IFn$_invoke$arity$2(line__$1,lines));
var reader = sci.impl.read.source_logging_reader(start);
var res = sci.impl.parser.parse_next.cljs$core$IFn$_invoke$arity$3(ctx,reader,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$source,true], null));
return cljs.core.cst$kw$source.cljs$core$IFn$_invoke$arity$1(cljs.core.meta(res));
} else {
return null;
}
} else {
return null;
}
} else {
return null;
}
});
/**
 * Prints the source code for the given symbol, if it can find it.
 *   This requires that the symbol resolve to a Var defined in a
 *   namespace for which the .clj is in the classpath.
 * 
 *   Example: (source filter)
 */
sci.impl.namespaces.source = (function sci$impl$namespaces$source(_,___$1,n){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_println,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_or,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$clojure$repl_SLASH_source_DASH_fn,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$quote,null,(1),null)),(new cljs.core.List(null,n,null,(1),null))))),null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$cljs$core_SLASH_str,null,(1),null)),(new cljs.core.List(null,"Source not found",null,(1),null))))),null,(1),null))], 0)))),null,(1),null)))));
});
sci.impl.namespaces.clojure_repl = cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$sym$find_DASH_doc,cljs.core.cst$sym$dir,cljs.core.cst$sym$dir_DASH_fn,cljs.core.cst$sym$source_DASH_fn,cljs.core.cst$sym$source,cljs.core.cst$sym$doc,cljs.core.cst$sym$print_DASH_doc,cljs.core.cst$sym$apropos,cljs.core.cst$kw$obj],[cljs.core.with_meta(sci.impl.namespaces.find_doc,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),sci.impl.namespaces.macrofy(sci.impl.namespaces.dir),cljs.core.with_meta(sci.impl.namespaces.dir_fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),cljs.core.with_meta(sci.impl.namespaces.source_fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),sci.impl.namespaces.macrofy(sci.impl.namespaces.source),sci.impl.namespaces.macrofy(sci.impl.namespaces.doc),cljs.core.with_meta(sci.impl.namespaces.print_doc,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(sci.impl.namespaces.apropos,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx], null)),sci.impl.vars.__GT_SciNamespace(cljs.core.cst$sym$clojure$repl,null)]);
sci.impl.namespaces.apply_template = (function sci$impl$namespaces$apply_template(argv,expr,values){
if(cljs.core.vector_QMARK_(argv)){
} else {
throw (new Error("Assert failed: (vector? argv)"));
}

if(cljs.core.every_QMARK_(cljs.core.symbol_QMARK_,argv)){
} else {
throw (new Error("Assert failed: (every? symbol? argv)"));
}

return clojure.walk.postwalk_replace(cljs.core.zipmap(argv,values),expr);
});
sci.impl.namespaces.do_template = (function sci$impl$namespaces$do_template(var_args){
var args__4742__auto__ = [];
var len__4736__auto___24010 = arguments.length;
var i__4737__auto___24011 = (0);
while(true){
if((i__4737__auto___24011 < len__4736__auto___24010)){
args__4742__auto__.push((arguments[i__4737__auto___24011]));

var G__24012 = (i__4737__auto___24011 + (1));
i__4737__auto___24011 = G__24012;
continue;
} else {
}
break;
}

var argseq__4743__auto__ = ((((4) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((4)),(0),null)):null);
return sci.impl.namespaces.do_template.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),argseq__4743__auto__);
});

(sci.impl.namespaces.do_template.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,argv,expr,values){
var c = cljs.core.count(argv);
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.cst$sym$do,null,(1),null)),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (a){
return sci.impl.namespaces.apply_template(argv,expr,a);
}),cljs.core.partition.cljs$core$IFn$_invoke$arity$2(c,values)))));
}));

(sci.impl.namespaces.do_template.cljs$lang$maxFixedArity = (4));

/** @this {Function} */
(sci.impl.namespaces.do_template.cljs$lang$applyTo = (function (seq24005){
var G__24006 = cljs.core.first(seq24005);
var seq24005__$1 = cljs.core.next(seq24005);
var G__24007 = cljs.core.first(seq24005__$1);
var seq24005__$2 = cljs.core.next(seq24005__$1);
var G__24008 = cljs.core.first(seq24005__$2);
var seq24005__$3 = cljs.core.next(seq24005__$2);
var G__24009 = cljs.core.first(seq24005__$3);
var seq24005__$4 = cljs.core.next(seq24005__$3);
var self__4723__auto__ = this;
return self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__24006,G__24007,G__24008,G__24009,seq24005__$4);
}));

sci.impl.namespaces.clojure_template = new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$obj,sci.impl.vars.__GT_SciNamespace(cljs.core.cst$sym$clojure$template,null),cljs.core.cst$sym$apply_DASH_template,sci.impl.namespaces.apply_template,cljs.core.cst$sym$do_DASH_template,sci.impl.namespaces.macrofy(sci.impl.namespaces.do_template)], null);
sci.impl.namespaces.clojure_string_namespace = sci.impl.vars.__GT_SciNamespace(cljs.core.cst$sym$clojure$string,null);
sci.impl.namespaces.clojure_set_namespace = sci.impl.vars.__GT_SciNamespace(cljs.core.cst$sym$clojure$set,null);
sci.impl.namespaces.clojure_walk_namespace = sci.impl.vars.__GT_SciNamespace(cljs.core.cst$sym$clojure$walk,null);
sci.impl.namespaces.clojure_edn_namespace = sci.impl.vars.__GT_SciNamespace(cljs.core.cst$sym$clojure$edn,null);
sci.impl.namespaces.macroexpand_all = sci.impl.vars.__GT_SciVar((function (ctx,form){
return clojure.walk.prewalk((function (x){
if(cljs.core.seq_QMARK_(x)){
var fexpr__24013 = cljs.core.deref(sci.impl.utils.macroexpand_STAR_);
return (fexpr__24013.cljs$core$IFn$_invoke$arity$2 ? fexpr__24013.cljs$core$IFn$_invoke$arity$2(ctx,x) : fexpr__24013.call(null,ctx,x));
} else {
return x;
}
}),form);
}),cljs.core.cst$sym$macroexpand_DASH_all,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$ns,sci.impl.namespaces.clojure_walk_namespace,cljs.core.cst$kw$name,cljs.core.cst$sym$macroexpand_DASH_all,cljs.core.cst$kw$sci$impl_SLASH_op,sci.impl.utils.needs_ctx,cljs.core.cst$kw$doc,"Recursively performs all possible macroexpansions in form."], null),false);
sci.impl.namespaces.clojure_walk_ns = cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$sym$keywordize_DASH_keys,cljs.core.cst$sym$postwalk,cljs.core.cst$sym$postwalk_DASH_replace,cljs.core.cst$sym$walk,cljs.core.cst$sym$prewalk,cljs.core.cst$sym$prewalk_DASH_replace,cljs.core.cst$kw$obj,cljs.core.cst$sym$stringify_DASH_keys,cljs.core.cst$sym$macroexpand_DASH_all],[(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_walk_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.walk.keywordize_keys;},cljs.core.cst$sym$clojure$walk_SLASH_keywordize_DASH_keys,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$added,cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],["1.1",cljs.core.cst$sym$clojure$walk,cljs.core.cst$sym$keywordize_DASH_keys,"resources/public/cljs-out/dev/clojure/walk.cljs",22,1,68,68,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null)),"Recursively transforms all map keys from strings to keywords.",(cljs.core.truth_(clojure.walk.keywordize_keys)?clojure.walk.keywordize_keys.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.walk.keywordize_keys;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24014 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24014,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24014;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_walk_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.walk.postwalk;},cljs.core.cst$sym$clojure$walk_SLASH_postwalk,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$added,cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],["1.1",cljs.core.cst$sym$clojure$walk,cljs.core.cst$sym$postwalk,"resources/public/cljs-out/dev/clojure/walk.cljs",15,1,54,54,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$form], null)),"Performs a depth-first, post-order traversal of form.  Calls f on\n  each sub-form, uses f's return value in place of the original.\n  Recognizes all Clojure data structures. Consumes seqs as with doall.",(cljs.core.truth_(clojure.walk.postwalk)?clojure.walk.postwalk.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.walk.postwalk;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24015 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24015,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24015;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_walk_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.walk.postwalk_replace;},cljs.core.cst$sym$clojure$walk_SLASH_postwalk_DASH_replace,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$added,cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],["1.1",cljs.core.cst$sym$clojure$walk,cljs.core.cst$sym$postwalk_DASH_replace,"resources/public/cljs-out/dev/clojure/walk.cljs",23,1,92,92,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$form], null)),"Recursively transforms form by replacing keys in smap with their\n  values.  Like clojure/replace but works on any data structure.  Does\n  replacement at the leaves of the tree first.",(cljs.core.truth_(clojure.walk.postwalk_replace)?clojure.walk.postwalk_replace.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.walk.postwalk_replace;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24016 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24016,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24016;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_walk_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.walk.walk;},cljs.core.cst$sym$clojure$walk_SLASH_walk,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$added,cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],["1.1",cljs.core.cst$sym$clojure$walk,cljs.core.cst$sym$walk,"resources/public/cljs-out/dev/clojure/walk.cljs",11,1,37,37,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inner,cljs.core.cst$sym$outer,cljs.core.cst$sym$form], null)),"Traverses form, an arbitrary data structure.  inner and outer are\n  functions.  Applies inner to each element of form, building up a\n  data structure of the same type, then applies outer to the result.\n  Recognizes all Clojure data structures. Consumes seqs as with doall.",(cljs.core.truth_(clojure.walk.walk)?clojure.walk.walk.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.walk.walk;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24017 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24017,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24017;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_walk_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.walk.prewalk;},cljs.core.cst$sym$clojure$walk_SLASH_prewalk,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$added,cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],["1.1",cljs.core.cst$sym$clojure$walk,cljs.core.cst$sym$prewalk,"resources/public/cljs-out/dev/clojure/walk.cljs",14,1,62,62,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$form], null)),"Like postwalk, but does pre-order traversal.",(cljs.core.truth_(clojure.walk.prewalk)?clojure.walk.prewalk.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.walk.prewalk;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24018 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24018,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24018;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_walk_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.walk.prewalk_replace;},cljs.core.cst$sym$clojure$walk_SLASH_prewalk_DASH_replace,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$added,cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],["1.1",cljs.core.cst$sym$clojure$walk,cljs.core.cst$sym$prewalk_DASH_replace,"resources/public/cljs-out/dev/clojure/walk.cljs",22,1,84,84,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$form], null)),"Recursively transforms form by replacing keys in smap with their\n  values.  Like clojure/replace but works on any data structure.  Does\n  replacement at the root of the tree first.",(cljs.core.truth_(clojure.walk.prewalk_replace)?clojure.walk.prewalk_replace.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.walk.prewalk_replace;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24019 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24019,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24019;
}
})(),false);
})(),sci.impl.namespaces.clojure_walk_namespace,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_walk_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.walk.stringify_keys;},cljs.core.cst$sym$clojure$walk_SLASH_stringify_DASH_keys,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$added,cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],["1.1",cljs.core.cst$sym$clojure$walk,cljs.core.cst$sym$stringify_DASH_keys,"resources/public/cljs-out/dev/clojure/walk.cljs",21,1,76,76,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null)),"Recursively transforms all map keys from keywords to strings.",(cljs.core.truth_(clojure.walk.stringify_keys)?clojure.walk.stringify_keys.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.walk.stringify_keys;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24020 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24020,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24020;
}
})(),false);
})(),sci.impl.namespaces.macroexpand_all]);
sci.impl.namespaces.namespaces = new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$clojure$core,sci.impl.namespaces.clojure_core,cljs.core.cst$sym$clojure$string,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$sym$split,cljs.core.cst$sym$index_DASH_of,cljs.core.cst$sym$trimr,cljs.core.cst$sym$upper_DASH_case,cljs.core.cst$sym$lower_DASH_case,cljs.core.cst$sym$reverse,cljs.core.cst$sym$ends_DASH_with_QMARK_,cljs.core.cst$sym$split_DASH_lines,cljs.core.cst$sym$last_DASH_index_DASH_of,cljs.core.cst$sym$trim_DASH_newline,cljs.core.cst$sym$blank_QMARK_,cljs.core.cst$sym$replace,cljs.core.cst$sym$join,cljs.core.cst$sym$trim,cljs.core.cst$sym$starts_DASH_with_QMARK_,cljs.core.cst$sym$triml,cljs.core.cst$sym$escape,cljs.core.cst$kw$obj,cljs.core.cst$sym$includes_QMARK_,cljs.core.cst$sym$capitalize,cljs.core.cst$sym$replace_DASH_first],[(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_string_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.string.split;},cljs.core.cst$sym$clojure$string_SLASH_split,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$string,cljs.core.cst$sym$split,"resources/public/cljs-out/dev/clojure/string.cljs",12,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,3,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$re], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$re,cljs.core.cst$sym$limit], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$re], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$re,cljs.core.cst$sym$limit], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,167,167,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$re], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$re,cljs.core.cst$sym$limit], null)),"Splits string on a regular expression. Optional argument limit is\n  the maximum number of splits. Not lazy. Returns vector of the splits.",(cljs.core.truth_(clojure.string.split)?clojure.string.split.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.string.split;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24021 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24021,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24021;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_string_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.string.index_of;},cljs.core.cst$sym$clojure$string_SLASH_index_DASH_of,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$string,cljs.core.cst$sym$index_DASH_of,"resources/public/cljs-out/dev/clojure/string.cljs",15,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,3,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$value], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$value,cljs.core.cst$sym$from_DASH_index], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$value], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$value,cljs.core.cst$sym$from_DASH_index], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,248,248,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$value], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$value,cljs.core.cst$sym$from_DASH_index], null)),"Return index of value (string or char) in s, optionally searching\n  forward from from-index or nil if not found.",(cljs.core.truth_(clojure.string.index_of)?clojure.string.index_of.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.string.index_of;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24022 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24022,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24022;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_string_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.string.trimr;},cljs.core.cst$sym$clojure$string_SLASH_trimr,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$string,cljs.core.cst$sym$trimr,"resources/public/cljs-out/dev/clojure/string.cljs",20,1,206,206,cljs.core.cst$sym$string,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),"Removes whitespace from the right side of string.",(cljs.core.truth_(clojure.string.trimr)?clojure.string.trimr.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.string.trimr;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24023 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24023,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24023;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_string_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.string.upper_case;},cljs.core.cst$sym$clojure$string_SLASH_upper_DASH_case,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$string,cljs.core.cst$sym$upper_DASH_case,"resources/public/cljs-out/dev/clojure/string.cljs",25,1,119,119,cljs.core.cst$sym$string,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),"Converts string to all upper-case.",(cljs.core.truth_(clojure.string.upper_case)?clojure.string.upper_case.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.string.upper_case;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24024 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24024,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24024;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_string_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.string.lower_case;},cljs.core.cst$sym$clojure$string_SLASH_lower_DASH_case,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$string,cljs.core.cst$sym$lower_DASH_case,"resources/public/cljs-out/dev/clojure/string.cljs",25,1,124,124,cljs.core.cst$sym$string,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),"Converts string to all lower-case.",(cljs.core.truth_(clojure.string.lower_case)?clojure.string.lower_case.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.string.lower_case;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24025 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24025,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24025;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_string_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.string.reverse;},cljs.core.cst$sym$clojure$string_SLASH_reverse,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$string,cljs.core.cst$sym$reverse,"resources/public/cljs-out/dev/clojure/string.cljs",22,1,21,21,cljs.core.cst$sym$string,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),"Returns s with its characters reversed.",(cljs.core.truth_(clojure.string.reverse)?clojure.string.reverse.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.string.reverse;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24026 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24026,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24026;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_string_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.string.ends_with_QMARK_;},cljs.core.cst$sym$clojure$string_SLASH_ends_DASH_with_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$string,cljs.core.cst$sym$ends_DASH_with_QMARK_,"resources/public/cljs-out/dev/clojure/string.cljs",26,1,281,281,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$substr], null)),"True if s ends with substr.",((clojure.string.ends_with_QMARK_)?clojure.string.ends_with_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.string.ends_with_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24027 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24027,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24027;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_string_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.string.split_lines;},cljs.core.cst$sym$clojure$string_SLASH_split_DASH_lines,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$string,cljs.core.cst$sym$split_DASH_lines,"resources/public/cljs-out/dev/clojure/string.cljs",18,1,191,191,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),"Splits s on \\n or \\r\\n.",(cljs.core.truth_(clojure.string.split_lines)?clojure.string.split_lines.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.string.split_lines;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24028 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24028,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24028;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_string_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.string.last_index_of;},cljs.core.cst$sym$clojure$string_SLASH_last_DASH_index_DASH_of,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$string,cljs.core.cst$sym$last_DASH_index_DASH_of,"resources/public/cljs-out/dev/clojure/string.cljs",20,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,3,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$value], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$value,cljs.core.cst$sym$from_DASH_index], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$value], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$value,cljs.core.cst$sym$from_DASH_index], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,262,262,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$value], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$value,cljs.core.cst$sym$from_DASH_index], null)),"Return last index of value (string or char) in s, optionally\n  searching backward from from-index or nil if not found.",(cljs.core.truth_(clojure.string.last_index_of)?clojure.string.last_index_of.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.string.last_index_of;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24029 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24029,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24029;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_string_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.string.trim_newline;},cljs.core.cst$sym$clojure$string_SLASH_trim_DASH_newline,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$string,cljs.core.cst$sym$trim_DASH_newline,"resources/public/cljs-out/dev/clojure/string.cljs",27,1,211,211,cljs.core.cst$sym$string,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),"Removes all trailing newline \\n or return \\r characters from\n  string.  Similar to Perl's chomp.",(cljs.core.truth_(clojure.string.trim_newline)?clojure.string.trim_newline.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.string.trim_newline;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24030 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24030,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24030;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_string_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.string.blank_QMARK_;},cljs.core.cst$sym$clojure$string_SLASH_blank_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$string,cljs.core.cst$sym$blank_QMARK_,"resources/public/cljs-out/dev/clojure/string.cljs",22,1,224,224,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),"True is s is nil, empty, or contains only whitespace.",((clojure.string.blank_QMARK_)?clojure.string.blank_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.string.blank_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24031 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24031,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24031;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_string_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.string.replace;},cljs.core.cst$sym$clojure$string_SLASH_replace,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$string,cljs.core.cst$sym$replace,"resources/public/cljs-out/dev/clojure/string.cljs",22,1,44,44,cljs.core.cst$sym$string,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$match,cljs.core.cst$sym$replacement], null)),"Replaces all instance of match with replacement in s.\n\n   match/replacement can be:\n\n   string / string\n   pattern / (string or function of match).\n\n   See also replace-first.\n\n   The replacement is literal (i.e. none of its characters are treated\n   specially) for all cases above except pattern / string.\n\n   For pattern / string, $1, $2, etc. in the replacement string are\n   substituted with the string that matched the corresponding\n   parenthesized group in the pattern.\n\n   Example:\n   (clojure.string/replace \"Almost Pig Latin\" #\"\\b(\\w)(\\w+)\\b\" \"$2$1ay\")\n   -> \"lmostAay igPay atinLay\"",(cljs.core.truth_(clojure.string.replace)?clojure.string.replace.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.string.replace;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24032 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24032,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24032;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_string_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.string.join;},cljs.core.cst$sym$clojure$string_SLASH_join,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$string,cljs.core.cst$sym$join,"resources/public/cljs-out/dev/clojure/string.cljs",11,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$separator,cljs.core.cst$sym$coll], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$separator,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,100,100,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$separator,cljs.core.cst$sym$coll], null)),"Returns a string of all elements in coll, as returned by (seq coll),\n  separated by an optional separator.",(cljs.core.truth_(clojure.string.join)?clojure.string.join.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.string.join;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24033 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24033,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24033;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_string_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.string.trim;},cljs.core.cst$sym$clojure$string_SLASH_trim,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$string,cljs.core.cst$sym$trim,"resources/public/cljs-out/dev/clojure/string.cljs",19,1,196,196,cljs.core.cst$sym$string,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),"Removes whitespace from both ends of string.",(cljs.core.truth_(clojure.string.trim)?clojure.string.trim.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.string.trim;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24034 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24034,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24034;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_string_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.string.starts_with_QMARK_;},cljs.core.cst$sym$clojure$string_SLASH_starts_DASH_with_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$string,cljs.core.cst$sym$starts_DASH_with_QMARK_,"resources/public/cljs-out/dev/clojure/string.cljs",28,1,276,276,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$substr], null)),"True if s starts with substr.",((clojure.string.starts_with_QMARK_)?clojure.string.starts_with_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.string.starts_with_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24035 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24035,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24035;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_string_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.string.triml;},cljs.core.cst$sym$clojure$string_SLASH_triml,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$string,cljs.core.cst$sym$triml,"resources/public/cljs-out/dev/clojure/string.cljs",20,1,201,201,cljs.core.cst$sym$string,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),"Removes whitespace from the left side of string.",(cljs.core.truth_(clojure.string.triml)?clojure.string.triml.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.string.triml;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24036 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24036,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24036;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_string_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.string.escape;},cljs.core.cst$sym$clojure$string_SLASH_escape,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$string,cljs.core.cst$sym$escape,"resources/public/cljs-out/dev/clojure/string.cljs",21,1,229,229,cljs.core.cst$sym$string,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$cmap], null)),"Return a new string, using cmap to escape each character ch\n   from s as follows:\n\n   If (cmap ch) is nil, append ch to the new string.\n   If (cmap ch) is non-nil, append (str (cmap ch)) instead.",(cljs.core.truth_(clojure.string.escape)?clojure.string.escape.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.string.escape;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24037 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24037,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24037;
}
})(),false);
})(),sci.impl.namespaces.clojure_string_namespace,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_string_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.string.includes_QMARK_;},cljs.core.cst$sym$clojure$string_SLASH_includes_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$string,cljs.core.cst$sym$includes_QMARK_,"resources/public/cljs-out/dev/clojure/string.cljs",25,1,286,286,cljs.core.cst$sym$boolean,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$substr], null)),"True if s includes substr.",((clojure.string.includes_QMARK_)?clojure.string.includes_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.string.includes_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24038 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24038,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24038;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_string_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.string.capitalize;},cljs.core.cst$sym$clojure$string_SLASH_capitalize,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$string,cljs.core.cst$sym$capitalize,"resources/public/cljs-out/dev/clojure/string.cljs",25,1,129,129,cljs.core.cst$sym$string,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),"Converts first character of the string to upper-case, all other\n  characters to lower-case.",(cljs.core.truth_(clojure.string.capitalize)?clojure.string.capitalize.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.string.capitalize;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24039 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24039,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24039;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_string_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.string.replace_first;},cljs.core.cst$sym$clojure$string_SLASH_replace_DASH_first,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$string,cljs.core.cst$sym$replace_DASH_first,"resources/public/cljs-out/dev/clojure/string.cljs",28,1,76,76,cljs.core.cst$sym$string,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$match,cljs.core.cst$sym$replacement], null)),"Replaces the first instance of match with replacement in s.\n\n   match/replacement can be:\n\n   string / string\n   pattern / (string or function of match).\n\n   See also replace.\n\n   The replacement is literal (i.e. none of its characters are treated\n   specially) for all cases above except pattern / string.\n\n   For pattern / string, $1, $2, etc. in the replacement string are\n   substituted with the string that matched the corresponding\n   parenthesized group in the pattern.\n\n   Example:\n   (clojure.string/replace-first \"swap first two words\"\n                                 #\"(\\w+)(\\s+)(\\w+)\" \"$3$2$1\")\n   -> \"first swap two words\"",(cljs.core.truth_(clojure.string.replace_first)?clojure.string.replace_first.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.string.replace_first;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24040 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24040,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24040;
}
})(),false);
})()]),cljs.core.cst$sym$clojure$set,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$sym$project,cljs.core.cst$sym$map_DASH_invert,cljs.core.cst$sym$select,cljs.core.cst$sym$superset_QMARK_,cljs.core.cst$sym$join,cljs.core.cst$sym$union,cljs.core.cst$sym$rename,cljs.core.cst$sym$subset_QMARK_,cljs.core.cst$sym$difference,cljs.core.cst$kw$obj,cljs.core.cst$sym$intersection,cljs.core.cst$sym$index,cljs.core.cst$sym$rename_DASH_keys],[(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_set_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.set.project;},cljs.core.cst$sym$clojure$set_SLASH_project,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$set,cljs.core.cst$sym$project,"resources/public/cljs-out/dev/clojure/set.cljs",14,1,67,67,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xrel,cljs.core.cst$sym$ks], null)),"Returns a rel of the elements of xrel with only the keys in ks",(cljs.core.truth_(clojure.set.project)?clojure.set.project.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.set.project;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24041 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24041,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24041;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_set_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.set.map_invert;},cljs.core.cst$sym$clojure$set_SLASH_map_DASH_invert,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$set,cljs.core.cst$sym$map_DASH_invert,"resources/public/cljs-out/dev/clojure/set.cljs",17,1,97,97,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null)),"Returns the map with the vals mapped to the keys.",(cljs.core.truth_(clojure.set.map_invert)?clojure.set.map_invert.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.set.map_invert;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24042 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24042,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24042;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_set_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.set.select;},cljs.core.cst$sym$clojure$set_SLASH_select,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$set,cljs.core.cst$sym$select,"resources/public/cljs-out/dev/clojure/set.cljs",13,1,61,61,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$xset], null)),"Returns a set of the elements for which pred is true",(cljs.core.truth_(clojure.set.select)?clojure.set.select.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.set.select;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24043 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24043,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24043;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_set_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.set.superset_QMARK_;},cljs.core.cst$sym$clojure$set_SLASH_superset_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$set,cljs.core.cst$sym$superset_QMARK_,"resources/public/cljs-out/dev/clojure/set.cljs",16,1,137,137,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$set1,cljs.core.cst$sym$set2], null)),"Is set1 a superset of set2?",(cljs.core.truth_(clojure.set.superset_QMARK_)?clojure.set.superset_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.set.superset_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24044 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24044,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24044;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_set_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.set.join;},cljs.core.cst$sym$clojure$set_SLASH_join,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$set,cljs.core.cst$sym$join,"resources/public/cljs-out/dev/clojure/set.cljs",11,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,3,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xrel,cljs.core.cst$sym$yrel], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xrel,cljs.core.cst$sym$yrel,cljs.core.cst$sym$km], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xrel,cljs.core.cst$sym$yrel], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xrel,cljs.core.cst$sym$yrel,cljs.core.cst$sym$km], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,101,101,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xrel,cljs.core.cst$sym$yrel], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xrel,cljs.core.cst$sym$yrel,cljs.core.cst$sym$km], null)),"When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.",(cljs.core.truth_(clojure.set.join)?clojure.set.join.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.set.join;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24045 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24045,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24045;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_set_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.set.union;},cljs.core.cst$sym$clojure$set_SLASH_union,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$set,cljs.core.cst$sym$union,"resources/public/cljs-out/dev/clojure/set.cljs",12,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1,cljs.core.cst$sym$s2], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1,cljs.core.cst$sym$s2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1,cljs.core.cst$sym$s2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$sets], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),1,19,19,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1,cljs.core.cst$sym$s2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1,cljs.core.cst$sym$s2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$sets], null)),"Return a set that is the union of the input sets",(cljs.core.truth_(clojure.set.union)?clojure.set.union.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.set.union;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24046 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24046,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24046;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_set_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.set.rename;},cljs.core.cst$sym$clojure$set_SLASH_rename,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$set,cljs.core.cst$sym$rename,"resources/public/cljs-out/dev/clojure/set.cljs",13,1,82,82,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xrel,cljs.core.cst$sym$kmap], null)),"Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap",(cljs.core.truth_(clojure.set.rename)?clojure.set.rename.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.set.rename;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24047 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24047,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24047;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_set_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.set.subset_QMARK_;},cljs.core.cst$sym$clojure$set_SLASH_subset_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$set,cljs.core.cst$sym$subset_QMARK_,"resources/public/cljs-out/dev/clojure/set.cljs",14,1,131,131,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$set1,cljs.core.cst$sym$set2], null)),"Is set1 a subset of set2?",(cljs.core.truth_(clojure.set.subset_QMARK_)?clojure.set.subset_QMARK_.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.set.subset_QMARK_;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24048 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24048,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24048;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_set_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.set.difference;},cljs.core.cst$sym$clojure$set_SLASH_difference,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$set,cljs.core.cst$sym$difference,"resources/public/cljs-out/dev/clojure/set.cljs",17,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1,cljs.core.cst$sym$s2], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1,cljs.core.cst$sym$s2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1,cljs.core.cst$sym$s2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$sets], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,46,46,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1,cljs.core.cst$sym$s2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1,cljs.core.cst$sym$s2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$sets], null)),"Return a set that is the first set without elements of the remaining sets",(cljs.core.truth_(clojure.set.difference)?clojure.set.difference.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.set.difference;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24049 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24049,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24049;
}
})(),false);
})(),sci.impl.namespaces.clojure_set_namespace,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_set_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.set.intersection;},cljs.core.cst$sym$clojure$set_SLASH_intersection,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$set,cljs.core.cst$sym$intersection,"resources/public/cljs-out/dev/clojure/set.cljs",19,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1,cljs.core.cst$sym$s2], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1,cljs.core.cst$sym$s2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1,cljs.core.cst$sym$s2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$sets], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,31,31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1,cljs.core.cst$sym$s2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s1,cljs.core.cst$sym$s2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$sets], null)),"Return a set that is the intersection of the input sets",(cljs.core.truth_(clojure.set.intersection)?clojure.set.intersection.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.set.intersection;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24050 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24050,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24050;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_set_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.set.index;},cljs.core.cst$sym$clojure$set_SLASH_index,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$set,cljs.core.cst$sym$index,"resources/public/cljs-out/dev/clojure/set.cljs",12,1,87,87,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xrel,cljs.core.cst$sym$ks], null)),"Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.",(cljs.core.truth_(clojure.set.index)?clojure.set.index.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.set.index;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24051 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24051,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24051;
}
})(),false);
})(),(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_set_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return clojure.set.rename_keys;},cljs.core.cst$sym$clojure$set_SLASH_rename_DASH_keys,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$set,cljs.core.cst$sym$rename_DASH_keys,"resources/public/cljs-out/dev/clojure/set.cljs",18,1,72,72,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map,cljs.core.cst$sym$kmap], null)),"Returns the map with the keys in kmap renamed to the vals in kmap",(cljs.core.truth_(clojure.set.rename_keys)?clojure.set.rename_keys.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = clojure.set.rename_keys;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24052 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24052,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24052;
}
})(),false);
})()]),cljs.core.cst$sym$clojure$walk,sci.impl.namespaces.clojure_walk_ns,cljs.core.cst$sym$clojure$template,sci.impl.namespaces.clojure_template,cljs.core.cst$sym$clojure$repl,sci.impl.namespaces.clojure_repl,cljs.core.cst$sym$clojure$edn,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$obj,sci.impl.namespaces.clojure_edn_namespace,cljs.core.cst$sym$read,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_edn_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.reader.read;},cljs.core.cst$sym$cljs$reader_SLASH_read,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$reader,cljs.core.cst$sym$read,"resources/public/cljs-out/dev/cljs/reader.cljs",11,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,4,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$reader], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$eof], null),cljs.core.cst$kw$as,cljs.core.cst$sym$opts], null),cljs.core.cst$sym$reader], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$reader,cljs.core.cst$sym$eof_DASH_error_QMARK_,cljs.core.cst$sym$eof,cljs.core.cst$sym$opts], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$reader], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$eof], null),cljs.core.cst$kw$as,cljs.core.cst$sym$opts], null),cljs.core.cst$sym$reader], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$reader,cljs.core.cst$sym$eof_DASH_error_QMARK_,cljs.core.cst$sym$eof,cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,142,142,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$reader], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$eof], null),cljs.core.cst$kw$as,cljs.core.cst$sym$opts], null),cljs.core.cst$sym$reader], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$reader,cljs.core.cst$sym$eof_DASH_error_QMARK_,cljs.core.cst$sym$eof,cljs.core.cst$sym$opts], null)),"Reads the first object from an cljs.tools.reader.reader-types/IPushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true otherwise returns eof.\n   If no reader is provided, *in* will be used.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   cljs.tools.reader.edn/read doesn't depend on dynamic Vars, all configuration\n   is done by passing an opt map.\n\n   opts is a map that can include the following keys:\n   :eof - value to return on end-of-file. When not supplied, eof throws an exception.\n   :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n              When not supplied, only the default-data-readers will be used.\n   :default - A function of two args, that will, if present and no reader is found for a tag,\n              be called with the tag and the value.",(cljs.core.truth_(cljs.reader.read)?cljs.reader.read.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.reader.read;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24053 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24053,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24053;
}
})(),false);
})(),cljs.core.cst$sym$read_DASH_string,(function (){var ns__18901__auto__ = sci.impl.namespaces.clojure_edn_namespace;
var m__18902__auto__ = cljs.core.meta(new cljs.core.Var(function(){return cljs.reader.read_string;},cljs.core.cst$sym$cljs$reader_SLASH_read_DASH_string,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$cljs$reader,cljs.core.cst$sym$read_DASH_string,"resources/public/cljs-out/dev/cljs/reader.cljs",18,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,2,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts,cljs.core.cst$sym$s], null)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,174,174,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts,cljs.core.cst$sym$s], null)),"Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   opts is a map as per cljs.tools.reader.edn/read",(cljs.core.truth_(cljs.reader.read_string)?cljs.reader.read_string.cljs$lang$test:null)])));
var ns_name__18903__auto__ = ns__18901__auto__.sci$impl$vars$HasName$getName$arity$1(null);
var name__18904__auto__ = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(m__18902__auto__);
var name_sym__18905__auto__ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name__18903__auto__),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__18904__auto__));
var val__18906__auto__ = cljs.reader.read_string;
return sci.impl.vars.__GT_SciVar(val__18906__auto__,name_sym__18905__auto__,(function (){var G__24054 = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$ns,ns__18901__auto__,cljs.core.cst$kw$name,name__18904__auto__,cljs.core.cst$kw$sci$impl_SLASH_built_DASH_in,true,cljs.core.cst$kw$arglists,cljs.core.cst$kw$arglists.cljs$core$IFn$_invoke$arity$1(m__18902__auto__),cljs.core.cst$kw$doc,cljs.core.cst$kw$doc.cljs$core$IFn$_invoke$arity$1(m__18902__auto__)], null);
if((((sci.impl.namespaces.clojure_core_ns === ns__18901__auto__)) && (cljs.core.contains_QMARK_(sci.impl.namespaces.inlined_vars,name__18904__auto__)))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24054,cljs.core.cst$kw$sci$impl_SLASH_inlined,val__18906__auto__);
} else {
return G__24054;
}
})(),false);
})()], null)], null);
sci.impl.namespaces.aliases = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$str,cljs.core.cst$sym$clojure$string,cljs.core.cst$sym$set,cljs.core.cst$sym$clojure$set], null);
