["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$React",["^ ","~$useState",["^ "],"~$memo",["^ "],"~$createRef",["^ "],"~$useReducer",["^ "],"~$useCallback",["^ "],"~$useRef",["^ "],"~$cloneElement",["^ "],"~$Component",["^ ","~$call",["^ "]],"~$useMemo",["^ "],"~$useEffect",["^ "],"~$createElement",["^ ","~$apply",["^ "]],"~$createContext",["^ "]],"~$ReactDOM",["^ ","~$render",["^ "],"~$unmountComponentAtNode",["^ "],"~$hydrate",["^ "],"~$createPortal",["^ "],"~$findDOMNode",["^ "]],"~$Object",["^ ","~$forceUpdate",["^ "],"~$current",["^ "],"~$renderToString",["^ "],"~$renderToStaticMarkup",["^ "]],"~$ReactDOMServer",["^ ","^K",["^ "],"^L",["^ "]],"~$require",["^ "]],"~:use-macros",["^ ","~$call-all","~$rum.util","~$collect","^Q","~$collect*","^Q"],"~:excludes",["~#set",["~$ref","~$deref"]],"~:name","~$rum.core","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","~$goog.functions","^12","~$rum.cursor","^13","~$fns","^12","~$gobj","~$goog.object","^16","^16","~$cljsjs.react","^17","~$rum.derived-atom","^18","^11","^11","~$cljsjs.react.dom","^19","~$util","^Q","^Q","^Q","~$cursor","^13","~$daiquiri.core","^1<","~$rum.specs","^1=","~$derived-atom","^18"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^P","^Q","^R","^Q","^S","^Q"],"~:defs",["^ ","~$adapt-class-helper",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","~:line",602,"~:column",7,"~:end-line",602,"~:end-column",25,"~:arglists",["~#list",["~$quote",["^1K",[["~$type","~$attrs","~$children"]]]]]],"^X","~$rum.core/adapt-class-helper","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",25,"~:method-params",["^1K",[["^1M","^1N","^1O"]]],"~:protocol-impl",null,"~:arglists-meta",["^1K",[null,null]],"^1G",1,"~:variadic?",false,"^1F",602,"~:ret-tag","~$js","^1H",602,"~:max-fixed-arity",3,"~:fn-var",true,"^1J",["^1K",["^1L",["^1K",[["^1M","^1N","^1O"]]]]]],"~$use-ref",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",556,"^1G",7,"^1H",556,"^1I",14,"^1J",["^1K",["^1L",["^1K",[["~$initial-value"]]]]],"~:doc","Takes a value and puts it into a mutable container which is persisted for the full lifetime of the component.\n  https://reactjs.org/docs/hooks-reference.html#useref"],"^X","~$rum.core/use-ref","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",14,"^1Q",["^1K",[["^1Z"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",556,"^1U","^1V","^1H",556,"^1W",1,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^1Z"]]]]],"^1[","Takes a value and puts it into a mutable container which is persisted for the full lifetime of the component.\n  https://reactjs.org/docs/hooks-reference.html#useref"],"~$mount",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",215,"^1G",7,"^1H",215,"^1I",12,"^1J",["^1K",["^1L",["^1K",[["~$element","~$node"]]]]],"^1[","Add element to the DOM tree. Idempotent. Subsequent mounts will just update element."],"^X","~$rum.core/mount","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",12,"^1Q",["^1K",[["^22","^23"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",215,"^1U","~$clj-nil","^1H",215,"^1W",2,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^22","^23"]]]]],"^1[","Add element to the DOM tree. Idempotent. Subsequent mounts will just update element."],"~$react-memo",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",176,"^1G",7,"^1H",176,"^1I",17,"^1J",["^1K",["^1L",["^1K",[["~$f"]]]]]],"^X","~$rum.core/react-memo","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",17,"^1Q",["^1K",[["~$f"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",176,"^1U",["^U",[null,"~$any"]],"^1H",176,"^1W",1,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["~$f"]]]]]],"~$unmount",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",221,"^1G",7,"^1H",221,"^1I",14,"^1J",["^1K",["^1L",["^1K",[["^23"]]]]],"^1[","Removes component from the DOM tree."],"^X","~$rum.core/unmount","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",14,"^1Q",["^1K",[["^23"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",221,"^1U","^1V","^1H",221,"^1W",1,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^23"]]]]],"^1[","Removes component from the DOM tree."],"~$local",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",315,"^1G",7,"^1H",315,"^1I",12,"^1J",["^1K",["^1L",["^1K",[["~$initial"],["^2<","~$key"]]]]],"^1[","Mixin constructor. Adds an atom to component’s state that can be used to keep stuff during component’s lifecycle. Component will be re-rendered if atom’s value changes. Atom is stored under user-provided key or under `:rum/local` by default.\n  \n   ```\n   (rum/defcs counter < (rum/local 0 :cnt)\n     [state label]\n     (let [*cnt (:cnt state)]\n       [:div {:on-click (fn [_] (swap! *cnt inc))}\n         label @*cnt]))\n   \n   (rum/mount (counter \"Click count: \"))\n   ```","~:top-fn",["^ ","^1T",false,"~:fixed-arity",2,"^1W",2,"^1Q",[["^2<"],["^2<","^2="]],"^1J",["^1K",[["^2<"],["^2<","^2="]]],"^1S",["^1K",[null,null]]]],"^X","~$rum.core/local","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",12,"^2>",["^ ","^1T",false,"^2?",2,"^1W",2,"^1Q",[["^2<"],["^2<","^2="]],"^1J",["^1K",[["^2<"],["^2<","^2="]]],"^1S",["^1K",[null,null]]],"^1Q",[["^2<"],["^2<","^2="]],"^1R",null,"^2?",2,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"~:methods",[["^ ","^2?",1,"^1T",false,"~:tag","^28"],["^ ","^2?",2,"^1T",false,"^2B","~$cljs.core/IMap"]],"^1F",315,"^1H",315,"^1W",2,"^1X",true,"^1J",["^1K",[["^2<"],["^2<","^2="]]],"^1[","Mixin constructor. Adds an atom to component’s state that can be used to keep stuff during component’s lifecycle. Component will be re-rendered if atom’s value changes. Atom is stored under user-provided key or under `:rum/local` by default.\n  \n   ```\n   (rum/defcs counter < (rum/local 0 :cnt)\n     [state label]\n     (let [*cnt (:cnt state)]\n       [:div {:on-click (fn [_] (swap! *cnt inc))}\n         label @*cnt]))\n   \n   (rum/mount (counter \"Click count: \"))\n   ```"],"~$create-context",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",236,"^1G",7,"^1H",236,"^1I",21,"^1J",["^1K",["^1L",["^1K",[["~$default-value"]]]]]],"^X","~$rum.core/create-context","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",21,"^1Q",["^1K",[["^2E"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",236,"^1U","^1V","^1H",236,"^1W",1,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^2E"]]]]]],"~$use-reducer",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",488,"^1G",14,"^1H",488,"^1I",25,"^2B","~$array","^1J",["^1K",["^1L",["^1K",[["~$reducer-fn","^1Z"]]]]],"^1[","Takes reducing function and initial state value.\n  Returns a tuple of [value dispatch!], where `value` is current state value and `dispatch` is a function that schedules re-render.\n\n  (defmulti value-reducer (fn [value event] event))\n\n  (defmethod value-reducer :inc [value _]\n    (inc value))\n\n  (let [[value dispatch!] (rum/use-reducer value-reducer 0)]\n    [:button {:on-click #(dispatch! :inc)}\n      value])\n\n  Read more at https://reactjs.org/docs/hooks-reference.html#usereducer"],"^X","~$rum.core/use-reducer","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",25,"^1Q",["^1K",[["^2I","^1Z"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",488,"^1U","^2H","^1H",488,"^1W",2,"^2B","^2H","^1X",true,"^1J",["^1K",["^1L",["^1K",[["^2I","^1Z"]]]]],"^1[","Takes reducing function and initial state value.\n  Returns a tuple of [value dispatch!], where `value` is current state value and `dispatch` is a function that schedules re-render.\n\n  (defmulti value-reducer (fn [value event] event))\n\n  (defmethod value-reducer :inc [value _]\n    (inc value))\n\n  (let [[value dispatch!] (rum/use-reducer value-reducer 0)]\n    [:button {:on-click #(dispatch! :inc)}\n      value])\n\n  Read more at https://reactjs.org/docs/hooks-reference.html#usereducer"],"~$memo-compare-props",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",172,"^1G",8,"^1H",172,"^1I",26,"~:private",true,"^1J",["^1K",["^1L",["^1K",[["~$prev-props","~$next-props"]]]]]],"^2L",true,"^X","~$rum.core/memo-compare-props","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",26,"^1Q",["^1K",[["^2M","^2N"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",172,"^1U","~$boolean","^1H",172,"^1W",2,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^2M","^2N"]]]]]],"~$use-memo",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",547,"^1G",7,"^1H",547,"^1I",15,"^1J",["^1K",["^1L",["^1K",[["~$f"],["~$f","~$deps"]]]]],"^1[","Takes a function, memoizes it based on provided deps collection and executes immediately returning a result.\n  Read more at https://reactjs.org/docs/hooks-reference.html#usememo","^2>",["^ ","^1T",false,"^2?",2,"^1W",2,"^1Q",[["~$f"],["~$f","^2R"]],"^1J",["^1K",[["~$f"],["~$f","^2R"]]],"^1S",["^1K",[null,null]]]],"^X","~$rum.core/use-memo","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",15,"^2>",["^ ","^1T",false,"^2?",2,"^1W",2,"^1Q",[["~$f"],["~$f","^2R"]],"^1J",["^1K",[["~$f"],["~$f","^2R"]]],"^1S",["^1K",[null,null]]],"^1Q",[["~$f"],["~$f","^2R"]],"^1R",null,"^2?",2,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^2A",[["^ ","^2?",1,"^1T",false,"^2B","^1V"],["^ ","^2?",2,"^1T",false,"^2B","^1V"]],"^1F",547,"^1H",547,"^1W",2,"^1X",true,"^1J",["^1K",[["~$f"],["~$f","^2R"]]],"^1[","Takes a function, memoizes it based on provided deps collection and executes immediately returning a result.\n  Read more at https://reactjs.org/docs/hooks-reference.html#usememo"],"~$reactive",["^ ","^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",345,"^1G",6,"^1H",345,"^1I",14],"^X","~$rum.core/reactive","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",14,"^1G",1,"^1F",345,"^1H",345,"^2B","^2C","^1[","Mixin. Works in conjunction with [[react]].\n  \n   ```\n   (rum/defc comp < rum/reactive\n     [*counter]\n     [:div (rum/react counter)])\n\n   (def *counter (atom 0))\n   (rum/mount (comp *counter) js/document.body)\n   (swap! *counter inc) ;; will force comp to re-render\n   ```"],"~$set-meta!",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",141,"^1G",8,"^1H",141,"^1I",17,"^2L",true,"^1J",["^1K",["^1L",["^1K",[["~$c"]]]]]],"^2L",true,"^X","~$rum.core/set-meta!","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",17,"^1Q",["^1K",[["~$c"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",141,"^1U","~$function","^1H",141,"^1W",1,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["~$c"]]]]]],"~$ref-node",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",281,"^1G",7,"^1H",281,"^1I",15,"^1J",["^1K",["^1L",["^1K",[["~$state","^2="]]]]],"^1[","DEPRECATED: Use :ref (fn [dom-or-nil]) callback instead. See rum issue #124\n  Given state and ref handle, returns DOM node associated with ref."],"^X","~$rum.core/ref-node","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",15,"^1Q",["^1K",[["^2Z","^2="]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",281,"^1U","^1V","^1H",281,"^1W",2,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^2Z","^2="]]]]],"^1[","DEPRECATED: Use :ref (fn [dom-or-nil]) callback instead. See rum issue #124\n  Given state and ref handle, returns DOM node associated with ref."],"~$create-ref",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",564,"^1G",7,"^1H",564,"^1I",17,"^1J",["^1K",["^1L",["^1K",[[]]]]]],"^X","~$rum.core/create-ref","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",17,"^1Q",["^1K",[[]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",564,"^1U","^1V","^1H",564,"^1W",0,"^1X",true,"^1J",["^1K",["^1L",["^1K",[[]]]]]],"~$react",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",386,"^1G",7,"^1H",386,"^1I",12,"^1J",["^1K",["^1L",["^1K",[["^V"]]]]],"^1[","Works in conjunction with [[reactive]] mixin. Use this function instead of `deref` inside render, and your component will subscribe to changes happening to the derefed atom."],"^X","~$rum.core/react","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",12,"^1Q",["^1K",[["^V"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",386,"^1U","^28","^1H",386,"^1W",1,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^V"]]]]],"^1[","Works in conjunction with [[reactive]] mixin. Use this function instead of `deref` inside render, and your component will subscribe to changes happening to the derefed atom."],"~$render-static-markup",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",592,"^1G",7,"^1H",592,"^1I",27,"^1J",["^1K",["^1L",["^1K",[["~$src"]]]]],"^1[","Same as [[render-html]] but returned string has nothing React-specific.\n  This allows Rum to be used as traditional server-side templating engine."],"^X","~$rum.core/render-static-markup","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",27,"^1Q",["^1K",[["^35"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",592,"^1U","^1V","^1H",592,"^1W",1,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^35"]]]]],"^1[","Same as [[render-html]] but returned string has nothing React-specific.\n  This allows Rum to be used as traditional server-side templating engine."],"~$lazy-build",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",147,"^1G",7,"^1H",147,"^1I",17,"^1J",["^1K",["^1L",["^1K",[["~$ctor","^C","~$mixins","~$display-name"]]]]],"^1[","Wraps component construction in a way so that Google Closure Compiler\n   can properly recognize and elide unused components. The extra `set-meta`\n   fn is needed so that the compiler can properly detect that all functions\n   are side effect free."],"^X","~$rum.core/lazy-build","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",17,"^1Q",["^1K",[["^38","^C","^39","^3:"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",147,"^1U","^2X","^1H",147,"^1W",4,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^38","^C","^39","^3:"]]]]],"^1[","Wraps component construction in a way so that Google Closure Compiler\n   can properly recognize and elide unused components. The extra `set-meta`\n   fn is needed so that the compiler can properly detect that all functions\n   are side effect free."],"~$request-render",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",212,"^1G",7,"^1H",212,"^1I",21,"^1J",["^1K",["^1L",["^1K",[["~$comp"]]]]]],"^X","~$rum.core/request-render","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",21,"^1Q",["^1K",[["^3="]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",212,"^1U","^28","^1H",212,"^1W",1,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^3="]]]]]],"~$portal",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",231,"^1G",7,"^1H",231,"^1I",13,"^1J",["^1K",["^1L",["^1K",[["^22","^23"]]]]],"^1[","Render `element` in a DOM `node` that is ouside of current DOM hierarchy."],"^X","~$rum.core/portal","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",13,"^1Q",["^1K",[["^22","^23"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",231,"^1U","^1V","^1H",231,"^1W",2,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^22","^23"]]]]],"^1[","Render `element` in a DOM `node` that is ouside of current DOM hierarchy."],"~$with-key",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",243,"^1G",7,"^1H",243,"^1I",15,"^1J",["^1K",["^1L",["^1K",[["^22","^2="]]]]],"^1[","Adds React key to element.\n   \n   ```\n   (rum/defc label [text] [:div text])\n\n   (-> (label)\n       (rum/with-key \"abc\")\n       (rum/mount js/document.body))\n   ```"],"^X","~$rum.core/with-key","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",15,"^1Q",["^1K",[["^22","^2="]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",243,"^1U","^1V","^1H",243,"^1W",2,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^22","^2="]]]]],"^1[","Adds React key to element.\n   \n   ```\n   (rum/defc label [text] [:div text])\n\n   (-> (label)\n       (rum/with-key \"abc\")\n       (rum/mount js/document.body))\n   ```"],"~$extend!",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",21,"^1G",8,"^1H",21,"^1I",15,"^2L",true,"^1J",["^1K",["^1L",["^1K",[["~$obj","~$props"]]]]]],"^2L",true,"^X","~$rum.core/extend!","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",15,"^1Q",["^1K",[["^3D","^3E"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",21,"^1U","^25","^1H",21,"^1W",2,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^3D","^3E"]]]]]],"~$build-defcs",["^ ","~:no-doc",true,"^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",204,"^1G",16,"^1H",204,"^1I",27,"^3H",true,"^1J",["^1K",["^1L",["^1K",[["~$render-body","^39","^3:"]]]]]],"^X","~$rum.core/build-defcs","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",27,"^1Q",["^1K",[["^3I","^39","^3:"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",204,"^1U",["^U",["~$clj","~$cljs.core/MetaFn","^25"]],"^1H",204,"^1W",3,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^3I","^39","^3:"]]]]]],"~$*reactions*",["^ ","^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",343,"^1G",26,"^1H",343,"^1I",37,"~:dynamic",true,"^2L",true],"^2L",true,"^X","~$rum.core/*reactions*","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",37,"^1G",1,"^3N",true,"^1F",343,"^1H",343,"^2B","^28"],"^V",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",275,"^1G",7,"^1H",275,"^1I",10,"^1J",["^1K",["^1L",["^1K",[["^2Z","^2="]]]]],"^1[","DEPRECATED: Use :ref (fn [dom-or-nil]) callback instead. See rum issue #124\n  Given state and ref handle, returns React component."],"^X","~$rum.core/ref","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",10,"^1Q",["^1K",[["^2Z","^2="]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",275,"^1U","^28","^1H",275,"^1W",2,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^2Z","^2="]]]]],"^1[","DEPRECATED: Use :ref (fn [dom-or-nil]) callback instead. See rum issue #124\n  Given state and ref handle, returns React component."],"~$set-ref!",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",572,"^1G",7,"^1H",572,"^1I",15,"^1J",["^1K",["^1L",["^1K",[["^V","~$value"]]]]]],"^X","~$rum.core/set-ref!","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",15,"^1Q",["^1K",[["^V","^3R"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",572,"^1H",572,"^1W",2,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^V","^3R"]]]]]],"~$static",["^ ","^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",291,"^1G",6,"^1H",291,"^1I",12],"^X","~$rum.core/static","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",12,"^1G",1,"^1F",291,"^1H",291,"^2B","^2C","^1[","Mixin. Will avoid re-render if none of component’s arguments have changed. Does equality check (`=`) on all arguments.\n  \n   ```\n   (rum/defc label < rum/static\n     [text]\n     [:div text])\n     \n   (rum/mount (label \"abc\") js/document.body)\n\n   ;; def != abc, will re-render\n   (rum/mount (label \"def\") js/document.body)\n\n   ;; def == def, won’t re-render\n   (rum/mount (label \"def\") js/document.body)\n   ```"],"^1;",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",471,"^1G",7,"^1H",471,"^1I",13,"^1J",["^1K",["^1L",["^1K",[["^V","^2=","~$&","~$options"]]]]],"^1[","Same as [[cursor-in]] but accepts single key instead of path vector.","^2>",["^ ","^1T",true,"^2?",2,"^1W",2,"^1Q",[["^1K",["^V","^2=","^3V"]]],"^1J",["^1K",[["^V","^2=","~$&","^3V"]]],"^1S",["^1K",[null]]]],"^X","~$rum.core/cursor","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",13,"^2>",["^ ","^1T",true,"^2?",2,"^1W",2,"^1Q",[["^1K",["^V","^2=","^3V"]]],"^1J",["^1K",[["^V","^2=","~$&","^3V"]]],"^1S",["^1K",[null]]],"^1Q",[["^1K",["^V","^2=","^3V"]]],"^1R",null,"^2?",2,"^1S",["^1K",[null]],"^1G",1,"^1T",true,"^2A",[["^ ","^2?",2,"^1T",true,"^2B","^28"]],"^1F",471,"^1U","^28","^1H",471,"^1W",2,"^1X",true,"^1J",["^1K",[["^V","^2=","~$&","^3V"]]],"^1[","Same as [[cursor-in]] but accepts single key instead of path vector."],"^2Z",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",16,"^1G",7,"^1H",16,"^1I",12,"^1J",["^1K",["^1L",["^1K",[["^3="]]]]],"^1[","Given React component, returns Rum state associated with it."],"^X","~$rum.core/state","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",12,"^1Q",["^1K",[["^3="]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",16,"^1U","^28","^1H",16,"^1W",1,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^3="]]]]],"^1[","Given React component, returns Rum state associated with it."],"~$cursor-in",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",444,"^1G",7,"^1H",444,"^1I",16,"^1J",["^1K",["^1L",["^1K",[["^V","~$path","~$&",["^ ","~:as","^3V"]]]]]],"^1[","Given atom with deep nested value and path inside it, creates an atom-like structure\n   that can be used separately from main atom, but will sync changes both ways:\n  \n   ```\n   (def db (atom { :users { \"Ivan\" { :age 30 }}}))\n   \n   (def ivan (rum/cursor db [:users \"Ivan\"]))\n   (deref ivan) ;; => { :age 30 }\n   \n   (swap! ivan update :age inc) ;; => { :age 31 }\n   (deref db) ;; => { :users { \"Ivan\" { :age 31 }}}\n   \n   (swap! db update-in [:users \"Ivan\" :age] inc)\n   ;; => { :users { \"Ivan\" { :age 32 }}}\n   \n   (deref ivan) ;; => { :age 32 }\n   ```\n  \n   Returned value supports `deref`, `swap!`, `reset!`, watches and metadata.\n  \n   The only supported option is `:meta`","^2>",["^ ","^1T",true,"^2?",2,"^1W",2,"^1Q",[["^1K",["^V","^3Z",["^ ","^3[","^3V"]]]],"^1J",["^1K",[["^V","^3Z","~$&",["^ ","^3[","^3V"]]]],"^1S",["^1K",[null]]]],"^X","~$rum.core/cursor-in","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",16,"^2>",["^ ","^1T",true,"^2?",2,"^1W",2,"^1Q",[["^1K",["^V","^3Z",["^ ","^3[","^3V"]]]],"^1J",["^1K",[["^V","^3Z","~$&",["^ ","^3[","^3V"]]]],"^1S",["^1K",[null]]],"^1Q",[["^1K",["^V","^3Z",["^ ","^3[","^3V"]]]],"^1R",null,"^2?",2,"^1S",["^1K",[null]],"^1G",1,"^1T",true,"^2A",[["^ ","^2?",2,"^1T",true,"^2B","~$rum.cursor/Cursor"]],"^1F",444,"^1U","^28","^1H",444,"^1W",2,"^1X",true,"^1J",["^1K",[["^V","^3Z","~$&",["^ ","^3[","^3V"]]]],"^1[","Given atom with deep nested value and path inside it, creates an atom-like structure\n   that can be used separately from main atom, but will sync changes both ways:\n  \n   ```\n   (def db (atom { :users { \"Ivan\" { :age 30 }}}))\n   \n   (def ivan (rum/cursor db [:users \"Ivan\"]))\n   (deref ivan) ;; => { :age 30 }\n   \n   (swap! ivan update :age inc) ;; => { :age 31 }\n   (deref db) ;; => { :users { \"Ivan\" { :age 31 }}}\n   \n   (swap! db update-in [:users \"Ivan\" :age] inc)\n   ;; => { :users { \"Ivan\" { :age 32 }}}\n   \n   (deref ivan) ;; => { :age 32 }\n   ```\n  \n   Returned value supports `deref`, `swap!`, `reset!`, watches and metadata.\n  \n   The only supported option is `:meta`"],"~$use-effect!",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",505,"^1G",7,"^1H",505,"^1I",18,"^1J",["^1K",["^1L",["^1K",[["~$setup-fn"],["^43","^2R"]]]]],"^1[","Takes setup-fn that executes either on the first render or after every update.\n  The function may return cleanup-fn to cleanup the effect, either before unmount or before every next update.\n  Calling behavior is controlled by deps argument.\n\n  (rum/use-effect!\n    (fn []\n      (.addEventListener js/window \"load\" handler)\n      #(.removeEventListener js/window \"load\" handler))\n    []) ;; empty deps collection instructs React to run setup-fn only once on initial render\n        ;; and cleanup-fn only once before unmounting\n\n  Read more at https://reactjs.org/docs/hooks-effect.html","^2>",["^ ","^1T",false,"^2?",2,"^1W",2,"^1Q",[["^43"],["^43","^2R"]],"^1J",["^1K",[["^43"],["^43","^2R"]]],"^1S",["^1K",[null,null]]]],"^X","~$rum.core/use-effect!","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",18,"^2>",["^ ","^1T",false,"^2?",2,"^1W",2,"^1Q",[["^43"],["^43","^2R"]],"^1J",["^1K",[["^43"],["^43","^2R"]]],"^1S",["^1K",[null,null]]],"^1Q",[["^43"],["^43","^2R"]],"^1R",null,"^2?",2,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^2A",[["^ ","^2?",1,"^1T",false,"^2B","^1V"],["^ ","^2?",2,"^1T",false,"^2B","^1V"]],"^1F",505,"^1H",505,"^1W",2,"^1X",true,"^1J",["^1K",[["^43"],["^43","^2R"]]],"^1[","Takes setup-fn that executes either on the first render or after every update.\n  The function may return cleanup-fn to cleanup the effect, either before unmount or before every next update.\n  Calling behavior is controlled by deps argument.\n\n  (rum/use-effect!\n    (fn []\n      (.addEventListener js/window \"load\" handler)\n      #(.removeEventListener js/window \"load\" handler))\n    []) ;; empty deps collection instructs React to run setup-fn only once on initial render\n        ;; and cleanup-fn only once before unmounting\n\n  Read more at https://reactjs.org/docs/hooks-effect.html"],"~$dom-node",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",269,"^1G",7,"^1H",269,"^1I",15,"^1J",["^1K",["^1L",["^1K",[["^2Z"]]]]],"^1[","Usage of this function is discouraged. Use :ref callback instead.\n  Given state, returns top-level DOM node of component. Call it during lifecycle callbacks. Can’t be called during render."],"^X","~$rum.core/dom-node","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",15,"^1Q",["^1K",[["^2Z"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",269,"^1U","^1V","^1H",269,"^1W",1,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^2Z"]]]]],"^1[","Usage of this function is discouraged. Use :ref callback instead.\n  Given state, returns top-level DOM node of component. Call it during lifecycle callbacks. Can’t be called during render."],"~$with-ref",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",256,"^1G",7,"^1H",256,"^1I",15,"^1J",["^1K",["^1L",["^1K",[["^22","^V"]]]]],"^1[","Adds React ref (string or callback) to element.\n   \n   ```\n   (rum/defc label [text] [:div text])\n\n   (-> (label)\n       (rum/with-ref \"abc\")\n       (rum/mount js/document.body))\n   ```"],"^X","~$rum.core/with-ref","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",15,"^1Q",["^1K",[["^22","^V"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",256,"^1U","^1V","^1H",256,"^1W",2,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^22","^V"]]]]],"^1[","Adds React ref (string or callback) to element.\n   \n   ```\n   (rum/defc label [text] [:div text])\n\n   (-> (label)\n       (rum/with-ref \"abc\")\n       (rum/mount js/document.body))\n   ```"],"~$build-defc",["^ ","^3H",true,"^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",181,"^1G",16,"^1H",181,"^1I",26,"^3H",true,"^1J",["^1K",["^1L",["^1K",[["^3I","^39","^3:"]]]]]],"^X","~$rum.core/build-defc","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",26,"^1Q",["^1K",[["^3I","^39","^3:"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",181,"^1U",["^U",["^3K","^3L","^25"]],"^1H",181,"^1W",3,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^3I","^39","^3:"]]]]]],"~$render-html",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",580,"^1G",7,"^1H",580,"^1I",18,"^1J",["^1K",["^1L",["^1K",[["^22"],["^22","~$opts"]]]]],"^1[","Main server-side rendering method. Given component, returns HTML string with static markup of that component.\n  Serve that string to the browser and [[hydrate]] same Rum component over it. React will be able to reuse already existing DOM and will initialize much faster.\n  No opts are supported at the moment.","^2>",["^ ","^1T",false,"^2?",2,"^1W",2,"^1Q",[["^22"],["^22","^4<"]],"^1J",["^1K",[["^22"],["^22","^4<"]]],"^1S",["^1K",[null,null]]]],"^X","~$rum.core/render-html","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",18,"^2>",["^ ","^1T",false,"^2?",2,"^1W",2,"^1Q",[["^22"],["^22","^4<"]],"^1J",["^1K",[["^22"],["^22","^4<"]]],"^1S",["^1K",[null,null]]],"^1Q",[["^22"],["^22","^4<"]],"^1R",null,"^2?",2,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^2A",[["^ ","^2?",1,"^1T",false,"^2B","^28"],["^ ","^2?",2,"^1T",false,"^2B","^1V"]],"^1F",580,"^1H",580,"^1W",2,"^1X",true,"^1J",["^1K",[["^22"],["^22","^4<"]]],"^1[","Main server-side rendering method. Given component, returns HTML string with static markup of that component.\n  Serve that string to the browser and [[hydrate]] same Rum component over it. React will be able to reuse already existing DOM and will initialize much faster.\n  No opts are supported at the moment."],"^E",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",226,"^1G",7,"^1H",226,"^1I",14,"^1J",["^1K",["^1L",["^1K",[["^22","^23"]]]]],"^1[","Same as [[mount]] but must be called on DOM tree already rendered by a server via [[render-html]]."],"^X","~$rum.core/hydrate","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",14,"^1Q",["^1K",[["^22","^23"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",226,"^1U","^1V","^1H",226,"^1W",2,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^22","^23"]]]]],"^1[","Same as [[mount]] but must be called on DOM tree already rendered by a server via [[render-html]]."],"~$build-defcc",["^ ","^3H",true,"^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",208,"^1G",16,"^1H",208,"^1I",27,"^3H",true,"^1J",["^1K",["^1L",["^1K",[["^3I","^39","^3:"]]]]]],"^X","~$rum.core/build-defcc","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",27,"^1Q",["^1K",[["^3I","^39","^3:"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",208,"^1U",["^U",["^3K","^3L","^25"]],"^1H",208,"^1W",3,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^3I","^39","^3:"]]]]]],"^1>",["^ ","^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",438,"^1G",3,"^1H",438,"^1I",15,"~:style/indent",2,"^1J",["^1K",["^1L",["^1K",[["~$refs","^2=","~$f"],["^4B","^2=","~$f","^4<"]]]]],"^1[","Use this to create “chains” and acyclic graphs of dependent atoms.\n   \n             [[derived-atom]] will:\n          \n             - Take N “source” refs.\n             - Set up a watch on each of them.\n             - Create “sink” atom.\n             - When any of source refs changes:\n                - re-run function `f`, passing N dereferenced values of source refs.\n                - `reset!` result of `f` to the sink atom.\n             - Return sink atom.\n\n             Example:\n\n             ```\n             (def *a (atom 0))\n             (def *b (atom 1))\n             (def *x (derived-atom [*a *b] ::key\n                       (fn [a b]\n                         (str a \":\" b))))\n             \n             (type *x)  ;; => clojure.lang.Atom\n             (deref *x) ;; => \"0:1\"\n             \n             (swap! *a inc)\n             (deref *x) ;; => \"1:1\"\n             \n             (reset! *b 7)\n             (deref *x) ;; => \"1:7\"\n             ```\n\n             Arguments:\n          \n             - `refs` - sequence of source refs,\n             - `key`  - unique key to register watcher, same as in `clojure.core/add-watch`,\n             - `f`    - function that must accept N arguments (same as number of source refs) and return a value to be written to the sink ref. Note: `f` will be called with already dereferenced values,\n             - `opts` - optional. Map of:\n               - `:ref` - use this as sink ref. By default creates new atom,\n               - `:check-equals?` - Defaults to `true`. If equality check should be run on each source update: `(= @sink (f new-vals))`. When result of recalculating `f` equals to the old value, `reset!` won’t be called. Set to `false` if checking for equality can be expensive."],"^X","~$rum.core/derived-atom","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",15,"^1G",1,"^1F",397,"^4A",2,"^1H",438,"^1J",["^1K",["^1L",["^1K",[["^4B","^2=","~$f"],["^4B","^2=","~$f","^4<"]]]]],"^1[","Use this to create “chains” and acyclic graphs of dependent atoms.\n   \n             [[derived-atom]] will:\n          \n             - Take N “source” refs.\n             - Set up a watch on each of them.\n             - Create “sink” atom.\n             - When any of source refs changes:\n                - re-run function `f`, passing N dereferenced values of source refs.\n                - `reset!` result of `f` to the sink atom.\n             - Return sink atom.\n\n             Example:\n\n             ```\n             (def *a (atom 0))\n             (def *b (atom 1))\n             (def *x (derived-atom [*a *b] ::key\n                       (fn [a b]\n                         (str a \":\" b))))\n             \n             (type *x)  ;; => clojure.lang.Atom\n             (deref *x) ;; => \"0:1\"\n             \n             (swap! *a inc)\n             (deref *x) ;; => \"1:1\"\n             \n             (reset! *b 7)\n             (deref *x) ;; => \"1:7\"\n             ```\n\n             Arguments:\n          \n             - `refs` - sequence of source refs,\n             - `key`  - unique key to register watcher, same as in `clojure.core/add-watch`,\n             - `f`    - function that must accept N arguments (same as number of source refs) and return a value to be written to the sink ref. Note: `f` will be called with already dereferenced values,\n             - `opts` - optional. Map of:\n               - `:ref` - use this as sink ref. By default creates new atom,\n               - `:check-equals?` - Defaults to `true`. If equality check should be run on each source update: `(= @sink (f new-vals))`. When result of recalculating `f` equals to the old value, `reset!` won’t be called. Set to `false` if checking for equality can be expensive."],"~$use-state",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",478,"^1G",14,"^1H",478,"^1I",23,"^2B","^2H","^1J",["^1K",["^1L",["^1K",[["~$value-or-fn"]]]]],"^1[","Takes initial value or value returning fn and returns a tuple of [value set-value!],\n  where `value` is current state value and `set-value!` is a function that schedules re-render.\n\n  (let [[value set-state!] (rum/use-state 0)]\n    [:button {:on-click #(set-state! (inc value))}\n      value])"],"^X","~$rum.core/use-state","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",23,"^1Q",["^1K",[["^4E"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",478,"^1U","^2H","^1H",478,"^1W",1,"^2B","^2H","^1X",true,"^1J",["^1K",["^1L",["^1K",[["^4E"]]]]],"^1[","Takes initial value or value returning fn and returns a tuple of [value set-value!],\n  where `value` is current state value and `set-value!` is a function that schedules re-render.\n\n  (let [[value set-state!] (rum/use-state 0)]\n    [:button {:on-click #(set-state! (inc value))}\n      value])"],"~$build-class",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",26,"^1G",8,"^1H",26,"^1I",19,"^2L",true,"^1J",["^1K",["^1L",["^1K",[["^C","^39","^3:"]]]]]],"^2L",true,"^X","~$rum.core/build-class","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",19,"^1Q",["^1K",[["^C","^39","^3:"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",26,"^1U","^2X","^1H",26,"^1W",3,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^C","^39","^3:"]]]]]],"~$use-callback",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",524,"^1G",7,"^1H",524,"^1I",19,"^1J",["^1K",["^1L",["^1K",[["~$callback"],["^4J","^2R"]]]]],"^1[","Takes callback function and returns memoized variant, memoization is done based on provided deps collection.\n\n  (rum/defc button < rum/static\n    [{:keys [on-click]} text]\n    [:button {:on-click on-click}\n      text])\n\n  (rum/defc app [v]\n    (let [on-click (rum/use-callback #(do-stuff v) [v])]\n      ;; because on-click callback is memoized here based on v argument\n      ;; the callback won't be re-created on every render, unless v changes\n      ;; which means that underlying `button` component won't re-render wastefully\n      [button {:on-click on-click}\n        \"press me\"]))\n\n  Read more at https://reactjs.org/docs/hooks-reference.html#usecallback","^2>",["^ ","^1T",false,"^2?",2,"^1W",2,"^1Q",[["^4J"],["^4J","^2R"]],"^1J",["^1K",[["^4J"],["^4J","^2R"]]],"^1S",["^1K",[null,null]]]],"^X","~$rum.core/use-callback","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",19,"^2>",["^ ","^1T",false,"^2?",2,"^1W",2,"^1Q",[["^4J"],["^4J","^2R"]],"^1J",["^1K",[["^4J"],["^4J","^2R"]]],"^1S",["^1K",[null,null]]],"^1Q",[["^4J"],["^4J","^2R"]],"^1R",null,"^2?",2,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^2A",[["^ ","^2?",1,"^1T",false,"^2B","^1V"],["^ ","^2?",2,"^1T",false,"^2B","^1V"]],"^1F",524,"^1H",524,"^1W",2,"^1X",true,"^1J",["^1K",[["^4J"],["^4J","^2R"]]],"^1[","Takes callback function and returns memoized variant, memoization is done based on provided deps collection.\n\n  (rum/defc button < rum/static\n    [{:keys [on-click]} text]\n    [:button {:on-click on-click}\n      text])\n\n  (rum/defc app [v]\n    (let [on-click (rum/use-callback #(do-stuff v) [v])]\n      ;; because on-click callback is memoized here based on v argument\n      ;; the callback won't be re-created on every render, unless v changes\n      ;; which means that underlying `button` component won't re-render wastefully\n      [button {:on-click on-click}\n        \"press me\"]))\n\n  Read more at https://reactjs.org/docs/hooks-reference.html#usecallback"],"^W",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",567,"^1G",7,"^1H",567,"^1I",12,"^1J",["^1K",["^1L",["^1K",[["^V"]]]]],"^1[","Takes a ref returned from use-ref and returns its current value."],"^X","~$rum.core/deref","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",12,"^1Q",["^1K",[["^V"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",567,"^1U","^1V","^1H",567,"^1W",1,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^V"]]]]],"^1[","Takes a ref returned from use-ref and returns its current value."],"~$build-ctor",["^ ","^1C",null,"^1D",["^ ","^1E","/Users/Torgeir/Code/guitar/resources/public/cljs-out/dev/rum/core.cljs","^1F",157,"^1G",8,"^1H",157,"^1I",18,"^2L",true,"^1J",["^1K",["^1L",["^1K",[["^C","^39","^3:"]]]]]],"^2L",true,"^X","~$rum.core/build-ctor","^1E","resources/public/cljs-out/dev/rum/core.cljs","^1I",18,"^1Q",["^1K",[["^C","^39","^3:"]]],"^1R",null,"^1S",["^1K",[null,null]],"^1G",1,"^1T",false,"^1F",157,"^1U",["^U",["^3K","^3L","^25"]],"^1H",157,"^1W",3,"^1X",true,"^1J",["^1K",["^1L",["^1K",[["^C","^39","^3:"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^Y","^Y"],"~:cljs.analyzer/constants",["^ ","~:seen",["^U",["~:rum/react-component","~:did-mount","~:will-unmount","^1D","~:did-remount","~:rum/class","~:init","~:else","~:did-catch","~:child-context","~:rum.reactive/key","~:rum/args","~:before-render","~:did-update","~:key-fn","~:will-mount","~:rum/component-stack","~:will-update","~:class-properties","~:rum/local","~:after-render","~:static-properties","~:wrap-render","~:rum.reactive/refs","~:should-update"]],"~:order",["^4X","^55","^52","^5<","^4T","^5:","^4V","^5>","^57","^53","^4Z","^4U","^4[","^58","^5;","^4S","^56","^54","^51","^4W","^4Y","^59","^50","^5=","^1D"]],"^1[",null]